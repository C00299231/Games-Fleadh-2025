00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 25/02/2025 13:55:43

00000000                             1  ; this file starts the program.
00000000                             2  ; contains the title screen, includes all other files
00000000                             3  
00001000                             4      org $1000
00001000                             5  start:
00001000  6000 0002                  6      bra firstInit
00001004                             7  
00001004                             8  firstInit:
00001004  103C 0021                  9      MOVE.B  #tcScreen, D0           ; access screen information
00001008  223C 00000000             10      MOVE.L  #tcScreenSize, D1       ; placing 0 in D1 triggers loading screen size information
0000100E  4E4F                      11      TRAP    #15                     ; interpret D0 and D1 for screen size
00001010  33C1 00001350             12      MOVE.W  D1,         screenH     ; place screen height in memory location
00001016  4841                      13      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001018  33C1 0000134E             14      MOVE.W  D1,         screenW     ; place screen width in memory location
0000101E                            15      
0000101E  13FC 0000 0000132E        16      move.b #$00, isPaused
00001026                            17      
00001026  303C 0015                 18      move #tcFont, d0
0000102A  223C 00AFE5D0             19      move.l #color5, d1
00001030  4E4F                      20      trap #15
00001032                            21      
00001032  6000 0002                 22      bra title
00001036                            23  
00001036                            24  title:
00001036  4EB9 0000169C             25      jsr drawBg
0000103C                            26      
0000103C  323C 1F0D                 27      move.w #$1f0d, d1
00001040  4EB9 0000180E             28      jsr setCursor
00001046  43F9 00001080             29      lea titlemsg, a1
0000104C  4EB9 000017F6             30      jsr print
00001052                            31      
00001052  323C 1C0F                 32      move.w #$1c0f, d1
00001056  4EB9 0000180E             33      jsr setCursor
0000105C  43F9 00001092             34      lea title2msg, a1
00001062  4EB9 000017F6             35      jsr print
00001068                            36      
00001068                            37      
00001068  6000 0002                 38      bra titleLoop
0000106C                            39      
0000106C                            40  titleLoop:
0000106C                            41      
0000106C                            42      
0000106C                            43      ; put "get input" code into d0
0000106C  223C 0000000D             44      move.l #enterKey, d1
00001072  103C 0013                 45      move.b #tcinp, d0
00001076  4E4F                      46      trap #15
00001078                            47      
00001078  4A01                      48      tst.b d1
0000107A  6600 0030                 49      bne init
0000107E  60EC                      50      bra titleLoop
00001080                            51  
00001080                            52  
00001080= 2D 20 43 45 4C 4C ...     53  titleMsg dc.b '- CELL DEFENDER -',0
00001092                            54  
00001092= 50 72 65 73 73 20 ...     55  title2msg dc.b 'Press "enter" to start...',0
000010AC                            56  
000010AC                            57  ; include other files 
000010AC                            58   include "main.x68"
000010AC                            59  ; this file contains the main game loop
000010AC                            60  
000010AC                            61  init:
000010AC                            62      ; Enable the screen back buffer(see easy 68k help)
000010AC  103C 005C                 63      MOVE.B  #tcdbl,D0          ; 92 Enables Double Buffer
000010B0  123C 0011                 64      MOVE.B  #17,        D1          ; Combine Tasks
000010B4  4E4F                      65      TRAP    #15                     ; Trap (Perform action)
000010B6                            66      
000010B6                            67          ; Place the Player at the center of the screen
000010B6  4281                      68      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010B8  3239 0000134E             69      MOVE.W  screenW,   D1          ; Place Screen width in D1
000010BE  82FC 0002                 70      DIVU    #02,        D1          ; divide by 2 for center on X Axis
000010C2  23C1 00001330             71      MOVE.L  D1,         playerX    ; Players X Position
000010C8  23C1 00001338             72      move.l d1, centerx
000010CE                            73  
000010CE  4281                      74      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010D0  3239 00001350             75      MOVE.W  screenH,   D1          ; Place Screen width in D1
000010D6  82FC 0002                 76      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010DA  23C1 00001334             77      MOVE.L  D1,         playerY    ; Players Y Position
000010E0  23C1 0000133C             78      move.l d1, centerY
000010E6                            79  
000010E6  4EB9 00001352             80      jsr initializeCell
000010EC  13FC 0001 000018C2        81      move.b #1, enemyDir
000010F4  4EB9 000018CC             82      jsr enemySetUp
000010FA  4EB9 000018DE             83      jsr initEnemy
00001100  4EB9 00001520             84      jsr initDraw
00001106                            85  
00001106  13FC 00FF 0000134C        86      move.b #$ff, isWaveOver
0000110E                            87  
0000110E  6000 0002                 88      bra loop
00001112                            89  
00001112                            90  loop:
00001112                            91      ;jsr clearscreen
00001112  4EB9 00001556             92      jsr draw
00001118  4EB9 00001188             93      jsr testinput
0000111E                            94      
0000111E                            95      ; test paused
0000111E  4A39 0000132E             96      tst.b isPaused
00001124  6600 003E                 97      bne paused
00001128                            98  
00001128                            99      ; process
00001128  4EB9 00001AB4            100      jsr increment
0000112E  4EB9 00001908            101      jsr processEnemy
00001134  4EB9 0000193A            102      jsr enemyColCheck
0000113A  4EB9 00001150            103      jsr collision
00001140                           104  
00001140  6000 0002                105      bra endLoop
00001144                           106  endLoop:
00001144                           107      ;move #$300, d5
00001144                           108      ;jsr wasteTime
00001144  4A79 00001344            109      tst currentHealth
0000114A  6600 01BA                110      bne end
0000114E  60C2                     111      bra loop        ; loop
00001150                           112  
00001150                           113  collision:
00001150  4EB9 00001440            114      jsr zone1collision
00001156  4EB9 0000146A            115      jsr zone2collision
0000115C  4EB9 00001494            116      jsr zone3collision
00001162  4E75                     117      rts
00001164                           118  
00001164                           119  paused:
00001164  43F9 00001828            120      lea pauseMsg, a1
0000116A  4EB9 000017F6            121      jsr print
00001170  60D2                     122      bra endLoop
00001172                           123      
00001172                           124  clearscreen:
00001172                           125      ; Clear the screen
00001172  103C 000B                126      MOVE.B  #tccrs,D0          ; Set Cursor Position
00001176  323C FF00                127      MOVE.W  #$FF00,     D1          ; Clear contents
0000117A  4E4F                     128      TRAP    #15
0000117C  4E75                     129      rts
0000117E                           130  
0000117E                           131  wasteTime:
0000117E                           132      ; value put into d5, keep subtracting 1 until d5 contains 0
0000117E                           133      ; takes a lot of time to process
0000117E  5345                     134      sub #1, d5
00001180  BA7C 0000                135      cmp #0, d5
00001184  66F8                     136      bne wasteTime
00001186  4E75                     137      rts
00001188                           138  
00001188                           139  testinput:
00001188                           140      ; getting previous key
00001188  13F9 00001326 0000132A   141      move.b currentkey, lastkey
00001192                           142  
00001192                           143      ; set d1 to $0000 0000
00001192  7200                     144      move.l #0, d1
00001194                           145  
00001194                           146      ; put "get input" code into d0
00001194  103C 0013                147      move.b #tcinp, d0
00001198  4E4F                     148      trap #15
0000119A  13C1 00001326            149      move.b d1, currentkey
000011A0  4E4F                     150      trap #15
000011A2                           151      
000011A2                           152      ; AT THIS POINT, CURRENT KEY CONTAINS THE CURRENT/LAST KEY PRESSED,
000011A2                           153      ; AND D1 CONTAINS WHETHER OR NOT IT IS STILL PRESSED
000011A2                           154      
000011A2                           155      ; test if no input
000011A2  0C01 0000                156      cmpi.b #0, d1
000011A6  6700 0010                157      beq noinput     ; if no input, move to noinput
000011AA                           158      
000011AA  4EB9 000011CA            159      jsr yesinput    ; if input, go to yesinput
000011B0  4EB9 00001236            160      jsr endinput    ; then, go to endinput
000011B6                           161      
000011B6  4E75                     162      rts             ; return to loop
000011B8                           163  
000011B8                           164  noinput:
000011B8                           165      ; go back to loop
000011B8  13FC 0000 00001326       166      move.b #0, currentKey
000011C0  13FC 0000 0000132A       167      move.b #0, lastkey
000011C8  4E75                     168      rts
000011CA                           169  
000011CA                           170  yesinput:
000011CA                           171      ; at this point, keycode in currentkey is pressed
000011CA                           172  
000011CA                           173      ; OPTIONS (can input even if paused)
000011CA  0C39 0020 00001326       174      cmpi.b #spacekey, currentkey
000011D2  6700 0064                175      beq spacepressed
000011D6  0C39 001B 00001326       176      cmpi.b #escapekey, currentkey
000011DE  6700 006A                177      beq escapepressed
000011E2                           178      
000011E2                           179      ; test paused (cannot input if paused)
000011E2  4A39 0000132E            180      tst.b isPaused
000011E8  6600 004C                181      bne endInput
000011EC                           182  
000011EC                           183      ; TEST - take damage
000011EC  0C39 000D 00001326       184      cmpi.b #enterKey, currentKey
000011F4                           185      ;beq takeDmg
000011F4                           186  
000011F4                           187      ; normal movement buttons [check timer first]
000011F4  3A39 00001AAA            188      move.w playerTime, d5
000011FA  4EB9 00001AB8            189      jsr checkIncrement
00001200  6600 0034                190      bne endInput    
00001204                           191  
00001204  0C39 0057 00001326       192      cmpi.b #wkey, currentkey ; W:UP
0000120C  6700 0040                193      beq wpressed
00001210  0C39 0041 00001326       194      cmpi.b #akey, currentkey ; A:LEFT
00001218  6700 004E                195      beq apressed
0000121C  0C39 0053 00001326       196      cmpi.b #skey, currentkey ; S:DOWN
00001224  6700 005C                197      beq spressed
00001228  0C39 0044 00001326       198      cmpi.b #dkey, currentkey ; D:RIGHT
00001230  6700 0070                199      beq dpressed
00001234                           200  
00001234  4E75                     201      rts
00001236                           202  
00001236                           203  endInput:
00001236  4E75                     204      rts
00001238                           205  
00001238                           206  ; INPUTS
00001238                           207  spacepressed:
00001238  1A39 0000132A            208      move.b lastkey, d5
0000123E  BA39 00001326            209      cmp.b currentKey, d5
00001244  6600 00B0                210      bne spaceJustPressed
00001248                           211      ;jsr takeDmg
00001248  4E75                     212      rts
0000124A                           213  
0000124A                           214  escapepressed:
0000124A  6000 00BA                215      bra end
0000124E                           216  
0000124E                           217  ; MOVEMENT INPUT: MUST STAY WITHIN CELL BOUNDARIES
0000124E                           218  wpressed:
0000124E  2639 00001334            219      move.l playerY, d3 ; check boundary with proposed movement
00001254  5383                     220      sub.l #1, D3
00001256  B6B9 000014CC            221      cmp.l celltlY, d3
0000125C  6700 0064                222      beq endMovement
00001260                           223  
00001260  53B9 00001334            224      sub.l #1, playerY
00001266  4E75                     225      rts
00001268                           226  apressed:
00001268  2639 00001330            227      move.l playerX, d3 ; check boundary with proposed movement
0000126E  5383                     228      sub.l #1, D3
00001270  B6B9 000014C8            229      cmp.l celltlX, d3
00001276  6700 004A                230      beq endMovement
0000127A                           231  
0000127A  53B9 00001330            232      sub.l #1, playerX
00001280  4E75                     233      rts
00001282                           234  spressed:
00001282  2639 00001334            235      move.l playerY, d3 ; check boundary with proposed movement
00001288  5283                     236      add.l #1, D3
0000128A  0683 00000008            237      add.l #playerH, d3 ; player size taken into consideration
00001290  B6B9 000014D4            238      cmp.l cellBrY, d3
00001296  6700 002A                239      beq endMovement
0000129A                           240  
0000129A  52B9 00001334            241      add.l #1, playerY
000012A0  4E75                     242      rts
000012A2                           243  dpressed:
000012A2  2639 00001330            244      move.l playerX, d3 ; check boundary with proposed movement
000012A8  5283                     245      add.l #1, D3
000012AA  0683 00000008            246      add.l #playerW, d3 ; player size taken into consideration
000012B0  B6B9 000014D0            247      cmp.l cellBrX, d3
000012B6  6700 000A                248      beq endMovement
000012BA                           249  
000012BA  52B9 00001330            250      add.l #1, playerX
000012C0  4E75                     251      rts
000012C2                           252  
000012C2                           253  endMovement:
000012C2  4E75                     254      rts
000012C4                           255  
000012C4                           256  ; heal up by one hp
000012C4                           257  heal:
000012C4  2439 00001344            258      move.l currentHealth, d2
000012CA  B4B9 00001348            259      cmp.l maxHealth, d2
000012D0  6700 000E                260      beq endHeal
000012D4  5282                     261      add.l #1, d2
000012D6  23C2 00001344            262      move.l d2, currentHealth
000012DC  6000 0002                263      bra endHeal
000012E0                           264  endHeal:
000012E0  4E75                     265      rts
000012E2                           266  
000012E2                           267  takeDmg:
000012E2  2239 00001344            268      move.l currentHealth, d1
000012E8  92B9 000018C8            269      sub.l enemyDamage, d1
000012EE  23C1 00001344            270      move.l d1, currentHealth
000012F4  4E75                     271      rts
000012F6                           272  
000012F6                           273  ; INPUTS SPECIAL
000012F6                           274  
000012F6                           275  ; runs if space is pressed this frame, but not prev frame
000012F6                           276  spaceJustPressed:
000012F6                           277  
000012F6  1A39 0000132E            278      move.b isPaused, d5
000012FC  4605                     279      not.b d5
000012FE  13C5 0000132E            280      move.b d5, isPaused
00001304  4E75                     281      rts
00001306                           282  
00001306                           283  ; runs if game is cut short w/ ESC key
00001306                           284  end:
00001306  4EB8 1172                285      jsr clearscreen
0000130A                           286      
0000130A  43F9 00001834            287      lea endmsg, a1
00001310  4EB9 000017F6            288      jsr print
00001316  FFFF FFFF                289      simhalt
0000131A                           290  
0000131A= 74 65 73 74 00           291  testMsg dc.b 'test',0
0000131F                           292  
0000131F                           293  
0000131F= 14 57 41 53 44 00        294  inputkeys dc.b 20,87,65,83,68,0
00001325                           295  
00001326                           296  currentkey ds.l 01
0000132A                           297  lastkey ds.l 01
0000132E                           298  isPaused ds.b 01
0000132F                           299  
00001330                           300  playerX ds.l 01
00001334                           301  playerY ds.l 01
00001338                           302  
00001338                           303  centerX ds.l 01
0000133C                           304  centerY ds.l 01
00001340                           305  
00001340= 00000000                 306  currentPts dc.l 0
00001344                           307  
00001344= 000000C8                 308  currentHealth dc.l 200
00001348= 000000C8                 309  maxHealth dc.l 200
0000134C                           310  
0000134C= 00                       311  isWaveOver dc.b 0
0000134D                           312  
0000134E                           313  screenW        DS.w    01  ; Reserve Space for Screen Width
00001350                           314  screenH        DS.w    01  ; Reserve Space for Screen Height
00001352                           315  
00001352                           316  
00001352                           317  -------------------- end include --------------------
00001352                           318   include "shapeSizes.x68"
00001352                           319  ; this file contains some const values
00001352                           320  
00001352  =00000008                321  playerW equ 08
00001352  =00000008                322  playerH equ 08
00001352                           323  
00001352  =0000000C                324  enemyH equ 12
00001352  =00000010                325  enemyW equ 16
00001352  =00000006                326  enemyHalfH equ 6
00001352  =00000008                327  enemyHalfW equ 8
00001352                           328  
00001352  =00000005                329  bulletH equ 05
00001352  =00000005                330  bulletW equ 05
00001352                           331  
00001352  =00000010                332  appleH equ 16
00001352  =00000010                333  appleW equ 16
00001352                           334  
00001352  =00000001                335  pointsGain equ 01
00001352  =00000001                336  -------------------- end include --------------------
00001352                           337   include "trapCodes.x68"
00001352                           338  ; traps
00001352  =0000000B                339  tccrs  EQU 11       ; Trap code cursor position
00001352  =0000005C                340  tcdbl  EQU 92       ; Double Buffer Screen Trap Code
00001352  =00000013                341  tcinp equ 19        ; get input trap code
00001352  =00000021                342  tcScreen EQU 33    ; Screen size information trap code
00001352  =00000000                343  tcScreenSize EQU 00    ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001352                           344                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001352  =00000015                345  tcFont equ 21       ; change font style/colour
00001352  =00000050                346  tcPenClr equ 80     ; change pen colour
00001352  =00000051                347  tcPenFil equ 81     ; change pen fill
00001352  =00000057                348  tcRect equ 87       ; draw rectangle
00001352  =00000057                349  -------------------- end include --------------------
00001352                           350   include "inputKeyCodes.x68"
00001352                           351  ; this file contains relevant input keycodes
00001352                           352  
00001352  =0000001B                353  escapekey equ $1b
00001352  =00000020                354  spacekey equ $20
00001352  =0000000D                355  enterKey equ $0d
00001352                           356  
00001352  =00000057                357  wkey equ $57
00001352  =00000041                358  akey equ $41
00001352  =00000053                359  skey equ $53
00001352  =00000044                360  dkey equ $44
00001352  =00000044                361  -------------------- end include --------------------
00001352                           362   include "colours.x68"
00001352                           363  ; this file contains relevant color values
00001352                           364  
00001352                           365  ; 6ive colours: ranging from dark to light, plus one for contrast
00001352                           366  ; color1: darkest
00001352                           367  ; color5: lightest
00001352                           368  ; colorRed: contrast red colour
00001352  =00201808                369  color1 equ $00201808
00001352  =00494320                370  color2 equ $00494320
00001352  =0056864B                371  color3 equ $0056864b
00001352  =007AC687                372  color4 equ $007ac687
00001352  =00AFE5D0                373  color5 equ $00afe5d0
00001352                           374  
00001352  =00463EBD                375  colorRed equ $00463ebd
00001352  =00463EBD                376  -------------------- end include --------------------
00001352                           377   include "cell.x68"
00001352                           378  ; this file contains cell data
00001352                           379  
00001352                           380  ; cell contains:
00001352                           381      ; big square boundary
00001352                           382      ; 2 square attack zones - top corners
00001352                           383      ; 1 square heal zone - bottom
00001352                           384  
00001352                           385  initializeCell: ; initialize values for cell and zones
00001352                           386  
00001352                           387      ; this subroutine gathers top-left and bottom-right bounds for the cell,
00001352                           388      ; as well as each zone
00001352                           389  
00001352                           390      ; these bounds are used to draw and process
00001352                           391  
00001352                           392      ;--------RECTANGLE TRAP CODE:
00001352                           393      ; d1: top left X
00001352                           394      ; d2: top left Y
00001352                           395  
00001352                           396      ; d3: bottom right X
00001352                           397      ; d4: bottom right Y
00001352                           398      
00001352                           399  
00001352                           400      ;--------get cell bounds
00001352                           401      ; TL
00001352  2238 1338                402      move.l centerX, d1      ; move centerX to d1
00001356  92B9 00001508            403      sub.l cellXradius, d1     ; add/sub based on cell radius
0000135C  23C1 000014C8            404      move.l d1, celltlX      ; save to relevant location
00001362                           405  
00001362  2238 133C                406      move.l centerY, d1
00001366  92B9 0000150C            407      sub.l cellYradius, d1
0000136C  23C1 000014CC            408      move.l d1, celltlY
00001372                           409  
00001372                           410      ; BR
00001372  2238 1338                411      move.l centerX, d1
00001376  D2B9 00001508            412      add.l cellXradius, d1
0000137C  D2B8 0008                413      add.l playerH, d1
00001380  23C1 000014D0            414      move.l d1, cellbrX
00001386                           415  
00001386  2238 133C                416      move.l centerY, d1
0000138A  D2B9 0000150C            417      add.l cellYradius, d1
00001390  23C1 000014D4            418      move.l d1, cellbrY
00001396                           419  
00001396                           420  
00001396                           421      ;--------get zone 1 bounds
00001396                           422      ; TL
00001396  23F9 000014C8 000014D8   423      move.l celltlX, zone1tlX
000013A0                           424  
000013A0  23F9 000014CC 000014DC   425      move.l celltlY, zone1tlY
000013AA                           426  
000013AA                           427      ; BR
000013AA  2239 000014D8            428      move.l zone1tlX, d1
000013B0  D2B9 00001510            429      add.l zoneWidth, d1
000013B6  23C1 000014E0            430      move.l d1, zone1brX
000013BC                           431  
000013BC  2239 000014DC            432      move.l zone1tly, d1
000013C2  D2B9 00001514            433      add.l zoneHeight, d1
000013C8  23C1 000014E4            434      move.l d1, zone1brY
000013CE                           435  
000013CE                           436  
000013CE                           437      ;--------get zone 2 bounds
000013CE                           438      ; TL
000013CE  2239 000014D0            439      move.l cellbrX, d1
000013D4  92B9 00001510            440      sub.l zoneWidth, d1
000013DA  23C1 000014E8            441      move.l d1, zone2tlX
000013E0                           442  
000013E0  23F9 000014CC 000014EC   443      move.l celltlY, zone2tlY
000013EA                           444  
000013EA                           445      ; BR
000013EA  23F9 000014D0 000014F0   446      move.l cellbrx, zone2brX
000013F4                           447  
000013F4  2239 000014CC            448      move.l celltlY, d1
000013FA  D2B9 00001514            449      add.l zoneHeight, d1
00001400  23C1 000014F4            450      move.l d1, zone2brY
00001406                           451  
00001406                           452  
00001406                           453      ;--------get zone 3 bounds
00001406                           454      ;(ZONE 3 IS ON THE BOTTOM; FULL WIDTH OF CELL, REGULAR ZONE HEIGHT)
00001406                           455      ; TL
00001406  2239 000014D0            456      move.l cellbrX, d1
0000140C  92B9 00001510            457      sub.l zoneWidth, d1
00001412  23C1 000014F8            458      move.l d1, zone3tlX
00001418                           459  
00001418  2239 000014D4            460      move.l cellbrY, d1
0000141E  92B9 00001514            461      sub.l zoneHeight, d1
00001424  23C1 000014FC            462      move.l d1, zone3tlY
0000142A                           463  
0000142A                           464      ; BR
0000142A  23F9 000014D0 00001500   465      move.l cellbrX, zone3brX
00001434                           466  
00001434  23F9 000014D4 00001504   467      move.l cellbrY, zone3brY
0000143E                           468  
0000143E  4E75                     469      rts
00001440                           470  
00001440                           471  zone1collision:
00001440  2438 1330                472      move.l playerX, d2
00001444  2638 1334                473      move.l playerY, d3
00001448                           474  
00001448                           475      ; check x
00001448  B4B9 000014E0            476      cmp.l zone1brX, d2
0000144E  6E00 0076                477      bgt endCollision
00001452                           478      ; check y
00001452  B6B9 000014E4            479      cmp.l zone1brY, d3
00001458  6E00 006C                480      bgt endCollision
0000145C                           481  
0000145C                           482  
0000145C                           483      ; at this point, player is confirmed in zone 1
0000145C  43F9 00001518            484      lea zoneMsg, a1
00001462  4EB9 000017F6            485      jsr print
00001468                           486  
00001468  4E75                     487      rts
0000146A                           488  
0000146A                           489  zone2collision:
0000146A  2438 1330                490      move.l playerX, d2
0000146E  2638 1334                491      move.l playerY, d3
00001472                           492  
00001472                           493      ; check x
00001472  B4B9 000014E8            494      cmp.l zone2tlX, d2
00001478  6D00 004C                495      blt endCollision
0000147C                           496      ; check y
0000147C  B6B9 000014E4            497      cmp.l zone1brY, d3
00001482  6E00 0042                498      bgt endCollision
00001486                           499  
00001486  43F9 00001518            500      lea zoneMsg, a1
0000148C  4EB9 000017F6            501      jsr print
00001492                           502  
00001492                           503      ; at this point, player is confirmed in zone 2
00001492                           504  
00001492  4E75                     505      rts
00001494                           506  
00001494                           507  zone3collision:
00001494  2438 1330                508      move.l playerX, d2
00001498  2638 1334                509      move.l playerY, d3
0000149C                           510  
0000149C                           511      ; check x
0000149C  B4B9 000014F8            512      cmp.l zone3tlX, d2
000014A2  6D00 0022                513      blt endCollision
000014A6                           514      ; check y
000014A6  B6B9 000014FC            515      cmp.l zone3tlY, d3
000014AC  6D00 0018                516      blt endCollision
000014B0                           517  
000014B0                           518      ; at this point, player is confirmed in zone 3
000014B0                           519  
000014B0  3A39 00001AB0            520      move.w healTime, d5
000014B6  4EB9 00001AB8            521      jsr checkIncrement
000014BC  6600 0008                522      bne endCollision
000014C0  4EB8 12C4                523      jsr heal
000014C4                           524      
000014C4  4E75                     525      rts
000014C6                           526  
000014C6                           527  endCollision:
000014C6  4E75                     528      rts
000014C8                           529  
000014C8                           530  ;---------------cell top-left bounds
000014C8                           531  celltlX ds.l 01
000014CC                           532  celltlY ds.l 01
000014D0                           533  ; cell bottom-right bounds
000014D0                           534  cellbrX ds.l 01
000014D4                           535  cellbrY ds.l 01
000014D8                           536  
000014D8                           537  ;---------------zone 1 top-left bounds
000014D8                           538  zone1tlX ds.l 01
000014DC                           539  zone1tlY ds.l 01
000014E0                           540  ; zone 1 bottom-right bounds
000014E0                           541  zone1brX ds.l 01
000014E4                           542  zone1brY ds.l 01
000014E8                           543  
000014E8                           544  ;---------------zone 2 top-left bounds
000014E8                           545  zone2tlX ds.l 01
000014EC                           546  zone2tlY ds.l 01
000014F0                           547  ; zone 2 bottom-right bounds
000014F0                           548  zone2brX ds.l 01
000014F4                           549  zone2brY ds.l 01
000014F8                           550  
000014F8                           551  ;---------------zone 3 top-left bounds
000014F8                           552  zone3tlX ds.l 01
000014FC                           553  zone3tlY ds.l 01
00001500                           554  ; zone 3 bottom-right bounds
00001500                           555  zone3brX ds.l 01
00001504                           556  zone3brY ds.l 01
00001508                           557  
00001508                           558  ; horizontal and vertical radius of main cell (half width)
00001508= 00000050                 559  cellXradius dc.l 80
0000150C= 00000046                 560  cellYradius dc.l 70
00001510                           561  
00001510                           562  ; width of zone
00001510= 00000032                 563  zoneWidth dc.l 50
00001514= 00000023                 564  zoneHeight dc.l 35
00001518                           565  
00001518= 49 4E 20 5A 4F 4E ...    566  zoneMsg dc.b 'IN ZONE',0
00001520                           567  
00001520                           568  
00001520                           569  -------------------- end include --------------------
00001520                           570   include "draw.x68"
00001520                           571  ; this file contains all draw functions
00001520                           572  
00001520                           573  initDraw:
00001520                           574      ; get health rectangle bounds
00001520                           575  
00001520                           576      ;HEIGHT
00001520  3238 1350                577      move.w screenH, d1
00001524  0481 0000004B            578      sub.l #75, d1
0000152A  23C1 000018A4            579      move.l d1, healthTlY
00001530  0681 0000000F            580      add.l #15, d1
00001536  23C1 000018AC            581      move.l d1, healthBrY
0000153C                           582  
0000153C                           583      ;WIDTH
0000153C  2238 1338                584      move.l centerX, d1
00001540                           585      ;move.l maxHealth, d2
00001540                           586      ;divu #2, d2
00001540  92B8 1348                587      sub.l maxHealth, d1
00001544  23C1 000018A0            588      move.l d1, healthTlX
0000154A                           589  
0000154A  D2B8 1348                590      add.l maxhealth, d1
0000154E  23C1 000018A8            591      move.l d1, healthBrX
00001554                           592      
00001554  4E75                     593      rts
00001556                           594  
00001556                           595  
00001556                           596  draw:
00001556                           597       ; Enable back buffer
00001556  103C 005E                598      MOVE.B  #94,        D0
0000155A  4E4F                     599      TRAP    #15
0000155C                           600  
0000155C  4EB9 0000169C            601      jsr drawBg
00001562  4EB9 0000174E            602      jsr drawCell
00001568  4EB9 000016CC            603      jsr drawPlayer
0000156E  4EB9 00001700            604      jsr drawEnemy
00001574  4EB9 000015E2            605      jsr drawText
0000157A  4EB9 00001588            606      jsr drawHealth
00001580  4EB9 00001646            607      jsr drawWaveOver
00001586  4E75                     608      rts
00001588                           609  
00001588                           610  drawHealth:
00001588  223C 0056864B            611      move.l #color3, d1
0000158E  4EB9 000017E6            612      jsr setPenColour
00001594  223C 00494320            613      move.l #color2, d1
0000159A  4EB9 000017EE            614      jsr setFillColour
000015A0                           615  
000015A0  2239 000018A0            616      move.l healthTlX, d1
000015A6  2439 000018A4            617      move.l healthTlY, d2
000015AC                           618  
000015AC  2639 000018A8            619      move.l healthBrX, d3
000015B2  2839 000018AC            620      move.l healthBrY, d4
000015B8  4EB9 00001806            621      jsr drawRect
000015BE                           622  
000015BE                           623      ; DRAW FULL PART OF HP BAR
000015BE  2639 000018A0            624      move.l healthtlX, d3
000015C4  D6B8 1344                625      add.l currentHealth, d3
000015C8                           626  
000015C8  223C 0056864B            627      move.l #color3, d1 ; change colour
000015CE  4EB9 000017EE            628      jsr setFillColour
000015D4                           629  
000015D4  2239 000018A0            630      move.l healthTlX, d1 ; set value in d1 back to what its supposed to be
000015DA  4EB9 00001806            631      jsr drawRect
000015E0  4E75                     632      rts
000015E2                           633  
000015E2                           634  drawText:
000015E2                           635      ; set colours
000015E2  223C 00AFE5D0            636      move.l #color5, d1
000015E8  4EB9 000017E6            637      jsr setPenColour
000015EE  223C 00201808            638      move.l #color1, d1
000015F4  4EB9 000017EE            639      jsr setFillColour
000015FA                           640      ; PLAYER SCORE MSG
000015FA  323C 0201                641      move.w #$0201, d1
000015FE  4EB9 0000180E            642      jsr setCursor
00001604  43F9 0000183E            643      lea pointsMsg, a1
0000160A  4EB9 000017F6            644      jsr print
00001610                           645      ; PLAYER SCORE
00001610  223C 00000E01            646      move.l #$e01, d1
00001616  4EB9 0000180E            647      jsr setCursor
0000161C  2238 1340                648      move.l currentPts, d1
00001620  4EB9 000017FE            649      jsr printNum
00001626                           650  
00001626                           651      ; HEALTH
00001626  323C 071B                652      move.w #$071b, d1
0000162A  4EB9 0000180E            653      jsr setCursor
00001630  43F9 00001846            654      lea healthMsg, a1
00001636  4EB9 000017F6            655      jsr print
0000163C                           656  
0000163C                           657  
0000163C                           658      ; reset cursor
0000163C  7200                     659      move.l #0, d1
0000163E  4EB9 0000180E            660      jsr setCursor
00001644  4E75                     661      rts
00001646                           662  
00001646                           663  drawWaveOver:
00001646                           664      ; set colours
00001646  223C 00AFE5D0            665      move.l #color5, d1
0000164C  4EB9 000017E6            666      jsr setPenColour
00001652  223C 00201808            667      move.l #color1, d1
00001658  4EB9 000017EE            668      jsr setFillColour
0000165E                           669  
0000165E                           670      ; check is wave over
0000165E  1438 134C                671      move.b isWaveOver, d2
00001662  4A02                     672      tst.b d2
00001664  6700 0034                673      beq endDrawWaveOver
00001668                           674      
00001668                           675      ; draw text 1
00001668  223C 00000805            676      move.l #$0805, d1
0000166E  4EB9 0000180E            677      jsr setCursor
00001674  43F9 0000184E            678      lea waveOverMsg1, a1
0000167A  4EB9 000017F6            679      jsr print
00001680                           680      ; draw text 2
00001680  223C 00000806            681      move.l #$0806, d1
00001686  4EB9 0000180E            682      jsr setCursor
0000168C  43F9 00001873            683      lea waveOverMsg2, a1
00001692  4EB9 000017F6            684      jsr print
00001698                           685  
00001698                           686      ; draw apple
00001698  4E75                     687      rts
0000169A                           688  endDrawWaveOver:
0000169A  4E75                     689      rts
0000169C                           690  
0000169C                           691  drawBg:
0000169C                           692      ; set colours
0000169C  223C 00494320            693      move.l #color2, d1
000016A2  4EB9 000017E6            694      jsr setPenColour
000016A8  223C 00201808            695      move.l #color1, d1
000016AE  4EB9 000017EE            696      jsr setFillColour
000016B4                           697  
000016B4                           698      ; clear d3 and d4 (screen W and H are words)
000016B4  4283                     699      clr.l d3
000016B6  4284                     700      clr.l d4
000016B8                           701  
000016B8                           702      ; put the stuff in the registers, draw rect
000016B8  7200                     703      move.l #0, d1
000016BA  7400                     704      move.l #0, d2
000016BC  3638 134E                705      move.w screenW, d3
000016C0  3838 1350                706      move.w screenH, d4
000016C4  4EB9 00001806            707      jsr drawRect
000016CA  4E75                     708      rts
000016CC                           709  
000016CC                           710  drawPlayer:
000016CC                           711      ; Set white
000016CC  223C 00AFE5D0            712      MOVE.L #color5, d1
000016D2  4EB9 000017E6            713      jsr setPenColour
000016D8  223C 00201808            714      move.l #color1, d1
000016DE  4EB9 000017EE            715      jsr setFillColour
000016E4                           716      
000016E4                           717      ; Set X, Y, Width and Height
000016E4  2238 1330                718      MOVE.L  playerX,   D1          ; X
000016E8  2438 1334                719      MOVE.L  playerY,   D2          ; Y
000016EC  2638 1330                720      MOVE.L  playerX,   D3
000016F0  5083                     721      ADD.L   #playerW,   D3      ; Width
000016F2  2838 1334                722      MOVE.L  playerY,   D4 
000016F6  5084                     723      ADD.L   #playerH,   D4      ; Height
000016F8                           724      
000016F8                           725      ; Draw Player
000016F8  4EB9 00001806            726      jsr drawRect
000016FE  4E75                     727      RTS
00001700                           728  
00001700                           729  drawEnemy:
00001700  4A39 000018C3            730      tst.b enemyActive
00001706  6700 00DC                731      beq endDraw
0000170A                           732      ; set colour
0000170A  223C 00AFE5D0            733      move.l #color5, d1
00001710  4EB9 000017E6            734      jsr setPenColour
00001716  223C 00463EBD            735      move.l #colorRed, d1
0000171C  4EB9 000017EE            736      jsr setFillColour
00001722                           737  
00001722                           738      ; set rect values
00001722  2239 000018B6            739      move.l enemyX, d1
00001728  2439 000018BA            740      move.l enemyY, d2
0000172E  2639 000018B6            741      move.l enemyX, d3
00001734  2839 000018BA            742      move.l enemyY, d4
0000173A  0683 00000010            743      add.l #enemyW, d3
00001740  0684 0000000C            744      add.l #enemyH, d4
00001746                           745  
00001746  4EB9 00001806            746      jsr drawRect
0000174C  4E75                     747      rts
0000174E                           748  
0000174E                           749  drawCell:
0000174E                           750      ;---------------draw main cell
0000174E                           751      ; change colours
0000174E  223C 007AC687            752      move.l #color4, d1
00001754  4EB9 000017E6            753      jsr setPenColour
0000175A  223C 00494320            754      move.l #color2, d1
00001760  4EB9 000017EE            755      jsr setFillColour
00001766                           756  
00001766  2238 14C8                757      move.l celltlX, d1
0000176A  2438 14CC                758      move.l celltlY, d2
0000176E  2638 14D0                759      move.l cellbrX, d3
00001772  2838 14D4                760      move.l cellbrY, d4
00001776  4EB9 00001806            761      jsr drawRect
0000177C                           762  
0000177C                           763      ;---------------draw zone 1
0000177C                           764      ; change colours
0000177C  223C 007AC687            765      move.l #color4, d1
00001782  4EB9 000017E6            766      jsr setPenColour
00001788  223C 0056864B            767      move.l #color3, d1
0000178E  4EB9 000017EE            768      jsr setFillColour
00001794                           769  
00001794  2238 14D8                770      move.l zone1tlX, d1
00001798  2438 14DC                771      move.l zone1tlY, d2
0000179C  2638 14E0                772      move.l zone1brX, d3
000017A0  2838 14E4                773      move.l zone1brY, d4
000017A4  4EB9 00001806            774      jsr drawRect
000017AA                           775  
000017AA                           776      ;---------------draw zone 2
000017AA  2238 14E8                777      move.l zone2tlX, d1
000017AE  2438 14EC                778      move.l zone2tlY, d2
000017B2  2638 14F0                779      move.l zone2brX, d3
000017B6  2838 14F4                780      move.l zone2brY, d4
000017BA  4EB9 00001806            781      jsr drawRect
000017C0                           782      
000017C0                           783  
000017C0                           784      ;---------------draw zone 3
000017C0                           785      ; change colours
000017C0  223C 007AC687            786      move.l #color4, d1
000017C6  4EB9 000017EE            787      jsr setFillColour
000017CC                           788  
000017CC  2238 14F8                789      move.l zone3tlX, d1
000017D0  2438 14FC                790      move.l zone3tlY, d2
000017D4  2638 1500                791      move.l zone3brX, d3
000017D8  2838 1504                792      move.l zone3brY, d4
000017DC  4EB9 00001806            793      jsr drawRect
000017E2                           794  
000017E2                           795      ; done
000017E2  4E75                     796      rts
000017E4                           797  
000017E4                           798  endDraw:
000017E4  4E75                     799      rts
000017E6                           800  
000017E6                           801  setPenColour:
000017E6  103C 0050                802      move.b #tcPenClr, d0
000017EA  4E4F                     803      trap #15
000017EC  4E75                     804      rts
000017EE                           805  
000017EE                           806  setFillColour:
000017EE  103C 0051                807      move.b #tcPenFil, d0
000017F2  4E4F                     808      trap #15
000017F4  4E75                     809      rts
000017F6                           810  
000017F6                           811  print:
000017F6  303C 000D                812      move #13, d0
000017FA  4E4F                     813      trap #15
000017FC  4E75                     814      rts
000017FE                           815  
000017FE                           816  printNum:
000017FE  303C 0003                817      move #3, d0
00001802  4E4F                     818      trap #15
00001804  4E75                     819      rts
00001806                           820  
00001806                           821  drawRect:
00001806  103C 0057                822      MOVE.B  #tcRect, d0
0000180A  4E4F                     823      TRAP    #15
0000180C  4E75                     824      rts
0000180E                           825  
0000180E                           826  setCursor:
0000180E  103C 000B                827      MOVE.B  #tcCrs, d0
00001812  4E4F                     828      TRAP    #15
00001814  4E75                     829      rts
00001816                           830  
00001816                           831  ; INSTANT NEW LINE
00001816                           832  crlf:
00001816  303C 0006                833      move #6, d0
0000181A  323C 000D                834      move #13, d1
0000181E  4E4F                     835      trap #15
00001820  323C 000A                836      move #10, d1
00001824  4E4F                     837      trap #15
00001826  4E75                     838      rts
00001828                           839  
00001828= 47 41 4D 45 20 50 ...    840  pauseMsg dc.b 'GAME PAUSED', 0
00001834= 47 41 4D 45 20 4F ...    841  endMsg dc.b 'GAME OVER', 0
0000183E= 50 4F 49 4E 54 53 ...    842  pointsMsg dc.b 'POINTS:', 0
00001846= 48 45 41 4C 54 48 ...    843  healthMsg dc.b 'HEALTH:', 0
0000184E= 41 6E 20 61 70 70 ...    844  waveOverMsg1 dc.b 'An apple has appeared in the garden!',0
00001873= 50 72 65 73 73 20 ...    845  waveOverMsg2 dc.b 'Press "g" to try grab it, or "i" to ignore.',0
0000189F                           846  
000018A0                           847  healthTlX ds.l 01
000018A4                           848  healthTlY ds.l 01
000018A8                           849  healthBrX ds.l 01
000018AC                           850  healthBrY ds.l 01
000018B0                           851  
000018B0                           852  currentHpX ds.l 01
000018B4                           853  
000018B4= C8                       854  healthBarOffset dc.b 200
000018B5                           855  
000018B5                           856  
000018B5                           857  
000018B5                           858  -------------------- end include --------------------
000018B5                           859   include "enemies.x68"
000018B5                           860  ; this file contains enemy data
000018B5                           861  
000018B5                           862  ; variable data for current enemy
000018B6                           863  enemyX ds.l 01
000018BA                           864  enemyY ds.l 01
000018BE                           865  enemyHp ds.l 01
000018C2                           866  
000018C2                           867  enemyDir ds.b 01
000018C3                           868  enemyActive ds.b 01
000018C4                           869  
000018C4                           870  enemyMaxHp ds.l 01
000018C8                           871  enemyDamage ds.l 01
000018CC                           872  
000018CC                           873  enemySetUp:
000018CC  21FC 00000014 18C4       874      move.l #20, enemyMaxHp
000018D4  21FC 00000014 18C8       875      move.l #20, enemyDamage
000018DC  4E75                     876      rts
000018DE                           877  
000018DE                           878  ; enemy initialization: set position, health
000018DE                           879  ; 3 longs require 3 mem locations
000018DE                           880  ; call srts, then take values outside them
000018DE                           881  
000018DE                           882  ; GENERAL INIT/PROCESS
000018DE                           883  ; before these srts are called, enemyDir is given a value
000018DE                           884  ; 0: top
000018DE                           885  ; 1: left
000018DE                           886  ; 2: right
000018DE                           887  ; 3: bottom
000018DE                           888  
000018DE                           889  initEnemy:
000018DE                           890      ; init based on which direction
000018DE  4A38 18C2                891      tst.b enemyDir
000018E2  6700 0086                892      beq initEnemyTop
000018E6  0C38 0001 18C2           893      cmpi.b #1, enemyDir
000018EC  6700 00C4                894      beq initEnemyLeft
000018F0  0C38 0002 18C2           895      cmpi.b #2, enemyDir
000018F6  6700 0102                896      beq initEnemyRight
000018FA  0C38 0003 18C2           897      cmpi.b #3, enemyDir
00001900  6700 0142                898      beq initEnemyBottom
00001904                           899  
00001904                           900      ; no valid direction placed. just put enemy at the top
00001904  6000 0064                901      bra initEnemyTop
00001908                           902  
00001908                           903  processEnemy:
00001908  4A38 18C3                904      tst.b enemyActive
0000190C  6700 018E                905      beq endProcess
00001910                           906      ; process based on direction
00001910  4A38 18C2                907      tst.b enemyDir
00001914  6700 0070                908      beq processEnemyTop
00001918  0C38 0001 18C2           909      cmpi.b #1, enemyDir
0000191E  6700 00AE                910      beq processEnemyLeft
00001922  0C38 0002 18C2           911      cmpi.b #2, enemyDir
00001928  6700 00EE                912      beq processEnemyRight
0000192C  0C38 0003 18C2           913      cmpi.b #3, enemyDir
00001932  6700 012E                914      beq processEnemyBottom
00001936                           915  
00001936                           916      ; no valid direction placed. just put enemy at the top
00001936  6000 004E                917      bra processEnemyTop
0000193A                           918  
0000193A                           919  enemyColCheck:
0000193A  4A38 18C3                920      tst.b enemyActive
0000193E  6700 015E                921      beq endCollide
00001942                           922  
00001942                           923      ; colCheck based on direction
00001942  4A38 18C2                924      tst.b enemyDir
00001946  6700 0056                925      beq enemyTopColCheck
0000194A  0C38 0001 18C2           926      cmpi.b #1, enemyDir
00001950  6700 0094                927      beq enemyLeftColCheck
00001954  0C38 0002 18C2           928      cmpi.b #2, enemyDir
0000195A  6700 00D4                929      beq enemyRightColCheck
0000195E  0C38 0003 18C2           930      cmpi.b #3, enemyDir
00001964  6700 0114                931      beq enemyBottomColCheck
00001968                           932  
00001968                           933      ; no valid direction. nothing we can do atp
00001968  4E75                     934      rts
0000196A                           935  
0000196A                           936  ;-------------------------------ENEMY TOP
0000196A                           937  initEnemyTop:
0000196A  21FC 00000000 18BA       938      move.l #0, enemyY
00001972  21F8 1338 18B6           939      move.l centerX, enemyX
00001978  21F8 18C4 18BE           940      move.l enemyMaxHp, enemyHp
0000197E  4EB9 00001AA0            941      jsr endInitEnemy
00001984  4E75                     942      rts
00001986                           943  processEnemyTop:
00001986  3A39 00001AAC            944      move.w enemyTime, d5
0000198C  4EB9 00001AB8            945      jsr checkIncrement
00001992  6600 0108                946      bne endProcess
00001996                           947  
00001996  52B8 18BA                948      add.l #1, enemyY
0000199A                           949  
0000199A  6000 0100                950      bra endProcess
0000199E                           951  
0000199E                           952  enemyTopColCheck:
0000199E  2438 14CC                953      move.l celltlY, d2
000019A2  0482 0000000C            954      sub.l #enemyH, d2
000019A8  B4B8 18BA                955      cmp.l enemyY, d2
000019AC  6700 00E0                956      beq enemyCollide
000019B0  4E75                     957      rts
000019B2                           958  
000019B2                           959  ;-------------------------------ENEMY LEFT
000019B2                           960  initEnemyLeft:
000019B2  21FC 00000000 18B6       961      move.l #0, enemyX
000019BA  21F8 133C 18BA           962      move.l centerY, enemyY
000019C0  21F8 18C4 18BE           963      move.l enemyMaxHp, enemyHp
000019C6  4EB9 00001AA0            964      jsr endInitEnemy
000019CC  4E75                     965      rts
000019CE                           966  processEnemyLeft:
000019CE  3A39 00001AAC            967      move.w enemyTime, d5
000019D4  4EB9 00001AB8            968      jsr checkIncrement
000019DA  6600 00C0                969      bne endProcess
000019DE                           970  
000019DE  52B8 18B6                971      add.l #1, enemyX
000019E2                           972  
000019E2  6000 00B8                973      bra endProcess
000019E6                           974  
000019E6                           975  enemyLeftColCheck:
000019E6  2438 14C8                976      move.l celltlX, d2
000019EA  0482 00000010            977      sub.l #enemyW, d2
000019F0  B4B8 18B6                978      cmp.l enemyX, d2
000019F4  6700 0098                979      beq enemyCollide
000019F8  4E75                     980      rts
000019FA                           981  
000019FA                           982  ;-------------------------------ENEMY RIGHT
000019FA                           983  initEnemyRight:
000019FA  4282                     984      clr.l d2
000019FC  3438 134E                985      move.w screenW, d2
00001A00  21C2 18B6                986      move.l d2, enemyX
00001A04                           987  
00001A04  21F8 133C 18BA           988      move.l centerY, enemyY
00001A0A  21F8 18C4 18BE           989      move.l enemyMaxHp, enemyHp
00001A10                           990  
00001A10  4EB9 00001AA0            991      jsr endInitEnemy
00001A16  4E75                     992      rts
00001A18                           993  processEnemyRight:
00001A18  3A39 00001AAC            994      move.w enemyTime, d5
00001A1E  4EB9 00001AB8            995      jsr checkIncrement
00001A24  6600 0076                996      bne endProcess
00001A28                           997  
00001A28  53B8 18B6                998      sub.l #1, enemyX
00001A2C                           999  
00001A2C  6000 006E               1000      bra endProcess
00001A30                          1001  
00001A30                          1002  enemyRightColCheck:
00001A30  2438 14C8               1003      move.l celltlx, d2
00001A34  0482 00000010           1004      sub.l #enemyw, d2
00001A3A  B4B8 18B6               1005      cmp.l enemyX, d2
00001A3E  6700 004E               1006      beq enemyCollide
00001A42  4E75                    1007      rts
00001A44                          1008  
00001A44                          1009  ;-------------------------------ENEMY BOTTOM
00001A44                          1010  initEnemyBottom:
00001A44  4282                    1011      clr.l d2
00001A46  3438 1350               1012      move.w screenH, d2
00001A4A  21C2 18BA               1013      move.l d2, enemyY
00001A4E                          1014  
00001A4E  21F8 1338 18B6          1015      move.l centerX, enemyX
00001A54  21F8 18C4 18BE          1016      move.l enemyMaxHp, enemyHp
00001A5A                          1017  
00001A5A  4EB9 00001AA0           1018      jsr endInitEnemy
00001A60  4E75                    1019      rts
00001A62                          1020  processEnemyBottom:
00001A62  3A39 00001AAC           1021      move.w enemyTime, d5
00001A68  4EB9 00001AB8           1022      jsr checkIncrement
00001A6E  6600 002C               1023      bne endProcess
00001A72                          1024  
00001A72  53B8 18BA               1025      sub.l #1, enemyY
00001A76                          1026  
00001A76  6000 0024               1027      bra endProcess
00001A7A                          1028  
00001A7A                          1029  enemyBottomColCheck:
00001A7A  2438 14CC               1030      move.l celltlY, d2
00001A7E  0482 0000000C           1031      sub.l #enemyH, d2
00001A84  B4B8 18BA               1032      cmp.l enemyY, d2
00001A88  6700 0004               1033      beq enemyCollide
00001A8C  4E75                    1034      rts
00001A8E                          1035  
00001A8E                          1036  ;---------------OTHER STUFF
00001A8E                          1037  enemyCollide: ; enemy successfully reached the base
00001A8E  4EB8 12E2               1038      jsr takeDmg
00001A92  11FC 0000 18C3          1039      move.b #0, enemyActive
00001A98  4E75                    1040      rts
00001A9A                          1041  enemyHit: ; enemy hit by a projectile
00001A9A  4E75                    1042      rts
00001A9C                          1043  
00001A9C                          1044  endProcess:
00001A9C  4E75                    1045      rts
00001A9E                          1046  endCollide:
00001A9E  4E75                    1047      rts
00001AA0                          1048  endInitEnemy:
00001AA0  5DB8 18BA               1049      sub.l #enemyHalfH, enemyY
00001AA4  51B8 18B6               1050      sub.l #enemyHalfW, enemyX
00001AA8  4E75                    1051      rts
00001AAA                          1052  
00001AAA                          1053  -------------------- end include --------------------
00001AAA                          1054   include "timings.x68"
00001AAA                          1055  ; this file contains timing stuff
00001AAA                          1056  
00001AAA= 000A                    1057  playerTime dc.w 10
00001AAC= 0032                    1058  enemyTime dc.w 50
00001AAE= 012C                    1059  projTime dc.w 300
00001AB0= 0028                    1060  healTime dc.w 40
00001AB2= 07D0                    1061  enemySpawnTimer dc.w 2000
00001AB4                          1062  
00001AB4                          1063  increment: ; D6 permanently used up
00001AB4  5246                    1064      add.w #1, d6
00001AB6  4E75                    1065      rts
00001AB8                          1066  
00001AB8                          1067  checkIncrement: ; d5 has been given check value
00001AB8  3806                    1068      move.w d6, d4 ; dont wanna mess up d6
00001ABA  88C5                    1069      divu d5, d4
00001ABC  383C 0000               1070      move.w #0, d4
00001AC0  4844                    1071      swap d4
00001AC2                          1072      ; d4 low word contains modulo
00001AC2                          1073      ; compare w/ 0
00001AC2  4A44                    1074      tst d4
00001AC4                          1075      ; thingy contains whether they were equal
00001AC4  4E75                    1076      rts
00001AC4  4E75                    1077  -------------------- end include --------------------
00001AC6                          1078  
00001AC6                          1079      end start

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AKEY                41
APPLEH              10
APPLEW              10
APRESSED            1268
BULLETH             5
BULLETW             5
CELLBRX             14D0
CELLBRY             14D4
CELLTLX             14C8
CELLTLY             14CC
CELLXRADIUS         1508
CELLYRADIUS         150C
CENTERX             1338
CENTERY             133C
CHECKINCREMENT      1AB8
CLEARSCREEN         1172
COLLISION           1150
COLOR1              201808
COLOR2              494320
COLOR3              56864B
COLOR4              7AC687
COLOR5              AFE5D0
COLORRED            463EBD
CRLF                1816
CURRENTHEALTH       1344
CURRENTHPX          18B0
CURRENTKEY          1326
CURRENTPTS          1340
DKEY                44
DPRESSED            12A2
DRAW                1556
DRAWBG              169C
DRAWCELL            174E
DRAWENEMY           1700
DRAWHEALTH          1588
DRAWPLAYER          16CC
DRAWRECT            1806
DRAWTEXT            15E2
DRAWWAVEOVER        1646
END                 1306
ENDCOLLIDE          1A9E
ENDCOLLISION        14C6
ENDDRAW             17E4
ENDDRAWWAVEOVER     169A
ENDHEAL             12E0
ENDINITENEMY        1AA0
ENDINPUT            1236
ENDLOOP             1144
ENDMOVEMENT         12C2
ENDMSG              1834
ENDPROCESS          1A9C
ENEMYACTIVE         18C3
ENEMYBOTTOMCOLCHECK  1A7A
ENEMYCOLCHECK       193A
ENEMYCOLLIDE        1A8E
ENEMYDAMAGE         18C8
ENEMYDIR            18C2
ENEMYH              C
ENEMYHALFH          6
ENEMYHALFW          8
ENEMYHIT            1A9A
ENEMYHP             18BE
ENEMYLEFTCOLCHECK   19E6
ENEMYMAXHP          18C4
ENEMYRIGHTCOLCHECK  1A30
ENEMYSETUP          18CC
ENEMYSPAWNTIMER     1AB2
ENEMYTIME           1AAC
ENEMYTOPCOLCHECK    199E
ENEMYW              10
ENEMYX              18B6
ENEMYY              18BA
ENTERKEY            D
ESCAPEKEY           1B
ESCAPEPRESSED       124A
FIRSTINIT           1004
HEAL                12C4
HEALTHBAROFFSET     18B4
HEALTHBRX           18A8
HEALTHBRY           18AC
HEALTHMSG           1846
HEALTHTLX           18A0
HEALTHTLY           18A4
HEALTIME            1AB0
INCREMENT           1AB4
INIT                10AC
INITDRAW            1520
INITENEMY           18DE
INITENEMYBOTTOM     1A44
INITENEMYLEFT       19B2
INITENEMYRIGHT      19FA
INITENEMYTOP        196A
INITIALIZECELL      1352
INPUTKEYS           131F
ISPAUSED            132E
ISWAVEOVER          134C
LASTKEY             132A
LOOP                1112
MAXHEALTH           1348
NOINPUT             11B8
PAUSED              1164
PAUSEMSG            1828
PLAYERH             8
PLAYERTIME          1AAA
PLAYERW             8
PLAYERX             1330
PLAYERY             1334
POINTSGAIN          1
POINTSMSG           183E
PRINT               17F6
PRINTNUM            17FE
PROCESSENEMY        1908
PROCESSENEMYBOTTOM  1A62
PROCESSENEMYLEFT    19CE
PROCESSENEMYRIGHT   1A18
PROCESSENEMYTOP     1986
PROJTIME            1AAE
SCREENH             1350
SCREENW             134E
SETCURSOR           180E
SETFILLCOLOUR       17EE
SETPENCOLOUR        17E6
SKEY                53
SPACEJUSTPRESSED    12F6
SPACEKEY            20
SPACEPRESSED        1238
SPRESSED            1282
START               1000
TAKEDMG             12E2
TCCRS               B
TCDBL               5C
TCFONT              15
TCINP               13
TCPENCLR            50
TCPENFIL            51
TCRECT              57
TCSCREEN            21
TCSCREENSIZE        0
TESTINPUT           1188
TESTMSG             131A
TITLE               1036
TITLE2MSG           1092
TITLELOOP           106C
TITLEMSG            1080
WASTETIME           117E
WAVEOVERMSG1        184E
WAVEOVERMSG2        1873
WKEY                57
WPRESSED            124E
YESINPUT            11CA
ZONE1BRX            14E0
ZONE1BRY            14E4
ZONE1COLLISION      1440
ZONE1TLX            14D8
ZONE1TLY            14DC
ZONE2BRX            14F0
ZONE2BRY            14F4
ZONE2COLLISION      146A
ZONE2TLX            14E8
ZONE2TLY            14EC
ZONE3BRX            1500
ZONE3BRY            1504
ZONE3COLLISION      1494
ZONE3TLX            14F8
ZONE3TLY            14FC
ZONEHEIGHT          1514
ZONEMSG             1518
ZONEWIDTH           1510
