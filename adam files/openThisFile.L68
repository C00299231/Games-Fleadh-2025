00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/02/2025 00:53:29

00000000                             1  ; this file starts the program.
00000000                             2  ; contains the title screen, includes all other files
00000000                             3  
00001000                             4      org $1000
00001000                             5  start:
00001000  6000 0002                  6      bra firstInit
00001004                             7  
00001004                             8  firstInit:
00001004                             9      ; Enable the screen back buffer(see easy 68k help)
00001004  103C 005C                 10      MOVE.B  #tcdbl,D0          ; 92 Enables Double Buffer
00001008  123C 0011                 11      MOVE.B  #17,        D1          ; Combine Tasks
0000100C  4E4F                      12      TRAP    #15                     ; Trap (Perform action)
0000100E                            13      
0000100E  103C 0021                 14      MOVE.B  #tcScreen, D0           ; access screen information
00001012  223C 00000000             15      MOVE.L  #tcScreenSize, D1       ; placing 0 in D1 triggers loading screen size information
00001018  4E4F                      16      TRAP    #15                     ; interpret D0 and D1 for screen size
0000101A  33C1 000013B0             17      MOVE.W  D1,         screenH     ; place screen height in memory location
00001020  4841                      18      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001022  33C1 000013AE             19      MOVE.W  D1,         screenW     ; place screen width in memory location
00001028                            20      
00001028  13FC 0000 00001390        21      move.b #$00, isPaused
00001030                            22      
00001030  4282                      23      clr.l d2
00001032  303C 0015                 24      move #tcFont, d0
00001036  223C 00AFE5D0             25      move.l #color5, d1
0000103C  4E4F                      26      trap #15
0000103E                            27      
0000103E  6000 0002                 28      bra title
00001042                            29  
00001042                            30  title:
00001042  4EB9 000017CA             31      jsr drawBg
00001048                            32      
00001048  323C 1F0D                 33      move.w #$1f0d, d1
0000104C  4EB9 000019AE             34      jsr setCursor
00001052  43F9 00001092             35      lea titlemsg, a1
00001058  4EB9 00001954             36      jsr print
0000105E                            37      
0000105E  323C 1C0F                 38      move.w #$1c0f, d1
00001062  4EB9 000019AE             39      jsr setCursor
00001068  43F9 000010A4             40      lea title2msg, a1
0000106E  4EB9 00001954             41      jsr print
00001074                            42      
00001074                            43      
00001074  6000 0002                 44      bra titleLoop
00001078                            45      
00001078                            46  titleLoop:
00001078                            47       ; Enable back buffer
00001078  103C 005E                 48      MOVE.B  #94,        D0
0000107C  4E4F                      49      TRAP    #15
0000107E                            50      
0000107E                            51      
0000107E                            52      ; put "get input" code into d0
0000107E  223C 0000000D             53      move.l #enterKey, d1
00001084  103C 0013                 54      move.b #tcinp, d0
00001088  4E4F                      55      trap #15
0000108A                            56      
0000108A  4A01                      57      tst.b d1
0000108C  6600 0030                 58      bne init
00001090  60E6                      59      bra titleLoop
00001092                            60  
00001092                            61  
00001092= 2D 20 43 45 4C 4C ...     62  titleMsg dc.b '- CELL DEFENDER -',0
000010A4                            63  
000010A4= 50 72 65 73 73 20 ...     64  title2msg dc.b 'Press "enter" to start...',0
000010BE                            65  
000010BE                            66  ; include other files 
000010BE                            67   include "main.x68"
000010BE                            68  ; this file contains the main game loop
000010BE                            69  
000010BE                            70  init:
000010BE                            71      
000010BE                            72      
000010BE                            73          ; Place the Player at the center of the screen
000010BE  4281                      74      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C0  3239 000013AE             75      MOVE.W  screenW,   D1          ; Place Screen width in D1
000010C6  82FC 0002                 76      DIVU    #02,        D1          ; divide by 2 for center on X Axis
000010CA  23C1 00001392             77      MOVE.L  D1,         playerX    ; Players X Position
000010D0  23C1 0000139A             78      move.l d1, centerx
000010D6                            79  
000010D6  4281                      80      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010D8  3239 000013B0             81      MOVE.W  screenH,   D1          ; Place Screen width in D1
000010DE  82FC 0002                 82      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010E2  23C1 00001396             83      MOVE.L  D1,         playerY    ; Players Y Position
000010E8  23C1 0000139E             84      move.l d1, centerY
000010EE                            85  
000010EE  4EB9 000013B2             86      jsr initializeCell
000010F4                            87      ;move.w #1, enemyDir
000010F4  4EB9 000015FE             88      jsr initDraw
000010FA  4EB9 00001C92             89      jsr initAllEnemies
00001100                            90  
00001100  6000 0002                 91      bra loop
00001104                            92  
00001104                            93  loop:
00001104                            94      ;jsr clearscreen
00001104  4EB9 0000111A             95      jsr map ; if in map, do map stuff
0000110A                            96      ; if in battle, do battle stuff
0000110A                            97  
0000110A  6000 0002                 98      bra endLoop
0000110E                            99  endLoop:
0000110E  4A79 000013A6            100      tst currentHealth
00001114  6600 0252                101      bne end
00001118  60EA                     102      bra loop        ; loop
0000111A                           103  
0000111A                           104  map:
0000111A  4EB9 00001630            105      jsr draw
00001120  4EB9 00001178            106      jsr testinput
00001126                           107      
00001126                           108      ; test paused
00001126  4A39 00001390            109      tst.b isPaused
0000112C  6600 0032                110      bne paused
00001130                           111  
00001130                           112      ; process
00001130  4EB9 00001C56            113      jsr increment
00001136  4EB9 00001CD2            114      jsr processEnemies
0000113C                           115      ;jsr enemyColCheck
0000113C  4EB9 00001146            116      jsr collision
00001142  4E75                     117      rts
00001144                           118  
00001144                           119  battle:
00001144  4E75                     120      rts
00001146                           121  
00001146                           122  collision:
00001146  4EB9 000014E8            123      jsr zone1collision
0000114C  4EB9 00001512            124      jsr zone2collision
00001152  4EB9 0000153C            125      jsr zone3collision
00001158  4EB9 00001566            126      jsr zone4collision
0000115E  4E75                     127      rts
00001160                           128  
00001160                           129  paused:
00001160  60AC                     130      bra endLoop
00001162                           131      
00001162                           132  clearscreen:
00001162                           133      ; Clear the screen
00001162  103C 000B                134      MOVE.B  #tccrs,D0          ; Set Cursor Position
00001166  323C FF00                135      MOVE.W  #$FF00,     D1          ; Clear contents
0000116A  4E4F                     136      TRAP    #15
0000116C  4E75                     137      rts
0000116E                           138  
0000116E                           139  wasteTime:
0000116E                           140      ; value put into d5, keep subtracting 1 until d5 contains 0
0000116E                           141      ; takes a lot of time to process
0000116E  5345                     142      sub #1, d5
00001170  BA7C 0000                143      cmp #0, d5
00001174  66F8                     144      bne wasteTime
00001176  4E75                     145      rts
00001178                           146  
00001178                           147  testinput:
00001178                           148      ; getting previous key
00001178  13F9 00001388 0000138C   149      move.b currentkey, lastkey
00001182                           150  
00001182                           151      ; set d1 to $0000 0000
00001182  7200                     152      move.l #0, d1
00001184                           153  
00001184                           154      ; put "get input" code into d0
00001184  103C 0013                155      move.b #tcinp, d0
00001188  4E4F                     156      trap #15
0000118A  13C1 00001388            157      move.b d1, currentkey
00001190  4E4F                     158      trap #15
00001192                           159      
00001192                           160      ; AT THIS POINT, CURRENT KEY CONTAINS THE CURRENT/LAST KEY PRESSED,
00001192                           161      ; AND D1 CONTAINS WHETHER OR NOT IT IS STILL PRESSED
00001192                           162      
00001192                           163      ; test if no input
00001192  0C01 0000                164      cmpi.b #0, d1
00001196  6700 0010                165      beq noinput     ; if no input, move to noinput
0000119A                           166      
0000119A  4EB9 000011BA            167      jsr yesinput    ; if input, go to yesinput
000011A0  4EB9 00001250            168      jsr endinput    ; then, go to endinput
000011A6                           169      
000011A6  4E75                     170      rts             ; return to loop
000011A8                           171  
000011A8                           172  noinput:
000011A8                           173      ; go back to loop
000011A8  13FC 0000 00001388       174      move.b #0, currentKey
000011B0  13FC 0000 0000138C       175      move.b #0, lastkey
000011B8  4E75                     176      rts
000011BA                           177  
000011BA                           178  yesinput:
000011BA                           179      ; at this point, keycode in currentkey is pressed
000011BA                           180  
000011BA  0C39 001B 00001388       181      cmpi.b #escapeKey, currentkey
000011C2  6700 008E                182      beq escapepressed
000011C6  0C39 0030 00001388       183      cmpi.b #key0, currentKey
000011CE  6700 009C                184      beq key0pressed
000011D2                           185      
000011D2                           186      ; test paused (pause has different inputs)
000011D2  4A39 00001390            187      tst.b isPaused
000011D8  6600 0050                188      bne pausedInput
000011DC                           189  
000011DC                           190      ; TEST - take damage
000011DC  0C39 005A 00001388       191      cmpi.b #zKey, currentKey
000011E4  6700 00B0                192      beq zPressed
000011E8                           193      ;beq takeDmg
000011E8                           194  
000011E8                           195      ; normal movement buttons [check timer first]
000011E8  3A39 00001C4E            196      move.w playerTime, d5
000011EE  4EB9 00001C5A            197      jsr checkIncrement
000011F4  6600 005A                198      bne endInput
000011F8                           199  
000011F8  0C39 0057 00001388       200      cmpi.b #wkey, currentkey ; W:UP
00001200  6700 00C2                201      beq wpressed
00001204  0C39 0041 00001388       202      cmpi.b #akey, currentkey ; A:LEFT
0000120C  6700 00D0                203      beq apressed
00001210  0C39 0053 00001388       204      cmpi.b #skey, currentkey ; S:DOWN
00001218  6700 00DE                205      beq spressed
0000121C  0C39 0044 00001388       206      cmpi.b #dkey, currentkey ; D:RIGHT
00001224  6700 00F2                207      beq dpressed
00001228                           208  
00001228  4E75                     209      RTS
0000122A                           210  
0000122A                           211  pausedInput:
0000122A  0C39 0031 00001388       212      cmpi.b #key1, currentkey
00001232  6700 0074                213      beq key1pressed
00001236                           214  
00001236  0C39 0032 00001388       215      cmpi.b #key2, currentkey
0000123E  6700 0070                216      beq key2pressed
00001242                           217  
00001242  0C39 0033 00001388       218      cmpi.b #key3, currentkey
0000124A  6700 006C                219      beq key3pressed
0000124E                           220  
0000124E  4E75                     221      rts
00001250                           222  
00001250                           223  endInput:
00001250  4E75                     224      rts
00001252                           225  
00001252                           226  ; INPUTS
00001252                           227  escapePressed:
00001252  1A39 0000138C            228      move.b lastkey, d5
00001258  BA39 00001388            229      cmp.b currentKey, d5
0000125E  6600 0004                230      bne escapeJustPressed
00001262  4E75                     231      rts
00001264                           232  ; runs if escape is pressed this frame, but not prev frame
00001264                           233  escapeJustPressed:
00001264  4EB9 00001286            234      jsr togglePause
0000126A  4E75                     235      rts
0000126C                           236  
0000126C                           237  key0pressed:
0000126C  1A39 0000138C            238      move.b lastkey, d5
00001272  BA39 00001388            239      cmp.b currentKey, d5
00001278  6600 0004                240      bne key0justPressed
0000127C  4E75                     241      rts
0000127E                           242  key0justPressed:
0000127E  4EB9 000019B6            243      jsr toggleFullScreen
00001284  4E75                     244      rts
00001286                           245  
00001286                           246  togglePause:
00001286  1A39 00001390            247      move.b isPaused, d5
0000128C  4605                     248      not.b d5
0000128E  13C5 00001390            249      move.b d5, isPaused
00001294  4E75                     250      rts
00001296                           251  
00001296                           252  
00001296                           253  zPressed:
00001296  1A39 0000138C            254      move.b lastkey, d5
0000129C  BA39 00001388            255      cmp.b currentKey, d5
000012A2  6600 0B66                256      bne toggleFollow ; z just pressed
000012A6  4E75                     257      rts
000012A8                           258  
000012A8                           259  key1pressed: ; restart
000012A8  4EB8 1286                260      jsr togglePause
000012AC  6000 FE10                261      bra init
000012B0                           262  key2pressed: ; quit
000012B0  4EB8 1286                263      jsr togglePause
000012B4  6000 00B2                264      bra end
000012B8                           265  key3pressed: ; main menu
000012B8  4EB8 1286                266      jsr togglePause
000012BC  4EB8 1162                267      jsr clearscreen
000012C0  6000 FD3E                268      bra start
000012C4                           269  
000012C4                           270  ; MOVEMENT INPUT: MUST STAY WITHIN CELL BOUNDARIES
000012C4                           271  wpressed:
000012C4  2639 00001396            272      move.l playerY, d3 ; check boundary with proposed movement
000012CA  5383                     273      sub.l #1, D3
000012CC  B6B9 00001596            274      cmp.l celltlY, d3
000012D2  6700 0064                275      beq endMovement
000012D6                           276  
000012D6  53B9 00001396            277      sub.l #1, playerY
000012DC  4E75                     278      rts
000012DE                           279  apressed:
000012DE  2639 00001392            280      move.l playerX, d3 ; check boundary with proposed movement
000012E4  5383                     281      sub.l #1, D3
000012E6  B6B9 00001592            282      cmp.l celltlX, d3
000012EC  6700 004A                283      beq endMovement
000012F0                           284  
000012F0  53B9 00001392            285      sub.l #1, playerX
000012F6  4E75                     286      rts
000012F8                           287  spressed:
000012F8  2639 00001396            288      move.l playerY, d3 ; check boundary with proposed movement
000012FE  5283                     289      add.l #1, D3
00001300  0683 00000008            290      add.l #playerH, d3 ; player size taken into consideration
00001306  B6B9 0000159E            291      cmp.l cellBrY, d3
0000130C  6700 002A                292      beq endMovement
00001310                           293  
00001310  52B9 00001396            294      add.l #1, playerY
00001316  4E75                     295      rts
00001318                           296  dpressed:
00001318  2639 00001392            297      move.l playerX, d3 ; check boundary with proposed movement
0000131E  5283                     298      add.l #1, D3
00001320  0683 00000008            299      add.l #playerW, d3 ; player size taken into consideration
00001326  B6B9 0000159A            300      cmp.l cellBrX, d3
0000132C  6700 000A                301      beq endMovement
00001330                           302  
00001330  52B9 00001392            303      add.l #1, playerX
00001336  4E75                     304      rts
00001338                           305  
00001338                           306  endMovement:
00001338  4E75                     307      rts
0000133A                           308  
0000133A                           309  ; heal up by one hp
0000133A                           310  heal:
0000133A  2439 000013A6            311      move.l currentHealth, d2
00001340  B4B9 000013AA            312      cmp.l maxHealth, d2
00001346  6700 000E                313      beq endHeal
0000134A  5282                     314      add.l #1, d2
0000134C  23C2 000013A6            315      move.l d2, currentHealth
00001352  6000 0002                316      bra endHeal
00001356                           317  endHeal:
00001356  4E75                     318      rts
00001358                           319  
00001358                           320  takeDmg:
00001358  2239 000013A6            321      move.l currentHealth, d1
0000135E  5381                     322      sub.l #1, d1
00001360  23C1 000013A6            323      move.l d1, currentHealth
00001366  4E75                     324      rts
00001368                           325  
00001368                           326  
00001368                           327  
00001368                           328  ; runs if game is cut short w/ ESC key
00001368                           329  end:
00001368  4EB8 1162                330      jsr clearscreen
0000136C                           331      
0000136C  43F9 00001A00            332      lea endmsg, a1
00001372  4EB9 00001954            333      jsr print
00001378  FFFF FFFF                334      simhalt
0000137C                           335  
0000137C= 74 65 73 74 00           336  testMsg dc.b 'test',0
00001381                           337  
00001381                           338  
00001381= 14 57 41 53 44 00        339  inputkeys dc.b 20,87,65,83,68,0
00001387                           340  
00001388                           341  currentkey ds.l 01
0000138C                           342  lastkey ds.l 01
00001390                           343  isPaused ds.b 01
00001391                           344  
00001392                           345  playerX ds.l 01
00001396                           346  playerY ds.l 01
0000139A                           347  
0000139A                           348  centerX ds.l 01
0000139E                           349  centerY ds.l 01
000013A2                           350  
000013A2= 00000000                 351  currentPts dc.l 0
000013A6                           352  
000013A6= 000000C8                 353  currentHealth dc.l 200
000013AA= 000000C8                 354  maxHealth dc.l 200
000013AE                           355  
000013AE                           356  screenW        DS.w    01  ; Reserve Space for Screen Width
000013B0                           357  screenH        DS.w    01  ; Reserve Space for Screen Height
000013B2                           358  
000013B2                           359  
000013B2                           360  -------------------- end include --------------------
000013B2                           361   include "shapeSizes.x68"
000013B2                           362  ; this file contains some const values
000013B2                           363  
000013B2  =00000008                364  playerW equ 08
000013B2  =00000008                365  playerH equ 08
000013B2                           366  
000013B2  =0000000C                367  enemyH equ 12
000013B2  =00000010                368  enemyW equ 16
000013B2  =00000006                369  enemyHalfH equ 6
000013B2  =00000008                370  enemyHalfW equ 8
000013B2                           371  
000013B2  =00000005                372  bulletH equ 05
000013B2  =00000005                373  bulletW equ 05
000013B2                           374  
000013B2  =00000010                375  appleH equ 16
000013B2  =00000010                376  appleW equ 16
000013B2                           377  
000013B2  =00000001                378  pointsGain equ 01
000013B2  =00000001                379  -------------------- end include --------------------
000013B2                           380   include "trapCodes.x68"
000013B2                           381  ; traps
000013B2  =0000000B                382  tccrs  EQU 11       ; Trap code cursor position
000013B2  =0000005C                383  tcdbl  EQU 92       ; Double Buffer Screen Trap Code
000013B2  =00000013                384  tcinp equ 19        ; get input trap code
000013B2  =00000021                385  tcScreen EQU 33    ; Screen size information trap code
000013B2  =00000000                386  tcScreenSize EQU 00    ; Places 0 in D1.L to retrieve Screen width and height in D1.L
000013B2                           387                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
000013B2  =00000015                388  tcFont equ 21       ; change font style/colour
000013B2  =00000050                389  tcPenClr equ 80     ; change pen colour
000013B2  =00000051                390  tcPenFil equ 81     ; change pen fill
000013B2  =00000057                391  tcRect equ 87       ; draw rectangle
000013B2                           392  
000013B2  =00000021                393  tcFullScreen equ 33
000013B2  =00000021                394  -------------------- end include --------------------
000013B2                           395   include "inputKeyCodes.x68"
000013B2                           396  ; this file contains relevant input keycodes
000013B2                           397  
000013B2  =0000001B                398  escapekey equ $1b
000013B2  =00000020                399  spacekey equ $20
000013B2  =0000000D                400  enterKey equ $0d
000013B2                           401  
000013B2  =00000057                402  wkey equ $57
000013B2  =00000041                403  akey equ $41
000013B2  =00000053                404  skey equ $53
000013B2  =00000044                405  dkey equ $44
000013B2                           406  
000013B2  =0000005A                407  zkey equ $5a
000013B2                           408  
000013B2  =00000030                409  key0 equ $30
000013B2  =00000031                410  key1 equ $31
000013B2  =00000032                411  key2 equ $32
000013B2  =00000033                412  key3 equ $33
000013B2  =00000033                413  -------------------- end include --------------------
000013B2                           414   include "colours.x68"
000013B2                           415  ; this file contains relevant color values
000013B2                           416  
000013B2                           417  ; 6ive colours: ranging from dark to light, plus one for contrast
000013B2                           418  ; color1: darkest
000013B2                           419  ; color5: lightest
000013B2                           420  ; colorRed: contrast red colour
000013B2  =00201808                421  color1 equ $00201808
000013B2  =00494320                422  color2 equ $00494320
000013B2  =0056864B                423  color3 equ $0056864b
000013B2  =007AC687                424  color4 equ $007ac687
000013B2  =00AFE5D0                425  color5 equ $00afe5d0
000013B2                           426  
000013B2  =00463EBD                427  colorRed equ $00463ebd
000013B2  =00463EBD                428  -------------------- end include --------------------
000013B2                           429   include "cell.x68"
000013B2                           430  ; this file contains cell data
000013B2                           431  
000013B2                           432  ; cell contains:
000013B2                           433      ; big square boundary
000013B2                           434      ; 2 square attack zones - top corners
000013B2                           435      ; 1 square heal zone - bottom
000013B2                           436  
000013B2                           437  initializeCell: ; initialize values for cell and zones
000013B2                           438  
000013B2                           439      ; this subroutine gathers top-left and bottom-right bounds for the cell,
000013B2                           440      ; as well as each zone
000013B2                           441  
000013B2                           442      ; these bounds are used to draw and process
000013B2                           443  
000013B2                           444      ;--------RECTANGLE TRAP CODE:
000013B2                           445      ; d1: top left X
000013B2                           446      ; d2: top left Y
000013B2                           447  
000013B2                           448      ; d3: bottom right X
000013B2                           449      ; d4: bottom right Y
000013B2                           450      
000013B2                           451  
000013B2                           452      ;--------get cell bounds
000013B2                           453      ; TL
000013B2  2238 139A                454      move.l centerX, d1      ; move centerX to d1
000013B6  92B9 000015E2            455      sub.l cellXradius, d1     ; add/sub based on cell radius
000013BC  23C1 00001592            456      move.l d1, celltlX      ; save to relevant location
000013C2                           457  
000013C2  2238 139E                458      move.l centerY, d1
000013C6  D2B9 000015EA            459      add.l cellYoffset, d1
000013CC  92B9 000015E6            460      sub.l cellYradius, d1
000013D2  23C1 00001596            461      move.l d1, celltlY
000013D8                           462  
000013D8                           463      ; BR
000013D8  2238 139A                464      move.l centerX, d1
000013DC  D2B9 000015E2            465      add.l cellXradius, d1
000013E2  D2B8 0008                466      add.l playerH, d1
000013E6  23C1 0000159A            467      move.l d1, cellbrX
000013EC                           468  
000013EC  2238 139E                469      move.l centerY, d1
000013F0  D2B9 000015EA            470      add.l cellYoffset, d1
000013F6  D2B9 000015E6            471      add.l cellYradius, d1
000013FC  23C1 0000159E            472      move.l d1, cellbrY
00001402                           473  
00001402                           474  
00001402                           475      ;--------get zone 1 bounds
00001402                           476      ; TL
00001402  23F9 00001592 000015A2   477      move.l celltlX, zone1tlX
0000140C                           478  
0000140C  23F9 00001596 000015A6   479      move.l celltlY, zone1tlY
00001416                           480  
00001416                           481      ; BR
00001416  2239 000015A2            482      move.l zone1tlX, d1
0000141C  D2B9 000015EE            483      add.l zoneWidth, d1
00001422  23C1 000015AA            484      move.l d1, zone1brX
00001428                           485  
00001428  2239 000015A6            486      move.l zone1tly, d1
0000142E  D2B9 000015F2            487      add.l zoneHeight, d1
00001434  23C1 000015AE            488      move.l d1, zone1brY
0000143A                           489  
0000143A                           490  
0000143A                           491      ;--------get zone 2 bounds
0000143A                           492      ; TL
0000143A  2239 0000159A            493      move.l cellbrX, d1
00001440  92B9 000015EE            494      sub.l zoneWidth, d1
00001446  23C1 000015B2            495      move.l d1, zone2tlX
0000144C                           496  
0000144C  23F9 00001596 000015B6   497      move.l celltlY, zone2tlY
00001456                           498  
00001456                           499      ; BR
00001456  23F9 0000159A 000015BA   500      move.l cellbrx, zone2brX
00001460                           501  
00001460  2239 00001596            502      move.l celltlY, d1
00001466  D2B9 000015F2            503      add.l zoneHeight, d1
0000146C  23C1 000015BE            504      move.l d1, zone2brY
00001472                           505  
00001472                           506  
00001472                           507      ;--------get zone 3 bounds
00001472                           508      ; TL
00001472  2239 0000159A            509      move.l cellbrX, d1
00001478  92B9 000015EE            510      sub.l zoneWidth, d1
0000147E  23C1 000015C2            511      move.l d1, zone3tlX
00001484                           512  
00001484  2239 0000159E            513      move.l cellbrY, d1
0000148A  92B9 000015F2            514      sub.l zoneHeight, d1
00001490  23C1 000015C6            515      move.l d1, zone3tlY
00001496                           516  
00001496                           517      ; BR
00001496  23F9 0000159A 000015CA   518      move.l cellbrX, zone3brX
000014A0                           519  
000014A0  23F9 0000159E 000015CE   520      move.l cellbrY, zone3brY
000014AA                           521  
000014AA                           522      ;--------get zone 4 bounds
000014AA                           523      ; TL
000014AA  2239 00001592            524      move.l celltlX, d1
000014B0  23C1 000015D2            525      move.l d1, zone4tlX
000014B6                           526  
000014B6  2239 0000159E            527      move.l cellbrY, d1
000014BC  92B9 000015F2            528      sub.l zoneHeight, d1
000014C2  23C1 000015D6            529      move.l d1, zone4tlY
000014C8                           530  
000014C8                           531      ; BR
000014C8  2239 00001592            532      move.l celltlX, d1
000014CE  D2B9 000015EE            533      add.l zoneWidth, d1
000014D4  23C1 000015DA            534      move.l d1, zone4brX
000014DA                           535  
000014DA  2239 0000159E            536      move.l cellbrY, d1
000014E0  23C1 000015DE            537      move.l d1, zone4brY
000014E6                           538  
000014E6  4E75                     539      rts
000014E8                           540  
000014E8                           541  zone1collision:
000014E8  2438 1392                542      move.l playerX, d2
000014EC  2638 1396                543      move.l playerY, d3
000014F0                           544  
000014F0                           545      ; check x
000014F0  B4B9 000015AA            546      cmp.l zone1brX, d2
000014F6  6E00 0098                547      bgt endCollision
000014FA                           548      ; check y
000014FA  B6B9 000015AE            549      cmp.l zone1brY, d3
00001500  6E00 008E                550      bgt endCollision
00001504                           551  
00001504                           552  
00001504                           553      ; at this point, player is confirmed in zone 1
00001504  43F9 000015F6            554      lea zoneMsg, a1
0000150A  4EB9 00001954            555      jsr print
00001510                           556  
00001510  4E75                     557      rts
00001512                           558  
00001512                           559  zone2collision:
00001512  2438 1392                560      move.l playerX, d2
00001516  2638 1396                561      move.l playerY, d3
0000151A                           562  
0000151A                           563      ; check x
0000151A  B4B9 000015B2            564      cmp.l zone2tlX, d2
00001520  6D00 006E                565      blt endCollision
00001524                           566      ; check y
00001524  B6B9 000015AE            567      cmp.l zone1brY, d3
0000152A  6E00 0064                568      bgt endCollision
0000152E                           569  
0000152E  43F9 000015F6            570      lea zoneMsg, a1
00001534  4EB9 00001954            571      jsr print
0000153A                           572  
0000153A                           573      ; at this point, player is confirmed in zone 2
0000153A                           574  
0000153A  4E75                     575      rts
0000153C                           576  
0000153C                           577  zone3collision:
0000153C  2438 1392                578      move.l playerX, d2
00001540  2638 1396                579      move.l playerY, d3
00001544                           580  
00001544                           581      ; check x
00001544  B4B9 000015C2            582      cmp.l zone3tlX, d2
0000154A  6D00 0044                583      blt endCollision
0000154E                           584      ; check y
0000154E  B6B9 000015C6            585      cmp.l zone3tlY, d3
00001554  6D00 003A                586      blt endCollision
00001558                           587  
00001558                           588      ; at this point, player is confirmed in zone 3
00001558                           589  
00001558  43F9 000015F6            590      lea zoneMsg, a1
0000155E  4EB9 00001954            591      jsr print
00001564                           592      
00001564  4E75                     593      rts
00001566                           594  
00001566                           595  zone4collision:
00001566  2438 1392                596      move.l playerX, d2
0000156A  2638 1396                597      move.l playerY, d3
0000156E                           598  
0000156E                           599      ; check x
0000156E  B4B9 000015DA            600      cmp.l zone4brX, d2
00001574  6E00 001A                601      bgt endCollision
00001578                           602      ; check y
00001578  B6B9 000015D6            603      cmp.l zone4tlY, d3
0000157E  6D00 0010                604      blt endCollision
00001582                           605  
00001582                           606      ; at this point, player is confirmed in zone 4
00001582                           607  
00001582  43F9 000015F6            608      lea zoneMsg, a1
00001588  4EB9 00001954            609      jsr print
0000158E  4E75                     610      rts
00001590                           611  
00001590                           612  endCollision:
00001590  4E75                     613      rts
00001592                           614  
00001592                           615  ;---------------cell top-left bounds
00001592                           616  celltlX ds.l 01
00001596                           617  celltlY ds.l 01
0000159A                           618  ; cell bottom-right bounds
0000159A                           619  cellbrX ds.l 01
0000159E                           620  cellbrY ds.l 01
000015A2                           621  
000015A2                           622  ;---------------zone 1 top-left bounds
000015A2                           623  zone1tlX ds.l 01
000015A6                           624  zone1tlY ds.l 01
000015AA                           625  ; zone 1 bottom-right bounds
000015AA                           626  zone1brX ds.l 01
000015AE                           627  zone1brY ds.l 01
000015B2                           628  
000015B2                           629  ;---------------zone 2 top-left bounds
000015B2                           630  zone2tlX ds.l 01
000015B6                           631  zone2tlY ds.l 01
000015BA                           632  ; zone 2 bottom-right bounds
000015BA                           633  zone2brX ds.l 01
000015BE                           634  zone2brY ds.l 01
000015C2                           635  
000015C2                           636  ;---------------zone 3 top-left bounds
000015C2                           637  zone3tlX ds.l 01
000015C6                           638  zone3tlY ds.l 01
000015CA                           639  ; zone 3 bottom-right bounds
000015CA                           640  zone3brX ds.l 01
000015CE                           641  zone3brY ds.l 01
000015D2                           642  
000015D2                           643  ;---------------zone 4 top-left bounds
000015D2                           644  zone4tlX ds.l 01
000015D6                           645  zone4tlY ds.l 01
000015DA                           646  ; zone 4 bottom-right bounds
000015DA                           647  zone4brX ds.l 01
000015DE                           648  zone4brY ds.l 01
000015E2                           649  
000015E2                           650  ; horizontal and vertical radius of main cell (half width)
000015E2= 00000064                 651  cellXradius dc.l 100
000015E6= 00000050                 652  cellYradius dc.l 80
000015EA                           653  
000015EA                           654  ; how lower from center it is
000015EA= 0000003C                 655  cellYoffset dc.l 60
000015EE                           656  
000015EE                           657  ; width of zone
000015EE= 00000037                 658  zoneWidth dc.l 55
000015F2= 0000002D                 659  zoneHeight dc.l 45
000015F6                           660  
000015F6= 49 4E 20 5A 4F 4E ...    661  zoneMsg dc.b 'IN ZONE',0
000015FE                           662  
000015FE                           663  
000015FE                           664  -------------------- end include --------------------
000015FE                           665   include "draw.x68"
000015FE                           666  ; this file contains all draw functions
000015FE                           667  
000015FE                           668  initDraw:
000015FE                           669      ; get health rectangle bounds
000015FE                           670  
000015FE                           671      ;HEIGHT
000015FE  3239 00001A30            672      move.w healthBarLocY, d1
00001604  23C1 00001A1E            673      move.l d1, healthTlY
0000160A  0681 0000000F            674      add.l #15, d1
00001610  23C1 00001A26            675      move.l d1, healthBrY
00001616                           676  
00001616                           677      ;WIDTH
00001616  4281                     678      clr.l d1
00001618  3239 00001A2E            679      move.w healthBarOffsetX, d1
0000161E                           680      ;move.l maxHealth, d2
0000161E                           681      ;divu #2, d2
0000161E                           682      ;add.l maxHealth, d1
0000161E  23C1 00001A1A            683      move.l d1, healthTlX
00001624                           684  
00001624  D2B8 13AA                685      add.l maxhealth, d1
00001628  23C1 00001A22            686      move.l d1, healthBrX
0000162E                           687      
0000162E  4E75                     688      rts
00001630                           689  
00001630                           690  
00001630                           691  draw:
00001630                           692       ; Enable back buffer
00001630  103C 005E                693      MOVE.B  #94,        D0
00001634  4E4F                     694      TRAP    #15
00001636                           695  
00001636  4EB9 00001DE6            696      jsr followCam
0000163C  4EB9 000017CA            697      jsr drawBg
00001642  4EB9 0000182E            698      jsr drawEnemies
00001648  4EB9 000018A2            699      jsr drawCell
0000164E  4EB9 000017FA            700      jsr drawPlayer
00001654  4EB9 0000172A            701      jsr drawText
0000165A  4EB9 000016D0            702      jsr drawHealth
00001660  4EB9 00001668            703      jsr drawPause
00001666  4E75                     704      rts
00001668                           705  
00001668                           706  drawPause:
00001668  4A38 1390                707      tst.b isPaused
0000166C  6700 0060                708      beq endDrawPause
00001670                           709  
00001670  223C 00AFE5D0            710      move.l #color5, d1
00001676  4EB9 00001944            711      jsr setPenColour
0000167C  223C 00201808            712      move.l #color1, d1
00001682  4EB9 0000194C            713      jsr setFillColour
00001688                           714  
00001688                           715      ; get rect bounds
00001688                           716  
00001688  2238 139A                717      move.l centerX, d1
0000168C  2438 139E                718      move.l centerY, d2
00001690  92B9 00001A34            719      sub.l pauseHalfWidth, d1
00001696  94B9 00001A38            720      sub.l pauseHalfHeight, d2
0000169C                           721  
0000169C  2638 139A                722      move.l centerX, d3
000016A0  2838 139E                723      move.l centerY, d4
000016A4  D6B9 00001A34            724      add.l pauseHalfWidth, d3
000016AA  D8B9 00001A38            725      add.l pauseHalfHeight, d4
000016B0                           726  
000016B0  4EB9 000019A6            727      jsr drawUiRect
000016B6                           728  
000016B6                           729      ; draw text
000016B6  323C 2208                730      move.w #$2208, d1
000016BA  4EB9 000019AE            731      jsr setCursor
000016C0  43F9 00001A3C            732      lea pauseMsg, a1
000016C6  4EB9 00001954            733      jsr print
000016CC                           734  
000016CC  4E75                     735      rts
000016CE                           736  endDrawPause:
000016CE  4E75                     737      rts
000016D0                           738  
000016D0                           739  drawHealth:
000016D0  223C 007AC687            740      move.l #color4, d1
000016D6  4EB9 00001944            741      jsr setPenColour
000016DC  223C 00494320            742      move.l #color2, d1
000016E2  4EB9 0000194C            743      jsr setFillColour
000016E8                           744  
000016E8  2239 00001A1A            745      move.l healthTlX, d1
000016EE  2439 00001A1E            746      move.l healthTlY, d2
000016F4                           747  
000016F4  2639 00001A22            748      move.l healthBrX, d3
000016FA  2839 00001A26            749      move.l healthBrY, d4
00001700  4EB9 000019A6            750      jsr drawUiRect
00001706                           751  
00001706                           752      ; DRAW FULL PART OF HP BAR
00001706  2639 00001A1A            753      move.l healthtlX, d3
0000170C  D6B8 13A6                754      add.l currentHealth, d3
00001710                           755  
00001710  223C 0056864B            756      move.l #color3, d1 ; change colour
00001716  4EB9 0000194C            757      jsr setFillColour
0000171C                           758  
0000171C  2239 00001A1A            759      move.l healthTlX, d1 ; set value in d1 back to what its supposed to be
00001722  4EB9 000019A6            760      jsr drawUiRect
00001728  4E75                     761      rts
0000172A                           762  
0000172A                           763  drawText:
0000172A                           764      ; set colours
0000172A  223C 00AFE5D0            765      move.l #color5, d1
00001730  4EB9 00001944            766      jsr setPenColour
00001736  223C 00201808            767      move.l #color1, d1
0000173C  4EB9 0000194C            768      jsr setFillColour
00001742                           769      ; PLAYER SCORE MSG
00001742  323C 0200                770      move.w #$200, d1
00001746  D239 00001A33            771      add.b pointsRow, d1
0000174C  4EB9 000019AE            772      jsr setCursor
00001752  43F9 00001A0A            773      lea pointsMsg, a1
00001758  4EB9 00001954            774      jsr print
0000175E                           775      ; PLAYER SCORE
0000175E  223C 00000A00            776      move.l #$a00, d1
00001764  D239 00001A33            777      add.b pointsRow, d1
0000176A  4EB9 000019AE            778      jsr setCursor
00001770  2238 13A2                779      move.l currentPts, d1
00001774  4EB9 0000195C            780      jsr printNum
0000177A                           781  
0000177A                           782      ; HEALTH
0000177A  323C 0200                783      move.w #$200, d1
0000177E  D239 00001A32            784      add.b healthRow, d1
00001784  4EB9 000019AE            785      jsr setCursor
0000178A  43F9 00001A12            786      lea healthMsg, a1
00001790  4EB9 00001954            787      jsr print
00001796                           788  
00001796                           789      ; ANTHILL
00001796  323C 1005                790      move.w #$1005, d1
0000179A  4EB9 000019AE            791      jsr setCursor
000017A0  43F9 00001A49            792      lea attackMsg1, a1
000017A6  4EB9 00001954            793      jsr print
000017AC  5241                     794      add.w #1, d1
000017AE  4EB9 000019AE            795      jsr setCursor
000017B4  43F9 00001A65            796      lea attackMsg2, a1
000017BA  4EB9 00001954            797      jsr print
000017C0                           798  
000017C0                           799  
000017C0                           800      ; reset cursor
000017C0  7200                     801      move.l #0, d1
000017C2  4EB9 000019AE            802      jsr setCursor
000017C8  4E75                     803      rts
000017CA                           804  
000017CA                           805  drawBg:
000017CA                           806      ; set colours
000017CA  223C 00494320            807      move.l #color2, d1
000017D0  4EB9 00001944            808      jsr setPenColour
000017D6  223C 00201808            809      move.l #color1, d1
000017DC  4EB9 0000194C            810      jsr setFillColour
000017E2                           811  
000017E2                           812      ; clear d3 and d4 (screen W and H are words)
000017E2  4283                     813      clr.l d3
000017E4  4284                     814      clr.l d4
000017E6                           815  
000017E6                           816      ; put the stuff in the registers, draw rect
000017E6  7200                     817      move.l #0, d1
000017E8  7400                     818      move.l #0, d2
000017EA  3638 13AE                819      move.w screenW, d3
000017EE  3838 13B0                820      move.w screenH, d4
000017F2  4EB9 000019A6            821      jsr drawUiRect
000017F8  4E75                     822      rts
000017FA                           823  
000017FA                           824  drawPlayer:
000017FA                           825      ; Set white
000017FA  223C 00AFE5D0            826      MOVE.L #color5, d1
00001800  4EB9 00001944            827      jsr setPenColour
00001806  223C 00201808            828      move.l #color1, d1
0000180C  4EB9 0000194C            829      jsr setFillColour
00001812                           830      
00001812                           831      ; Set X, Y, Width and Height
00001812  2238 1392                832      MOVE.L  playerX,   D1          ; X
00001816  2438 1396                833      MOVE.L  playerY,   D2          ; Y
0000181A  2638 1392                834      MOVE.L  playerX,   D3
0000181E  5083                     835      ADD.L   #playerW,   D3      ; Width
00001820  2838 1396                836      MOVE.L  playerY,   D4 
00001824  5084                     837      ADD.L   #playerH,   D4      ; Height
00001826                           838      
00001826                           839      ; Draw Player
00001826  4EB9 00001964            840      jsr drawRect
0000182C  4E75                     841      RTS
0000182E                           842  
0000182E                           843  drawEnemies:
0000182E  4EB9 00001D2E            844      jsr getEnemy1
00001834  4EB9 0000185E            845      jsr drawEnemy
0000183A  4EB9 00001D3C            846      jsr getEnemy2
00001840  4EB9 0000185E            847      jsr drawEnemy
00001846  4EB9 00001D4A            848      jsr getEnemy3
0000184C  4EB9 0000185E            849      jsr drawEnemy
00001852  4EB9 00001D58            850      jsr getEnemy4
00001858  4EB9 0000185E            851      jsr drawEnemy
0000185E                           852  
0000185E                           853  drawEnemy:
0000185E                           854      ; set colour
0000185E  223C 00AFE5D0            855      move.l #color5, d1
00001864  4EB9 00001944            856      jsr setPenColour
0000186A  223C 00463EBD            857      move.l #colorRed, d1
00001870  4EB9 0000194C            858      jsr setFillColour
00001876                           859  
00001876                           860      ; set rect values
00001876  2239 00001A94            861      move.l enemyX, d1
0000187C  2439 00001A98            862      move.l enemyY, d2
00001882  2639 00001A94            863      move.l enemyX, d3
00001888  2839 00001A98            864      move.l enemyY, d4
0000188E  0683 00000010            865      add.l #enemyW, d3
00001894  0684 0000000C            866      add.l #enemyH, d4
0000189A                           867  
0000189A  4EB9 00001964            868      jsr drawRect
000018A0  4E75                     869      rts
000018A2                           870  
000018A2                           871  drawCell:
000018A2                           872      ;---------------draw main cell
000018A2                           873      ; change colours
000018A2  223C 007AC687            874      move.l #color4, d1
000018A8  4EB9 00001944            875      jsr setPenColour
000018AE  223C 00494320            876      move.l #color2, d1
000018B4  4EB9 0000194C            877      jsr setFillColour
000018BA                           878  
000018BA  2238 1592                879      move.l celltlX, d1
000018BE  2438 1596                880      move.l celltlY, d2
000018C2  2638 159A                881      move.l cellbrX, d3
000018C6  2838 159E                882      move.l cellbrY, d4
000018CA  4EB9 00001964            883      jsr drawRect
000018D0                           884  
000018D0                           885      ; change colours
000018D0  223C 007AC687            886      move.l #color4, d1
000018D6  4EB9 00001944            887      jsr setPenColour
000018DC  223C 0056864B            888      move.l #color3, d1
000018E2  4EB9 0000194C            889      jsr setFillColour
000018E8                           890      ;---------------draw zone 1
000018E8  2238 15A2                891      move.l zone1tlX, d1
000018EC  2438 15A6                892      move.l zone1tlY, d2
000018F0  2638 15AA                893      move.l zone1brX, d3
000018F4  2838 15AE                894      move.l zone1brY, d4
000018F8  4EB9 00001964            895      jsr drawRect
000018FE                           896  
000018FE                           897      ;---------------draw zone 2
000018FE  2238 15B2                898      move.l zone2tlX, d1
00001902  2438 15B6                899      move.l zone2tlY, d2
00001906  2638 15BA                900      move.l zone2brX, d3
0000190A  2838 15BE                901      move.l zone2brY, d4
0000190E  4EB9 00001964            902      jsr drawRect
00001914                           903      
00001914                           904      ;---------------draw zone 3
00001914  2238 15C2                905      move.l zone3tlX, d1
00001918  2438 15C6                906      move.l zone3tlY, d2
0000191C  2638 15CA                907      move.l zone3brX, d3
00001920  2838 15CE                908      move.l zone3brY, d4
00001924  4EB9 00001964            909      jsr drawRect
0000192A                           910  
0000192A                           911      ;---------------draw zone 4
0000192A  2238 15D2                912      move.l zone4tlX, d1
0000192E  2438 15D6                913      move.l zone4tlY, d2
00001932  2638 15DA                914      move.l zone4brX, d3
00001936  2838 15DE                915      move.l zone4brY, d4
0000193A  4EB9 00001964            916      jsr drawRect
00001940                           917  
00001940                           918      ; done
00001940  4E75                     919      rts
00001942                           920  
00001942                           921  endDraw:
00001942  4E75                     922      rts
00001944                           923  
00001944                           924  setPenColour:
00001944  103C 0050                925      move.b #tcPenClr, d0
00001948  4E4F                     926      trap #15
0000194A  4E75                     927      rts
0000194C                           928  
0000194C                           929  setFillColour:
0000194C  103C 0051                930      move.b #tcPenFil, d0
00001950  4E4F                     931      trap #15
00001952  4E75                     932      rts
00001954                           933  
00001954                           934  print:
00001954  303C 000D                935      move #13, d0
00001958  4E4F                     936      trap #15
0000195A  4E75                     937      rts
0000195C                           938  
0000195C                           939  printNum:
0000195C  303C 0003                940      move #3, d0
00001960  4E4F                     941      trap #15
00001962  4E75                     942      rts
00001964                           943  
00001964                           944  drawRect:
00001964                           945      ; if not follow, draw like normal
00001964  4A79 00001DE4            946      tst.w isFollow
0000196A  6700 003A                947      beq drawUiRect
0000196E                           948  
0000196E                           949      ; offset by camera
0000196E  92B9 00001DDA            950      sub.l cameraX, d1
00001974  94B9 00001DDE            951      sub.l cameraY, d2
0000197A  96B9 00001DDA            952      sub.l cameraX, d3
00001980  98B9 00001DDE            953      sub.l cameraY, d4
00001986                           954      ; zoom by camera
00001986  C2F9 00001DE2            955      mulu cameraZoom, d1
0000198C  C4F9 00001DE2            956      mulu cameraZoom, d2
00001992  C6F9 00001DE2            957      mulu cameraZoom, d3
00001998  C8F9 00001DE2            958      mulu cameraZoom, d4
0000199E                           959  
0000199E                           960      ; draw rect function
0000199E  103C 0057                961      MOVE.B  #tcRect, d0
000019A2  4E4F                     962      TRAP    #15
000019A4  4E75                     963      rts
000019A6                           964  
000019A6                           965  drawUiRect:
000019A6  103C 0057                966      MOVE.B  #tcRect, d0
000019AA  4E4F                     967      TRAP    #15
000019AC  4E75                     968      rts
000019AE                           969  
000019AE                           970  setCursor:
000019AE  103C 000B                971      MOVE.B  #tcCrs, d0
000019B2  4E4F                     972      TRAP    #15
000019B4  4E75                     973      rts
000019B6                           974  
000019B6                           975  toggleFullScreen:
000019B6  4281                     976      clr.l d1
000019B8  3239 000019FE            977      move.w isFullScreen, d1
000019BE  0C01 0001                978      cmpi.b #1, d1
000019C2  6700 000E                979      beq goFullScreen
000019C6                           980  
000019C6                           981      ; go windowed
000019C6  7201                     982      move.l #1, d1
000019C8  4EB9 000019E4            983      jsr setFullScreen
000019CE                           984  
000019CE  6000 000E                985      bra endToggleFullScreen
000019D2                           986  goFullScreen:
000019D2  5201                     987      add.b #1, d1
000019D4  4EB9 000019E4            988      jsr setFullScreen
000019DA  6000 0002                989      bra endToggleFullScreen
000019DE                           990  endToggleFullScreen:
000019DE  33C1 000019FE            991      move.w d1, isFullScreen
000019E4                           992  
000019E4                           993  setFullScreen:
000019E4  303C 0021                994      move #tcFullScreen, d0
000019E8  4E4F                     995      trap #15
000019EA  4E75                     996      rts
000019EC                           997  
000019EC                           998  ; INSTANT NEW LINE
000019EC                           999  crlf:
000019EC  303C 0006               1000      move #6, d0
000019F0  323C 000D               1001      move #13, d1
000019F4  4E4F                    1002      trap #15
000019F6  323C 000A               1003      move #10, d1
000019FA  4E4F                    1004      trap #15
000019FC  4E75                    1005      rts
000019FE                          1006  
000019FE= 0001                    1007  isFullScreen dc.w 1
00001A00                          1008  
00001A00= 47 41 4D 45 20 4F ...   1009  endMsg dc.b 'GAME OVER', 0
00001A0A= 50 4F 49 4E 54 53 ...   1010  pointsMsg dc.b 'POINTS:', 0
00001A12= 48 45 41 4C 54 48 ...   1011  healthMsg dc.b 'HEALTH:', 0
00001A1A                          1012  
00001A1A                          1013  healthTlX ds.l 01
00001A1E                          1014  healthTlY ds.l 01
00001A22                          1015  healthBrX ds.l 01
00001A26                          1016  healthBrY ds.l 01
00001A2A                          1017  
00001A2A                          1018  currentHpX ds.l 01
00001A2E                          1019  
00001A2E                          1020  ; health stuff
00001A2E= 0050                    1021  healthBarOffsetX dc.w 80
00001A30= 0010                    1022  healthBarLocY dc.w 16
00001A32                          1023  
00001A32= 01                      1024  healthRow dc.b 01
00001A33= 03                      1025  pointsRow dc.b 03
00001A34                          1026  
00001A34                          1027  ; pause stuff
00001A34= 0000006E                1028  pauseHalfWidth dc.l 110
00001A38= 00000082                1029  pauseHalfHeight dc.l 130
00001A3C= 47 41 4D 45 20 50 ...   1030  pauseMsg dc.b 'GAME PAUSED!', 0
00001A49                          1031  
00001A49                          1032  ; move to level stuff
00001A49= 41 4E 20 41 4E 54 ...   1033  attackMsg1 dc.b 'AN ANTHILL IS UNDER ATTACK!',0
00001A65= 4D 4F 56 45 20 54 ...   1034  attackMsg2 dc.b 'MOVE TOWARD IT AND PRESS "ENTER" TO DEFEND IT!',0
00001A94                          1035  
00001A94                          1036  -------------------- end include --------------------
00001A94                          1037   include "enemies.x68"
00001A94                          1038  ; this file contains enemy data
00001A94                          1039  
00001A94                          1040  ; variable data for current enemy
00001A94                          1041  enemyX ds.l 01
00001A98                          1042  enemyY ds.l 01
00001A9C                          1043  
00001A9C                          1044  ; enemy initialization: set position, health
00001A9C                          1045  ; 3 longs require 3 mem locations
00001A9C                          1046  ; call srts, then take values outside them
00001A9C                          1047  
00001A9C                          1048  ; GENERAL INIT/PROCESS
00001A9C                          1049  ; before these srts are called, enemyDir is given a value
00001A9C                          1050  ; 0: tl
00001A9C                          1051  ; 1: tr
00001A9C                          1052  ; 2: br
00001A9C                          1053  ; 3: bl
00001A9C                          1054  
00001A9C                          1055  initEnemy:
00001A9C                          1056      ; init based on which direction
00001A9C  4A79 00001DD0           1057      tst enemyDir
00001AA2  6700 0094               1058      beq initEnemytl
00001AA6                          1059  
00001AA6  0C79 0001 00001DD0      1060      cmpi #1, enemyDir
00001AAE  6700 00C0               1061      beq initEnemytr
00001AB2                          1062  
00001AB2  0C79 0002 00001DD0      1063      cmpi #2, enemyDir
00001ABA  6700 00EA               1064      beq initEnemybr
00001ABE                          1065  
00001ABE  0C79 0003 00001DD0      1066      cmpi #3, enemyDir
00001AC6  6700 0116               1067      beq initEnemyBl
00001ACA                          1068  
00001ACA                          1069      ; no valid direction placed. just put enemy at the top
00001ACA  6000 006C               1070      bra initEnemyTl
00001ACE                          1071  
00001ACE                          1072  processEnemy:
00001ACE                          1073  
00001ACE                          1074      ; process based on direction
00001ACE  4A79 00001DD0           1075      tst enemyDir
00001AD4  6700 007A               1076      beq processEnemyTl
00001AD8  0C79 0001 00001DD0      1077      cmpi #1, enemyDir
00001AE0  6700 00A4               1078      beq processEnemytr
00001AE4  0C79 0002 00001DD0      1079      cmpi #2, enemyDir
00001AEC  6700 00D0               1080      beq processEnemybr
00001AF0  0C79 0003 00001DD0      1081      cmpi #3, enemyDir
00001AF8  6700 00FE               1082      beq processEnemyBl
00001AFC                          1083  
00001AFC                          1084      ; no valid direction placed. just put enemy at the top
00001AFC  6000 0052               1085      bra processEnemyTl
00001B00                          1086  
00001B00                          1087  enemyColCheck:
00001B00  3439 00001DD0           1088      move.w enemyDir, d2
00001B06                          1089      ; colCheck based on direction
00001B06  0C79 0000 00001DD0      1090      cmpi #0, enemyDir
00001B0E  6700 0108               1091      beq enemyLeftColCheck
00001B12                          1092  
00001B12  0C79 0001 00001DD0      1093      cmpi #1, enemyDir
00001B1A  6700 00FC               1094      beq enemyLeftColCheck
00001B1E                          1095  
00001B1E  0C79 0002 00001DD0      1096      cmpi #2, enemyDir
00001B26  6700 00FE               1097      beq enemyRightColCheck
00001B2A                          1098  
00001B2A  0C79 0003 00001DD0      1099      cmpi #3, enemyDir
00001B32  6700 00F2               1100      beq enemyRightColCheck
00001B36                          1101  
00001B36                          1102      ; no valid direction. nothing we can do atp
00001B36  4E75                    1103      rts
00001B38                          1104  
00001B38                          1105  ;-------------------------------ENEMY TOP
00001B38                          1106  initEnemytl:
00001B38  21FC 00000000 1A98      1107      move.l #0, enemyY
00001B40  21FC 00000000 1A94      1108      move.l #0, enemyX
00001B48  4EB9 00001C44           1109      jsr endInitEnemy
00001B4E  4E75                    1110      rts
00001B50                          1111  processEnemyTl:
00001B50  3A39 00001C50           1112      move.w enemyTime, d5
00001B56  4EB9 00001C5A           1113      jsr checkIncrement
00001B5C  6600 00E2               1114      bne endProcess
00001B60                          1115  
00001B60  52B8 1A98               1116      add.l #1, enemyY
00001B64  52B8 1A94               1117      add.l #1, enemyX
00001B68                          1118  
00001B68  4EB8 1B00               1119      jsr enemyColCheck
00001B6C                          1120  
00001B6C  6000 00D2               1121      bra endProcess
00001B70                          1122  
00001B70                          1123  ;-------------------------------ENEMY LEFT
00001B70                          1124  initEnemytr:
00001B70  21F8 13AE 1A94          1125      move.l screenW, enemyX
00001B76  21FC 00000000 1A98      1126      move.l #0, enemyY
00001B7E  4EB9 00001C44           1127      jsr endInitEnemy
00001B84  4E75                    1128      rts
00001B86                          1129  processEnemytr:
00001B86  3A39 00001C50           1130      move.w enemyTime, d5
00001B8C  4EB9 00001C5A           1131      jsr checkIncrement
00001B92  6600 00AC               1132      bne endProcess
00001B96                          1133  
00001B96  52B8 1A98               1134      add.l #1, enemyY
00001B9A  53B8 1A94               1135      sub.l #1, enemyX
00001B9E                          1136  
00001B9E  4EB8 1B00               1137      jsr enemyColCheck
00001BA2                          1138  
00001BA2  6000 009C               1139      bra endProcess
00001BA6                          1140  
00001BA6                          1141  
00001BA6                          1142  
00001BA6                          1143  ;-------------------------------ENEMY RIGHT
00001BA6                          1144  initEnemybr:
00001BA6  4282                    1145      clr.l d2
00001BA8  3438 13AE               1146      move.w screenW, d2
00001BAC  21C2 1A94               1147      move.l d2, enemyX
00001BB0                          1148  
00001BB0  21F8 13B0 1A98          1149      move.l screenH, enemyY
00001BB6                          1150  
00001BB6  4EB9 00001C44           1151      jsr endInitEnemy
00001BBC  4E75                    1152      rts
00001BBE                          1153  processEnemybr:
00001BBE  3A39 00001C50           1154      move.w enemyTime, d5
00001BC4  4EB9 00001C5A           1155      jsr checkIncrement
00001BCA  6600 0074               1156      bne endProcess
00001BCE                          1157  
00001BCE  53B8 1A98               1158      sub.l #1, enemyY
00001BD2  53B8 1A94               1159      sub.l #1, enemyX
00001BD6                          1160  
00001BD6  4EB8 1B00               1161      jsr enemyColCheck
00001BDA                          1162  
00001BDA  6000 0064               1163      bra endProcess
00001BDE                          1164  
00001BDE                          1165  ;-------------------------------ENEMY BOTTOM
00001BDE                          1166  initEnemyBl:
00001BDE  4282                    1167      clr.l d2
00001BE0  3438 13B0               1168      move.w screenH, d2
00001BE4  21C2 1A98               1169      move.l d2, enemyY
00001BE8                          1170  
00001BE8  21FC 00000000 1A94      1171      move.l #0, enemyX
00001BF0                          1172  
00001BF0  4EB9 00001C44           1173      jsr endInitEnemy
00001BF6  4E75                    1174      rts
00001BF8                          1175  processEnemyBl:
00001BF8  3A39 00001C50           1176      move.w enemyTime, d5
00001BFE  4EB9 00001C5A           1177      jsr checkIncrement
00001C04  6600 003A               1178      bne endProcess
00001C08                          1179  
00001C08  53B8 1A98               1180      sub.l #1, enemyY
00001C0C  52B8 1A94               1181      add.l #1, enemyX
00001C10                          1182  
00001C10  4EB8 1B00               1183      jsr enemyColCheck
00001C14                          1184  
00001C14  6000 002A               1185      bra endProcess
00001C18                          1186  
00001C18                          1187  ;----------COLLISION
00001C18                          1188  enemyLeftColCheck:
00001C18  2438 1592               1189      move.l celltlX, d2
00001C1C                          1190      ;sub.l #enemyW, d2
00001C1C  B4B8 1A94               1191      cmp.l enemyX, d2
00001C20  6700 0018               1192      beq enemyCollide
00001C24  4E75                    1193      rts
00001C26                          1194  
00001C26                          1195  enemyRightColCheck:
00001C26  2438 159A               1196      move.l cellbrx, d2
00001C2A  0482 00000010           1197      sub.l #enemyw, d2
00001C30  B4B8 1A94               1198      cmp.l enemyX, d2
00001C34  6700 0004               1199      beq enemyCollide
00001C38  4E75                    1200      rts
00001C3A                          1201  
00001C3A                          1202  ;---------------OTHER STUFF
00001C3A                          1203  enemyCollide: ; enemy successfully reached the base
00001C3A  4EB8 1A9C               1204      jsr initEnemy
00001C3E  4E75                    1205      rts
00001C40                          1206  
00001C40                          1207  endProcess:
00001C40  4E75                    1208      rts
00001C42                          1209  endCollide:
00001C42  4E75                    1210      rts
00001C44                          1211  endInitEnemy:
00001C44  5DB8 1A98               1212      sub.l #enemyHalfH, enemyY
00001C48  51B8 1A94               1213      sub.l #enemyHalfW, enemyX
00001C4C  4E75                    1214      rts
00001C4E                          1215  
00001C4E                          1216  -------------------- end include --------------------
00001C4E                          1217   include "timings.x68"
00001C4E                          1218  ; this file contains timing stuff
00001C4E                          1219  
00001C4E= 000A                    1220  playerTime dc.w 10
00001C50= 001E                    1221  enemyTime dc.w 30
00001C52= 0028                    1222  healTime dc.w 40
00001C54= 07D0                    1223  enemySpawnTimer dc.w 2000
00001C56                          1224  
00001C56                          1225  increment: ; D6 permanently used up
00001C56  5246                    1226      add.w #1, d6
00001C58  4E75                    1227      rts
00001C5A                          1228  
00001C5A                          1229  checkIncrement: ; d5 has been given check value
00001C5A  3806                    1230      move.w d6, d4 ; dont wanna mess up d6
00001C5C  88C5                    1231      divu d5, d4
00001C5E  383C 0000               1232      move.w #0, d4
00001C62  4844                    1233      swap d4
00001C64                          1234      ; d4 low word contains modulo
00001C64                          1235      ; compare w/ 0
00001C64  4A44                    1236      tst d4
00001C66                          1237      ; thingy contains whether they were equal
00001C66  4E75                    1238      rts
00001C66  4E75                    1239  -------------------- end include --------------------
00001C68                          1240   include "enemyManager.x68"
00001C68                          1241  ;ENEMY 1
00001C68= 00000000                1242  enemy1x dc.l 00
00001C6C= 00000000                1243  enemy1y dc.l 00
00001C70                          1244  
00001C70                          1245  ;ENEMY 2
00001C70= 00000032                1246  enemy2x dc.l 50
00001C74= 00000032                1247  enemy2y dc.l 50
00001C78                          1248  
00001C78                          1249  ;ENEMY 3
00001C78= 00000064                1250  enemy3x dc.l 100
00001C7C= 00000064                1251  enemy3y dc.l 100
00001C80                          1252  
00001C80                          1253  ;ENEMY 4
00001C80= 00000096                1254  enemy4x dc.l 150
00001C84= 00000096                1255  enemy4y dc.l 150
00001C88                          1256  
00001C88= 01                      1257  enemyIndex dc.b 1
00001C89                          1258  
00001C89                          1259  ; current enemy spawn
00001C8A                          1260  currentSpawnX ds.l 01
00001C8E                          1261  currentSpawnY ds.l 01
00001C92                          1262  
00001C92                          1263  initAllEnemies:
00001C92  21FC 00000000 1C68      1264      move.l #0, enemy1x
00001C9A  21FC 00000000 1C6C      1265      move.l #0, enemy1y
00001CA2                          1266  
00001CA2  21FC 00000032 1C70      1267      move.l #50, enemy2x
00001CAA  21FC 00000032 1C74      1268      move.l #50, enemy2y
00001CB2                          1269  
00001CB2  21FC 00000064 1C78      1270      move.l #100, enemy3x
00001CBA  21FC 00000064 1C7C      1271      move.l #100, enemy3y
00001CC2                          1272  
00001CC2  21FC 00000096 1C80      1273      move.l #150, enemy4x
00001CCA  21FC 00000096 1C84      1274      move.l #150, enemy4y
00001CD2                          1275  
00001CD2                          1276  processEnemies:
00001CD2  31FC 0001 1C88          1277      move.w #1, enemyIndex
00001CD8  6000 0002               1278      bra processEnemiesLoop
00001CDC                          1279  processEnemiesLoop:
00001CDC  4EB9 00001CFC           1280      jsr getCurrentEnemy
00001CE2  4EB8 1ACE               1281      jsr processEnemy
00001CE6  4EB9 00001D66           1282      jsr saveCurrentEnemy
00001CEC  5278 1C88               1283      add.w #1, enemyIndex
00001CF0                          1284  
00001CF0  3438 1C88               1285      move.w enemyIndex, d2
00001CF4  0C42 0005               1286      cmpi.w #5, d2
00001CF8  66E2                    1287      bne processEnemiesLoop
00001CFA  4E75                    1288      rts
00001CFC                          1289  
00001CFC                          1290  
00001CFC                          1291  getCurrentEnemy:
00001CFC  3438 1C88               1292      move.w enemyIndex, d2
00001D00  0C42 0001               1293      cmpi.w #1, d2
00001D04  6700 0028               1294      beq getEnemy1
00001D08                          1295  
00001D08  3438 1C88               1296      move.w enemyIndex, d2
00001D0C  0C42 0002               1297      cmpi.w #2, d2
00001D10  6700 002A               1298      beq getEnemy2
00001D14                          1299  
00001D14  3438 1C88               1300      move.w enemyIndex, d2
00001D18  0C42 0003               1301      cmpi.w #3, d2
00001D1C  6700 002C               1302      beq getEnemy3
00001D20                          1303  
00001D20  3438 1C88               1304      move.w enemyIndex, d2
00001D24  0C42 0004               1305      cmpi.w #4, d2
00001D28  6700 002E               1306      beq getEnemy4
00001D2C  4E75                    1307      rts
00001D2E                          1308  getEnemy1:
00001D2E  21F8 1C68 1A94          1309      move.l enemy1x, enemyX
00001D34  21F8 1C6C 1A98          1310      move.l enemy1y, enemyY
00001D3A  4E75                    1311      rts
00001D3C                          1312  getEnemy2:
00001D3C  21F8 1C70 1A94          1313      move.l enemy2x, enemyX
00001D42  21F8 1C74 1A98          1314      move.l enemy2y, enemyY
00001D48  4E75                    1315      rts
00001D4A                          1316  getEnemy3:
00001D4A  21F8 1C78 1A94          1317      move.l enemy3x, enemyX
00001D50  21F8 1C7C 1A98          1318      move.l enemy3y, enemyY
00001D56  4E75                    1319      rts
00001D58                          1320  getEnemy4:
00001D58  21F8 1C80 1A94          1321      move.l enemy4x, enemyX
00001D5E  21F8 1C84 1A98          1322      move.l enemy4y, enemyY
00001D64  4E75                    1323      rts
00001D66                          1324  
00001D66                          1325  saveCurrentEnemy:
00001D66  3438 1C88               1326      move.w enemyIndex, d2
00001D6A  0C42 0001               1327      cmpi.w #1, d2
00001D6E  6700 0028               1328      beq saveEnemy1
00001D72                          1329  
00001D72  3438 1C88               1330      move.w enemyIndex, d2
00001D76  0C42 0002               1331      cmpi.w #2, d2
00001D7A  6700 002A               1332      beq saveEnemy2
00001D7E                          1333  
00001D7E  3438 1C88               1334      move.w enemyIndex, d2
00001D82  0C42 0003               1335      cmpi.w #3, d2
00001D86  6700 002C               1336      beq saveEnemy3
00001D8A                          1337  
00001D8A  3438 1C88               1338      move.w enemyIndex, d2
00001D8E  0C42 0004               1339      cmpi.w #4, d2
00001D92  6700 002E               1340      beq saveEnemy4
00001D96  4E75                    1341      rts
00001D98                          1342  
00001D98                          1343  saveEnemy1:
00001D98  21F8 1A94 1C68          1344      move.l enemyx, enemy1X
00001D9E  21F8 1A98 1C6C          1345      move.l enemyy, enemy1Y
00001DA4  4E75                    1346      rts
00001DA6                          1347  saveEnemy2:
00001DA6  21F8 1A94 1C70          1348      move.l enemyx, enemy2X
00001DAC  21F8 1A98 1C74          1349      move.l enemyy, enemy2Y
00001DB2  4E75                    1350      rts
00001DB4                          1351  saveEnemy3:
00001DB4  21F8 1A94 1C78          1352      move.l enemyx, enemy3X
00001DBA  21F8 1A98 1C7C          1353      move.l enemyy, enemy3Y
00001DC0  4E75                    1354      rts
00001DC2                          1355  saveEnemy4:
00001DC2  21F8 1A94 1C80          1356      move.l enemyx, enemy4X
00001DC8  21F8 1A98 1C84          1357      move.l enemyy, enemy4Y
00001DCE  4E75                    1358      rts
00001DD0                          1359  
00001DD0                          1360  ; current enemy dir
00001DD0= 0000                    1361  enemyDir dc.w 0000
00001DD0= 0000                    1362  -------------------- end include --------------------
00001DD2                          1363   include "camera.x68"
00001DD2                          1364  ; this file contains camera information
00001DD2                          1365  
00001DD2= 000000A0                1366  cameraOffsetX dc.l 160
00001DD6= 00000078                1367  cameraOffsetY dc.l 120
00001DDA= 00000000                1368  cameraX dc.l 0
00001DDE= 00000000                1369  cameraY dc.l 0
00001DE2= 0002                    1370  cameraZoom dc.w 02
00001DE4                          1371  
00001DE4= 0000                    1372  isFollow dc.w 0
00001DE6                          1373  
00001DE6                          1374  followCam:
00001DE6  4A78 1DE4               1375      tst isFollow
00001DEA  6700 001C               1376      beq endFollow
00001DEE                          1377  
00001DEE  2438 1392               1378      move.l playerX, d2
00001DF2  2638 1396               1379      move.l playerY, d3
00001DF6  94B8 1DD2               1380      sub.l cameraOffsetX, d2
00001DFA  96B8 1DD6               1381      sub.l cameraOffsetY, d3
00001DFE                          1382  
00001DFE  21C2 1DDA               1383      move.l d2, cameraX
00001E02  21C3 1DDE               1384      move.l d3, cameraY
00001E06  4E75                    1385      RTS
00001E08                          1386  endFollow:
00001E08  4E75                    1387      rts
00001E0A                          1388  
00001E0A                          1389  toggleFollow:
00001E0A  3438 1DE4               1390      move.w isFollow, d2
00001E0E  4A42                    1391      tst.w d2
00001E10  6700 000A               1392      beq turnOnFollow
00001E14  31FC 0000 1DE4          1393      move.w #0, isFollow
00001E1A  4E75                    1394      rts
00001E1C                          1395  
00001E1C                          1396  turnOnFollow:
00001E1C  31FC 0001 1DE4          1397      move.w #1, isFollow
00001E22  4E75                    1398      rts
00001E22  4E75                    1399  -------------------- end include --------------------
00001E24                          1400  
00001E24                          1401      end start

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AKEY                41
APPLEH              10
APPLEW              10
APRESSED            12DE
ATTACKMSG1          1A49
ATTACKMSG2          1A65
BATTLE              1144
BULLETH             5
BULLETW             5
CAMERAOFFSETX       1DD2
CAMERAOFFSETY       1DD6
CAMERAX             1DDA
CAMERAY             1DDE
CAMERAZOOM          1DE2
CELLBRX             159A
CELLBRY             159E
CELLTLX             1592
CELLTLY             1596
CELLXRADIUS         15E2
CELLYOFFSET         15EA
CELLYRADIUS         15E6
CENTERX             139A
CENTERY             139E
CHECKINCREMENT      1C5A
CLEARSCREEN         1162
COLLISION           1146
COLOR1              201808
COLOR2              494320
COLOR3              56864B
COLOR4              7AC687
COLOR5              AFE5D0
COLORRED            463EBD
CRLF                19EC
CURRENTHEALTH       13A6
CURRENTHPX          1A2A
CURRENTKEY          1388
CURRENTPTS          13A2
CURRENTSPAWNX       1C8A
CURRENTSPAWNY       1C8E
DKEY                44
DPRESSED            1318
DRAW                1630
DRAWBG              17CA
DRAWCELL            18A2
DRAWENEMIES         182E
DRAWENEMY           185E
DRAWHEALTH          16D0
DRAWPAUSE           1668
DRAWPLAYER          17FA
DRAWRECT            1964
DRAWTEXT            172A
DRAWUIRECT          19A6
END                 1368
ENDCOLLIDE          1C42
ENDCOLLISION        1590
ENDDRAW             1942
ENDDRAWPAUSE        16CE
ENDFOLLOW           1E08
ENDHEAL             1356
ENDINITENEMY        1C44
ENDINPUT            1250
ENDLOOP             110E
ENDMOVEMENT         1338
ENDMSG              1A00
ENDPROCESS          1C40
ENDTOGGLEFULLSCREEN  19DE
ENEMY1X             1C68
ENEMY1Y             1C6C
ENEMY2X             1C70
ENEMY2Y             1C74
ENEMY3X             1C78
ENEMY3Y             1C7C
ENEMY4X             1C80
ENEMY4Y             1C84
ENEMYCOLCHECK       1B00
ENEMYCOLLIDE        1C3A
ENEMYDIR            1DD0
ENEMYH              C
ENEMYHALFH          6
ENEMYHALFW          8
ENEMYINDEX          1C88
ENEMYLEFTCOLCHECK   1C18
ENEMYRIGHTCOLCHECK  1C26
ENEMYSPAWNTIMER     1C54
ENEMYTIME           1C50
ENEMYW              10
ENEMYX              1A94
ENEMYY              1A98
ENTERKEY            D
ESCAPEJUSTPRESSED   1264
ESCAPEKEY           1B
ESCAPEPRESSED       1252
FIRSTINIT           1004
FOLLOWCAM           1DE6
GETCURRENTENEMY     1CFC
GETENEMY1           1D2E
GETENEMY2           1D3C
GETENEMY3           1D4A
GETENEMY4           1D58
GOFULLSCREEN        19D2
HEAL                133A
HEALTHBARLOCY       1A30
HEALTHBAROFFSETX    1A2E
HEALTHBRX           1A22
HEALTHBRY           1A26
HEALTHMSG           1A12
HEALTHROW           1A32
HEALTHTLX           1A1A
HEALTHTLY           1A1E
HEALTIME            1C52
INCREMENT           1C56
INIT                10BE
INITALLENEMIES      1C92
INITDRAW            15FE
INITENEMY           1A9C
INITENEMYBL         1BDE
INITENEMYBR         1BA6
INITENEMYTL         1B38
INITENEMYTR         1B70
INITIALIZECELL      13B2
INPUTKEYS           1381
ISFOLLOW            1DE4
ISFULLSCREEN        19FE
ISPAUSED            1390
KEY0                30
KEY0JUSTPRESSED     127E
KEY0PRESSED         126C
KEY1                31
KEY1PRESSED         12A8
KEY2                32
KEY2PRESSED         12B0
KEY3                33
KEY3PRESSED         12B8
LASTKEY             138C
LOOP                1104
MAP                 111A
MAXHEALTH           13AA
NOINPUT             11A8
PAUSED              1160
PAUSEDINPUT         122A
PAUSEHALFHEIGHT     1A38
PAUSEHALFWIDTH      1A34
PAUSEMSG            1A3C
PLAYERH             8
PLAYERTIME          1C4E
PLAYERW             8
PLAYERX             1392
PLAYERY             1396
POINTSGAIN          1
POINTSMSG           1A0A
POINTSROW           1A33
PRINT               1954
PRINTNUM            195C
PROCESSENEMIES      1CD2
PROCESSENEMIESLOOP  1CDC
PROCESSENEMY        1ACE
PROCESSENEMYBL      1BF8
PROCESSENEMYBR      1BBE
PROCESSENEMYTL      1B50
PROCESSENEMYTR      1B86
SAVECURRENTENEMY    1D66
SAVEENEMY1          1D98
SAVEENEMY2          1DA6
SAVEENEMY3          1DB4
SAVEENEMY4          1DC2
SCREENH             13B0
SCREENW             13AE
SETCURSOR           19AE
SETFILLCOLOUR       194C
SETFULLSCREEN       19E4
SETPENCOLOUR        1944
SKEY                53
SPACEKEY            20
SPRESSED            12F8
START               1000
TAKEDMG             1358
TCCRS               B
TCDBL               5C
TCFONT              15
TCFULLSCREEN        21
TCINP               13
TCPENCLR            50
TCPENFIL            51
TCRECT              57
TCSCREEN            21
TCSCREENSIZE        0
TESTINPUT           1178
TESTMSG             137C
TITLE               1042
TITLE2MSG           10A4
TITLELOOP           1078
TITLEMSG            1092
TOGGLEFOLLOW        1E0A
TOGGLEFULLSCREEN    19B6
TOGGLEPAUSE         1286
TURNONFOLLOW        1E1C
WASTETIME           116E
WKEY                57
WPRESSED            12C4
YESINPUT            11BA
ZKEY                5A
ZONE1BRX            15AA
ZONE1BRY            15AE
ZONE1COLLISION      14E8
ZONE1TLX            15A2
ZONE1TLY            15A6
ZONE2BRX            15BA
ZONE2BRY            15BE
ZONE2COLLISION      1512
ZONE2TLX            15B2
ZONE2TLY            15B6
ZONE3BRX            15CA
ZONE3BRY            15CE
ZONE3COLLISION      153C
ZONE3TLX            15C2
ZONE3TLY            15C6
ZONE4BRX            15DA
ZONE4BRY            15DE
ZONE4COLLISION      1566
ZONE4TLX            15D2
ZONE4TLY            15D6
ZONEHEIGHT          15F2
ZONEMSG             15F6
ZONEWIDTH           15EE
ZPRESSED            1296
