00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/02/2025 20:29:45

00000000                             1  ; this file starts the program.
00000000                             2  ; contains the title screen, includes all other files
00000000                             3  
00001000                             4      org $1000
00001000                             5  start:
00001000  6000 0002                  6      bra firstInit
00001004                             7  
00001004                             8  firstInit:
00001004                             9      ; Enable the screen back buffer(see easy 68k help)
00001004  103C 005C                 10      MOVE.B  #tcdbl,D0          ; 92 Enables Double Buffer
00001008  123C 0011                 11      MOVE.B  #17,        D1          ; Combine Tasks
0000100C  4E4F                      12      TRAP    #15                     ; Trap (Perform action)
0000100E                            13      
0000100E  6000 0002                 14      bra nextInit
00001012                            15      
00001012                            16  nextInit:
00001012  33FC 0000 00001E22        17      move.w #0, lvlType
0000101A                            18      
0000101A  103C 0021                 19      MOVE.B  #tcScreen, D0           ; access screen information
0000101E  223C 00000000             20      MOVE.L  #tcScreenSize, D1       ; placing 0 in D1 triggers loading screen size information
00001024  4E4F                      21      TRAP    #15                     ; interpret D0 and D1 for screen size
00001026  33C1 00001200             22      MOVE.W  D1,         screenH     ; place screen height in memory location
0000102C  4841                      23      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000102E  33C1 000011FE             24      MOVE.W  D1,         screenW     ; place screen width in memory location
00001034                            25      
00001034  13FC 0000 000011E0        26      move.b #$00, isPaused
0000103C                            27  
0000103C                            28     
0000103C                            29      
0000103C  4282                      30      clr.l d2
0000103E  303C 0015                 31      move #tcFont, d0
00001042  223C 00AFE5D0             32      move.l #color5, d1
00001048  4E4F                      33      trap #15
0000104A                            34      
0000104A  6000 0002                 35      bra title
0000104E                            36  
0000104E                            37  title:
0000104E  4EB9 0000161E             38      jsr drawBg
00001054                            39      
00001054  323C 1F0D                 40      move.w #$1f0d, d1
00001058  4EB9 00001802             41      jsr setCursor
0000105E  43F9 00001092             42      lea title1msg, a1
00001064  4EB9 000017A8             43      jsr print
0000106A                            44      
0000106A  323C 1C0F                 45      move.w #$1c0f, d1
0000106E  4EB9 00001802             46      jsr setCursor
00001074  43F9 000010A4             47      lea title2msg, a1
0000107A  4EB9 000017A8             48      jsr print
00001080                            49      
00001080                            50      
00001080  6000 0002                 51      bra titleLoop
00001084                            52      
00001084                            53  titleLoop:
00001084                            54       ; Enable back buffer
00001084  103C 005E                 55      MOVE.B  #94,        D0
00001088  4E4F                      56      TRAP    #15
0000108A                            57      
0000108A  4EB9 00001E24             58      jsr testInput
00001090                            59      
00001090  60F2                      60      bra titleLoop
00001092                            61  
00001092                            62  
00001092= 2D 20 43 45 4C 4C ...     63  title1Msg dc.b '- CELL DEFENDER -',0
000010A4                            64  
000010A4= 50 72 65 73 73 20 ...     65  title2msg dc.b 'Press "enter" to start...',0
000010BE                            66  
000010BE                            67  ; include other files 
000010BE                            68   include "map/main.x68"
000010BE                            69  ; this file contains the main game loop
000010BE                            70  
000010BE                            71  mapInit:
000010BE  33FC 0001 00001E22        72      move.w #1, lvlType
000010C6                            73      
000010C6                            74          ; Place the Player at the center of the screen
000010C6  4281                      75      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C8  3239 000011FE             76      MOVE.W  screenW,   D1          ; Place Screen width in D1
000010CE  82FC 0002                 77      DIVU    #02,        D1          ; divide by 2 for center on X Axis
000010D2  23C1 000011E2             78      MOVE.L  D1,         playerX    ; Players X Position
000010D8  23C1 000011EA             79      move.l d1, centerx
000010DE                            80  
000010DE  4281                      81      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E0  3239 00001200             82      MOVE.W  screenH,   D1          ; Place Screen width in D1
000010E6  82FC 0002                 83      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010EA  23C1 000011E6             84      MOVE.L  D1,         playerY    ; Players Y Position
000010F0  23C1 000011EE             85      move.l d1, centerY
000010F6                            86  
000010F6  4EB9 00001202             87      jsr initializeCell
000010FC  4EB9 00001452             88      jsr initDraw
00001102  4EB9 00001AFA             89      jsr initAllEnemies
00001108                            90  
00001108  6000 0002                 91      bra loop
0000110C                            92  
0000110C                            93  loop:
0000110C                            94      ;jsr clearscreen
0000110C  4EB9 00001122             95      jsr map ; if in map, do map stuff
00001112                            96      ; if in battle, do battle stuff
00001112                            97  
00001112  6000 0002                 98      bra endLoop
00001116                            99  endLoop:
00001116  4A79 000011F6            100      tst currentHealth
0000111C  6600 009A                101      bne end
00001120  60EA                     102      bra loop        ; loop
00001122                           103  
00001122                           104  map:
00001122  4EB9 00001484            105      jsr draw
00001128  4EB9 00001E24            106      jsr testinput
0000112E                           107      
0000112E                           108      ; test paused
0000112E  4A39 000011E0            109      tst.b isPaused
00001134  6600 002C                110      bne paused
00001138                           111  
00001138                           112      ; process
00001138  4EB9 00001ABE            113      jsr increment
0000113E  4EB9 00001CD0            114      jsr processEnemies
00001144                           115      ;jsr enemyColCheck
00001144                           116      ;jsr collision
00001144  4E75                     117      rts
00001146                           118  
00001146                           119  battle:
00001146  4E75                     120      rts
00001148                           121  
00001148                           122  collision:
00001148  4EB9 00001338            123      jsr zone1collision
0000114E  4EB9 00001366            124      jsr zone2collision
00001154  4EB9 00001390            125      jsr zone3collision
0000115A  4EB9 000013BA            126      jsr zone4collision
00001160  4E75                     127      rts
00001162                           128  
00001162                           129  paused:
00001162  60B2                     130      bra endLoop
00001164                           131      
00001164                           132  clearscreen:
00001164                           133      ; Clear the screen
00001164  103C 000B                134      MOVE.B  #tccrs,D0          ; Set Cursor Position
00001168  323C FF00                135      MOVE.W  #$FF00,     D1          ; Clear contents
0000116C  4E4F                     136      TRAP    #15
0000116E  4E75                     137      rts
00001170                           138  
00001170                           139  wasteTime:
00001170                           140      ; value put into d5, keep subtracting 1 until d5 contains 0
00001170                           141      ; takes a lot of time to process
00001170  5345                     142      sub #1, d5
00001172  BA7C 0000                143      cmp #0, d5
00001176  66F8                     144      bne wasteTime
00001178  4E75                     145      rts
0000117A                           146  
0000117A                           147  togglePause:
0000117A  1A39 000011E0            148      move.b isPaused, d5
00001180  4605                     149      not.b d5
00001182  13C5 000011E0            150      move.b d5, isPaused
00001188  4E75                     151      rts
0000118A                           152  
0000118A                           153  
0000118A                           154  ; heal up by one hp
0000118A                           155  heal:
0000118A  2439 000011F6            156      move.l currentHealth, d2
00001190  B4B9 000011FA            157      cmp.l maxHealth, d2
00001196  6700 000E                158      beq endHeal
0000119A  5282                     159      add.l #1, d2
0000119C  23C2 000011F6            160      move.l d2, currentHealth
000011A2  6000 0002                161      bra endHeal
000011A6                           162  endHeal:
000011A6  4E75                     163      rts
000011A8                           164  
000011A8                           165  takeDmg:
000011A8  2239 000011F6            166      move.l currentHealth, d1
000011AE  5381                     167      sub.l #1, d1
000011B0  23C1 000011F6            168      move.l d1, currentHealth
000011B6  4E75                     169      rts
000011B8                           170  
000011B8                           171  ; runs if game is cut short w/ ESC key
000011B8                           172  end:
000011B8  4EB8 1164                173      jsr clearscreen
000011BC                           174      
000011BC  43F9 00001854            175      lea endmsg, a1
000011C2  4EB9 000017A8            176      jsr print
000011C8  FFFF FFFF                177      simhalt
000011CC                           178  
000011CC= 74 65 73 74 00           179  testMsg dc.b 'test',0
000011D1                           180  
000011D1                           181  
000011D1= 14 57 41 53 44 00        182  inputkeys dc.b 20,87,65,83,68,0
000011D7                           183  
000011D8                           184  currentkey ds.l 01
000011DC                           185  lastkey ds.l 01
000011E0                           186  isPaused ds.b 01
000011E1                           187  
000011E2                           188  playerX ds.l 01
000011E6                           189  playerY ds.l 01
000011EA                           190  
000011EA                           191  centerX ds.l 01
000011EE                           192  centerY ds.l 01
000011F2                           193  
000011F2= 00000000                 194  currentPts dc.l 0
000011F6                           195  
000011F6= 000000C8                 196  currentHealth dc.l 200
000011FA= 000000C8                 197  maxHealth dc.l 200
000011FE                           198  
000011FE                           199  screenW        DS.w    01  ; Reserve Space for Screen Width
00001200                           200  screenH        DS.w    01  ; Reserve Space for Screen Height
00001202                           201  
00001202                           202  
00001202                           203  -------------------- end include --------------------
00001202                           204   include "map/shapeSizes.x68"
00001202                           205  ; this file contains some const values
00001202                           206  
00001202  =00000008                207  playerW equ 08
00001202  =00000008                208  playerH equ 08
00001202                           209  
00001202  =0000000C                210  enemyH equ 12
00001202  =00000010                211  enemyW equ 16
00001202  =00000006                212  enemyHalfH equ 6
00001202  =00000008                213  enemyHalfW equ 8
00001202                           214  
00001202  =00000005                215  bulletH equ 05
00001202  =00000005                216  bulletW equ 05
00001202                           217  
00001202  =00000010                218  appleH equ 16
00001202  =00000010                219  appleW equ 16
00001202                           220  
00001202  =00000001                221  pointsGain equ 01
00001202  =00000001                222  -------------------- end include --------------------
00001202                           223   include "map/trapCodes.x68"
00001202                           224  ; traps
00001202  =0000000B                225  tccrs  EQU 11       ; Trap code cursor position
00001202  =0000005C                226  tcdbl  EQU 92       ; Double Buffer Screen Trap Code
00001202  =00000013                227  tcinp equ 19        ; get input trap code
00001202  =00000021                228  tcScreen EQU 33    ; Screen size information trap code
00001202  =00000000                229  tcScreenSize EQU 00    ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001202                           230                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001202  =00000015                231  tcFont equ 21       ; change font style/colour
00001202  =00000050                232  tcPenClr equ 80     ; change pen colour
00001202  =00000051                233  tcPenFil equ 81     ; change pen fill
00001202  =00000057                234  tcRect equ 87       ; draw rectangle
00001202                           235  
00001202  =00000021                236  tcFullScreen equ 33
00001202  =00000021                237  -------------------- end include --------------------
00001202                           238   include "map/inputKeyCodes.x68"
00001202                           239  ; this file contains relevant input keycodes
00001202                           240  
00001202  =0000001B                241  escapekey equ $1b ; pause
00001202  =00000020                242  spacekey equ $20
00001202  =0000000D                243  enterKey equ $0d
00001202                           244  
00001202  =00000057                245  wkey equ $57
00001202  =00000041                246  akey equ $41
00001202  =00000053                247  skey equ $53
00001202  =00000044                248  dkey equ $44
00001202                           249  
00001202  =0000005A                250  zkey equ $5a ; toggle follow cam
00001202                           251  
00001202  =00000030                252  key0 equ $30 ; toggle fullscreen
00001202  =00000031                253  key1 equ $31 
00001202  =00000032                254  key2 equ $32
00001202  =00000033                255  key3 equ $33
00001202                           256  
00001202  =57415344                257  wasdKeys equ $57415344 ; movement keys
00001202  =41444C20                258  runActionKeys equ $41444C20 ; run actions
00001202  =41444C20                259  -------------------- end include --------------------
00001202                           260   include "map/colours.x68"
00001202                           261  ; this file contains relevant color values
00001202                           262  
00001202                           263  ; 6ive colours: ranging from dark to light, plus one for contrast
00001202                           264  ; color1: darkest
00001202                           265  ; color5: lightest
00001202                           266  ; colorRed: contrast red colour
00001202  =00201808                267  color1 equ $00201808
00001202  =00494320                268  color2 equ $00494320
00001202  =0056864B                269  color3 equ $0056864b
00001202  =007AC687                270  color4 equ $007ac687
00001202  =00AFE5D0                271  color5 equ $00afe5d0
00001202                           272  
00001202  =00463EBD                273  colorRed equ $00463ebd
00001202  =00463EBD                274  -------------------- end include --------------------
00001202                           275   include "map/cell.x68"
00001202                           276  ; this file contains cell data
00001202                           277  
00001202                           278  ; cell contains:
00001202                           279      ; big square boundary
00001202                           280      ; 2 square attack zones - top corners
00001202                           281      ; 1 square heal zone - bottom
00001202                           282  
00001202                           283  initializeCell: ; initialize values for cell and zones
00001202                           284  
00001202                           285      ; this subroutine gathers top-left and bottom-right bounds for the cell,
00001202                           286      ; as well as each zone
00001202                           287  
00001202                           288      ; these bounds are used to draw and process
00001202                           289  
00001202                           290      ;--------RECTANGLE TRAP CODE:
00001202                           291      ; d1: top left X
00001202                           292      ; d2: top left Y
00001202                           293  
00001202                           294      ; d3: bottom right X
00001202                           295      ; d4: bottom right Y
00001202                           296      
00001202                           297  
00001202                           298      ;--------get cell bounds
00001202                           299      ; TL
00001202  2238 11EA                300      move.l centerX, d1      ; move centerX to d1
00001206  92B9 00001436            301      sub.l cellXradius, d1     ; add/sub based on cell radius
0000120C  23C1 000013E6            302      move.l d1, celltlX      ; save to relevant location
00001212                           303  
00001212  2238 11EE                304      move.l centerY, d1
00001216  D2B9 0000143E            305      add.l cellYoffset, d1
0000121C  92B9 0000143A            306      sub.l cellYradius, d1
00001222  23C1 000013EA            307      move.l d1, celltlY
00001228                           308  
00001228                           309      ; BR
00001228  2238 11EA                310      move.l centerX, d1
0000122C  D2B9 00001436            311      add.l cellXradius, d1
00001232  D2B8 0008                312      add.l playerH, d1
00001236  23C1 000013EE            313      move.l d1, cellbrX
0000123C                           314  
0000123C  2238 11EE                315      move.l centerY, d1
00001240  D2B9 0000143E            316      add.l cellYoffset, d1
00001246  D2B9 0000143A            317      add.l cellYradius, d1
0000124C  23C1 000013F2            318      move.l d1, cellbrY
00001252                           319  
00001252                           320  
00001252                           321      ;--------get zone 1 bounds
00001252                           322      ; TL
00001252  23F9 000013E6 000013F6   323      move.l celltlX, zone1tlX
0000125C                           324  
0000125C  23F9 000013EA 000013FA   325      move.l celltlY, zone1tlY
00001266                           326  
00001266                           327      ; BR
00001266  2239 000013F6            328      move.l zone1tlX, d1
0000126C  D2B9 00001442            329      add.l zoneWidth, d1
00001272  23C1 000013FE            330      move.l d1, zone1brX
00001278                           331  
00001278  2239 000013FA            332      move.l zone1tly, d1
0000127E  D2B9 00001446            333      add.l zoneHeight, d1
00001284  23C1 00001402            334      move.l d1, zone1brY
0000128A                           335  
0000128A                           336  
0000128A                           337      ;--------get zone 2 bounds
0000128A                           338      ; TL
0000128A  2239 000013EE            339      move.l cellbrX, d1
00001290  92B9 00001442            340      sub.l zoneWidth, d1
00001296  23C1 00001406            341      move.l d1, zone2tlX
0000129C                           342  
0000129C  23F9 000013EA 0000140A   343      move.l celltlY, zone2tlY
000012A6                           344  
000012A6                           345      ; BR
000012A6  23F9 000013EE 0000140E   346      move.l cellbrx, zone2brX
000012B0                           347  
000012B0  2239 000013EA            348      move.l celltlY, d1
000012B6  D2B9 00001446            349      add.l zoneHeight, d1
000012BC  23C1 00001412            350      move.l d1, zone2brY
000012C2                           351  
000012C2                           352  
000012C2                           353      ;--------get zone 3 bounds
000012C2                           354      ; TL
000012C2  2239 000013EE            355      move.l cellbrX, d1
000012C8  92B9 00001442            356      sub.l zoneWidth, d1
000012CE  23C1 00001416            357      move.l d1, zone3tlX
000012D4                           358  
000012D4  2239 000013F2            359      move.l cellbrY, d1
000012DA  92B9 00001446            360      sub.l zoneHeight, d1
000012E0  23C1 0000141A            361      move.l d1, zone3tlY
000012E6                           362  
000012E6                           363      ; BR
000012E6  23F9 000013EE 0000141E   364      move.l cellbrX, zone3brX
000012F0                           365  
000012F0  23F9 000013F2 00001422   366      move.l cellbrY, zone3brY
000012FA                           367  
000012FA                           368      ;--------get zone 4 bounds
000012FA                           369      ; TL
000012FA  2239 000013E6            370      move.l celltlX, d1
00001300  23C1 00001426            371      move.l d1, zone4tlX
00001306                           372  
00001306  2239 000013F2            373      move.l cellbrY, d1
0000130C  92B9 00001446            374      sub.l zoneHeight, d1
00001312  23C1 0000142A            375      move.l d1, zone4tlY
00001318                           376  
00001318                           377      ; BR
00001318  2239 000013E6            378      move.l celltlX, d1
0000131E  D2B9 00001442            379      add.l zoneWidth, d1
00001324  23C1 0000142E            380      move.l d1, zone4brX
0000132A                           381  
0000132A  2239 000013F2            382      move.l cellbrY, d1
00001330  23C1 00001432            383      move.l d1, zone4brY
00001336                           384  
00001336  4E75                     385      rts
00001338                           386  
00001338                           387  zone1collision:
00001338  2438 11E2                388      move.l playerX, d2
0000133C  2638 11E6                389      move.l playerY, d3
00001340                           390  
00001340                           391      ; check x
00001340  B4B9 000013FE            392      cmp.l zone1brX, d2
00001346  6E00 009C                393      bgt endCollision
0000134A                           394      ; check y
0000134A  B6B9 00001402            395      cmp.l zone1brY, d3
00001350  6E00 0092                396      bgt endCollision
00001354                           397  
00001354                           398  
00001354                           399      ; at this point, player is confirmed in zone 1
00001354  43F9 0000144A            400      lea zoneMsg, a1
0000135A  4EB9 000017A8            401      jsr print
00001360                           402  
00001360                           403      ; need to go to enemy thing
00001360  6000 0C62                404      bra initRun
00001364                           405  
00001364  4E75                     406      rts
00001366                           407  
00001366                           408  zone2collision:
00001366  2438 11E2                409      move.l playerX, d2
0000136A  2638 11E6                410      move.l playerY, d3
0000136E                           411  
0000136E                           412      ; check x
0000136E  B4B9 00001406            413      cmp.l zone2tlX, d2
00001374  6D00 006E                414      blt endCollision
00001378                           415      ; check y
00001378  B6B9 00001402            416      cmp.l zone1brY, d3
0000137E  6E00 0064                417      bgt endCollision
00001382                           418  
00001382  43F9 0000144A            419      lea zoneMsg, a1
00001388  4EB9 000017A8            420      jsr print
0000138E                           421  
0000138E                           422      ; at this point, player is confirmed in zone 2
0000138E                           423  
0000138E  4E75                     424      rts
00001390                           425  
00001390                           426  zone3collision:
00001390  2438 11E2                427      move.l playerX, d2
00001394  2638 11E6                428      move.l playerY, d3
00001398                           429  
00001398                           430      ; check x
00001398  B4B9 00001416            431      cmp.l zone3tlX, d2
0000139E  6D00 0044                432      blt endCollision
000013A2                           433      ; check y
000013A2  B6B9 0000141A            434      cmp.l zone3tlY, d3
000013A8  6D00 003A                435      blt endCollision
000013AC                           436  
000013AC                           437      ; at this point, player is confirmed in zone 3
000013AC                           438  
000013AC  43F9 0000144A            439      lea zoneMsg, a1
000013B2  4EB9 000017A8            440      jsr print
000013B8                           441      
000013B8  4E75                     442      rts
000013BA                           443  
000013BA                           444  zone4collision:
000013BA  2438 11E2                445      move.l playerX, d2
000013BE  2638 11E6                446      move.l playerY, d3
000013C2                           447  
000013C2                           448      ; check x
000013C2  B4B9 0000142E            449      cmp.l zone4brX, d2
000013C8  6E00 001A                450      bgt endCollision
000013CC                           451      ; check y
000013CC  B6B9 0000142A            452      cmp.l zone4tlY, d3
000013D2  6D00 0010                453      blt endCollision
000013D6                           454  
000013D6                           455      ; at this point, player is confirmed in zone 4
000013D6                           456  
000013D6  43F9 0000144A            457      lea zoneMsg, a1
000013DC  4EB9 000017A8            458      jsr print
000013E2  4E75                     459      rts
000013E4                           460  
000013E4                           461  endCollision:
000013E4  4E75                     462      rts
000013E6                           463  
000013E6                           464  ;-cell top-left bounds
000013E6                           465  celltlX ds.l 01
000013EA                           466  celltlY ds.l 01
000013EE                           467  ; cell bottom-right bounds
000013EE                           468  cellbrX ds.l 01
000013F2                           469  cellbrY ds.l 01
000013F6                           470  
000013F6                           471  ;----------------------zone 1 top-left bounds
000013F6                           472  zone1tlX ds.l 01
000013FA                           473  zone1tlY ds.l 01
000013FE                           474  ; zone 1 bottom-right bounds
000013FE                           475  zone1brX ds.l 01
00001402                           476  zone1brY ds.l 01
00001406                           477  
00001406                           478  ;----------------------zone 2 top-left bounds
00001406                           479  zone2tlX ds.l 01
0000140A                           480  zone2tlY ds.l 01
0000140E                           481  ; zone 2 bottom-right bounds
0000140E                           482  zone2brX ds.l 01
00001412                           483  zone2brY ds.l 01
00001416                           484  
00001416                           485  ;----------------------zone 3 top-left bounds
00001416                           486  zone3tlX ds.l 01
0000141A                           487  zone3tlY ds.l 01
0000141E                           488  ; zone 3 bottom-right bounds
0000141E                           489  zone3brX ds.l 01
00001422                           490  zone3brY ds.l 01
00001426                           491  
00001426                           492  ;----------------------zone 4 top-left bounds
00001426                           493  zone4tlX ds.l 01
0000142A                           494  zone4tlY ds.l 01
0000142E                           495  ; zone 4 bottom-right bounds
0000142E                           496  zone4brX ds.l 01
00001432                           497  zone4brY ds.l 01
00001436                           498  
00001436                           499  ; horizontal and vertical radius of main cell (half width)
00001436= 00000064                 500  cellXradius dc.l 100
0000143A= 00000050                 501  cellYradius dc.l 80
0000143E                           502  
0000143E                           503  ; how lower from center it is
0000143E= 0000003C                 504  cellYoffset dc.l 60
00001442                           505  
00001442                           506  ; width of zone
00001442= 00000037                 507  zoneWidth dc.l 55
00001446= 0000002D                 508  zoneHeight dc.l 45
0000144A                           509  
0000144A= 49 4E 20 5A 4F 4E ...    510  zoneMsg dc.b 'IN ZONE',0
00001452                           511  
00001452                           512  enterHill:
00001452                           513  
00001452                           514  
00001452                           515  
00001452                           516  -------------------- end include --------------------
00001452                           517   include "map/draw.x68"
00001452                           518  ; this file contains all draw functions
00001452                           519  
00001452                           520  initDraw:
00001452                           521      ; get health rectangle bounds
00001452                           522  
00001452                           523      ;HEIGHT
00001452  3239 00001884            524      move.w healthBarLocY, d1
00001458  23C1 00001872            525      move.l d1, healthTlY
0000145E  0681 0000000F            526      add.l #15, d1
00001464  23C1 0000187A            527      move.l d1, healthBrY
0000146A                           528  
0000146A                           529      ;WIDTH
0000146A  4281                     530      clr.l d1
0000146C  3239 00001882            531      move.w healthBarOffsetX, d1
00001472                           532      ;move.l maxHealth, d2
00001472                           533      ;divu #2, d2
00001472                           534      ;add.l maxHealth, d1
00001472  23C1 0000186E            535      move.l d1, healthTlX
00001478                           536  
00001478  D2B8 11FA                537      add.l maxhealth, d1
0000147C  23C1 00001876            538      move.l d1, healthBrX
00001482                           539      
00001482  4E75                     540      rts
00001484                           541  
00001484                           542  
00001484                           543  draw:
00001484                           544       ; Enable back buffer
00001484  103C 005E                545      MOVE.B  #94,        D0
00001488  4E4F                     546      TRAP    #15
0000148A                           547  
0000148A  4EB9 00001DE4            548      jsr followCam
00001490  4EB9 0000161E            549      jsr drawBg
00001496  4EB9 00001682            550      jsr drawEnemies
0000149C  4EB9 000016F6            551      jsr drawCell
000014A2  4EB9 0000164E            552      jsr drawPlayer
000014A8  4EB9 0000157E            553      jsr drawText
000014AE  4EB9 00001524            554      jsr drawHealth
000014B4  4EB9 000014BC            555      jsr drawPause
000014BA  4E75                     556      rts
000014BC                           557  
000014BC                           558  drawPause:
000014BC  4A38 11E0                559      tst.b isPaused
000014C0  6700 0060                560      beq endDrawPause
000014C4                           561  
000014C4  223C 00AFE5D0            562      move.l #color5, d1
000014CA  4EB9 00001798            563      jsr setPenColour
000014D0  223C 00201808            564      move.l #color1, d1
000014D6  4EB9 000017A0            565      jsr setFillColour
000014DC                           566  
000014DC                           567      ; get rect bounds
000014DC                           568  
000014DC  2238 11EA                569      move.l centerX, d1
000014E0  2438 11EE                570      move.l centerY, d2
000014E4  92B9 00001888            571      sub.l pauseHalfWidth, d1
000014EA  94B9 0000188C            572      sub.l pauseHalfHeight, d2
000014F0                           573  
000014F0  2638 11EA                574      move.l centerX, d3
000014F4  2838 11EE                575      move.l centerY, d4
000014F8  D6B9 00001888            576      add.l pauseHalfWidth, d3
000014FE  D8B9 0000188C            577      add.l pauseHalfHeight, d4
00001504                           578  
00001504  4EB9 000017FA            579      jsr drawUiRect
0000150A                           580  
0000150A                           581      ; draw text
0000150A  323C 2208                582      move.w #$2208, d1
0000150E  4EB9 00001802            583      jsr setCursor
00001514  43F9 00001890            584      lea pauseMsg, a1
0000151A  4EB9 000017A8            585      jsr print
00001520                           586  
00001520  4E75                     587      rts
00001522                           588  endDrawPause:
00001522  4E75                     589      rts
00001524                           590  
00001524                           591  drawHealth:
00001524  223C 007AC687            592      move.l #color4, d1
0000152A  4EB9 00001798            593      jsr setPenColour
00001530  223C 00494320            594      move.l #color2, d1
00001536  4EB9 000017A0            595      jsr setFillColour
0000153C                           596  
0000153C  2239 0000186E            597      move.l healthTlX, d1
00001542  2439 00001872            598      move.l healthTlY, d2
00001548                           599  
00001548  2639 00001876            600      move.l healthBrX, d3
0000154E  2839 0000187A            601      move.l healthBrY, d4
00001554  4EB9 000017FA            602      jsr drawUiRect
0000155A                           603  
0000155A                           604      ; DRAW FULL PART OF HP BAR
0000155A  2639 0000186E            605      move.l healthtlX, d3
00001560  D6B8 11F6                606      add.l currentHealth, d3
00001564                           607  
00001564  223C 0056864B            608      move.l #color3, d1 ; change colour
0000156A  4EB9 000017A0            609      jsr setFillColour
00001570                           610  
00001570  2239 0000186E            611      move.l healthTlX, d1 ; set value in d1 back to what its supposed to be
00001576  4EB9 000017FA            612      jsr drawUiRect
0000157C  4E75                     613      rts
0000157E                           614  
0000157E                           615  drawText:
0000157E                           616      ; set colours
0000157E  223C 00AFE5D0            617      move.l #color5, d1
00001584  4EB9 00001798            618      jsr setPenColour
0000158A  223C 00201808            619      move.l #color1, d1
00001590  4EB9 000017A0            620      jsr setFillColour
00001596                           621      ; PLAYER SCORE MSG
00001596  323C 0200                622      move.w #$200, d1
0000159A  D239 00001887            623      add.b pointsRow, d1
000015A0  4EB9 00001802            624      jsr setCursor
000015A6  43F9 0000185E            625      lea pointsMsg, a1
000015AC  4EB9 000017A8            626      jsr print
000015B2                           627      ; PLAYER SCORE
000015B2  223C 00000A00            628      move.l #$a00, d1
000015B8  D239 00001887            629      add.b pointsRow, d1
000015BE  4EB9 00001802            630      jsr setCursor
000015C4  2238 11F2                631      move.l currentPts, d1
000015C8  4EB9 000017B0            632      jsr printNum
000015CE                           633  
000015CE                           634      ; HEALTH
000015CE  323C 0200                635      move.w #$200, d1
000015D2  D239 00001886            636      add.b healthRow, d1
000015D8  4EB9 00001802            637      jsr setCursor
000015DE  43F9 00001866            638      lea healthMsg, a1
000015E4  4EB9 000017A8            639      jsr print
000015EA                           640  
000015EA                           641      ; ANTHILL
000015EA  323C 1005                642      move.w #$1005, d1
000015EE  4EB9 00001802            643      jsr setCursor
000015F4  43F9 0000189D            644      lea attackMsg1, a1
000015FA  4EB9 000017A8            645      jsr print
00001600  5241                     646      add.w #1, d1
00001602  4EB9 00001802            647      jsr setCursor
00001608  43F9 000018B9            648      lea attackMsg2, a1
0000160E  4EB9 000017A8            649      jsr print
00001614                           650  
00001614                           651  
00001614                           652      ; reset cursor
00001614  7200                     653      move.l #0, d1
00001616  4EB9 00001802            654      jsr setCursor
0000161C  4E75                     655      rts
0000161E                           656  
0000161E                           657  drawBg:
0000161E                           658      ; set colours
0000161E  223C 00494320            659      move.l #color2, d1
00001624  4EB9 00001798            660      jsr setPenColour
0000162A  223C 00201808            661      move.l #color1, d1
00001630  4EB9 000017A0            662      jsr setFillColour
00001636                           663  
00001636                           664      ; clear d3 and d4 (screen W and H are words)
00001636  4283                     665      clr.l d3
00001638  4284                     666      clr.l d4
0000163A                           667  
0000163A                           668      ; put the stuff in the registers, draw rect
0000163A  7200                     669      move.l #0, d1
0000163C  7400                     670      move.l #0, d2
0000163E  3638 11FE                671      move.w screenW, d3
00001642  3838 1200                672      move.w screenH, d4
00001646  4EB9 000017FA            673      jsr drawUiRect
0000164C  4E75                     674      rts
0000164E                           675  
0000164E                           676  drawPlayer:
0000164E                           677      ; Set white
0000164E  223C 00AFE5D0            678      MOVE.L #color5, d1
00001654  4EB9 00001798            679      jsr setPenColour
0000165A  223C 00201808            680      move.l #color1, d1
00001660  4EB9 000017A0            681      jsr setFillColour
00001666                           682      
00001666                           683      ; Set X, Y, Width and Height
00001666  2238 11E2                684      MOVE.L  playerX,   D1          ; X
0000166A  2438 11E6                685      MOVE.L  playerY,   D2          ; Y
0000166E  2638 11E2                686      MOVE.L  playerX,   D3
00001672  5083                     687      ADD.L   #playerW,   D3      ; Width
00001674  2838 11E6                688      MOVE.L  playerY,   D4 
00001678  5084                     689      ADD.L   #playerH,   D4      ; Height
0000167A                           690      
0000167A                           691      ; Draw Player
0000167A  4EB9 000017B8            692      jsr drawRect
00001680  4E75                     693      RTS
00001682                           694  
00001682                           695  drawEnemies:
00001682  4EB9 00001D2C            696      jsr getEnemy1
00001688  4EB9 000016B2            697      jsr drawEnemy
0000168E  4EB9 00001D3A            698      jsr getEnemy2
00001694  4EB9 000016B2            699      jsr drawEnemy
0000169A  4EB9 00001D48            700      jsr getEnemy3
000016A0  4EB9 000016B2            701      jsr drawEnemy
000016A6  4EB9 00001D56            702      jsr getEnemy4
000016AC  4EB9 000016B2            703      jsr drawEnemy
000016B2                           704  
000016B2                           705  drawEnemy:
000016B2                           706      ; set colour
000016B2  223C 00AFE5D0            707      move.l #color5, d1
000016B8  4EB9 00001798            708      jsr setPenColour
000016BE  223C 00463EBD            709      move.l #colorRed, d1
000016C4  4EB9 000017A0            710      jsr setFillColour
000016CA                           711  
000016CA                           712      ; set rect values
000016CA  2239 000018E8            713      move.l enemyX, d1
000016D0  2439 000018EC            714      move.l enemyY, d2
000016D6  2639 000018E8            715      move.l enemyX, d3
000016DC  2839 000018EC            716      move.l enemyY, d4
000016E2  0683 00000010            717      add.l #enemyW, d3
000016E8  0684 0000000C            718      add.l #enemyH, d4
000016EE                           719  
000016EE  4EB9 000017B8            720      jsr drawRect
000016F4  4E75                     721      rts
000016F6                           722  
000016F6                           723  drawCell:
000016F6                           724      ;---------------draw main cell
000016F6                           725      ; change colours
000016F6  223C 007AC687            726      move.l #color4, d1
000016FC  4EB9 00001798            727      jsr setPenColour
00001702  223C 00494320            728      move.l #color2, d1
00001708  4EB9 000017A0            729      jsr setFillColour
0000170E                           730  
0000170E  2238 13E6                731      move.l celltlX, d1
00001712  2438 13EA                732      move.l celltlY, d2
00001716  2638 13EE                733      move.l cellbrX, d3
0000171A  2838 13F2                734      move.l cellbrY, d4
0000171E  4EB9 000017B8            735      jsr drawRect
00001724                           736  
00001724                           737      ; change colours
00001724  223C 007AC687            738      move.l #color4, d1
0000172A  4EB9 00001798            739      jsr setPenColour
00001730  223C 0056864B            740      move.l #color3, d1
00001736  4EB9 000017A0            741      jsr setFillColour
0000173C                           742      ;---------------draw zone 1
0000173C  2238 13F6                743      move.l zone1tlX, d1
00001740  2438 13FA                744      move.l zone1tlY, d2
00001744  2638 13FE                745      move.l zone1brX, d3
00001748  2838 1402                746      move.l zone1brY, d4
0000174C  4EB9 000017B8            747      jsr drawRect
00001752                           748  
00001752                           749      ;---------------draw zone 2
00001752  2238 1406                750      move.l zone2tlX, d1
00001756  2438 140A                751      move.l zone2tlY, d2
0000175A  2638 140E                752      move.l zone2brX, d3
0000175E  2838 1412                753      move.l zone2brY, d4
00001762  4EB9 000017B8            754      jsr drawRect
00001768                           755      
00001768                           756      ;---------------draw zone 3
00001768  2238 1416                757      move.l zone3tlX, d1
0000176C  2438 141A                758      move.l zone3tlY, d2
00001770  2638 141E                759      move.l zone3brX, d3
00001774  2838 1422                760      move.l zone3brY, d4
00001778  4EB9 000017B8            761      jsr drawRect
0000177E                           762  
0000177E                           763      ;---------------draw zone 4
0000177E  2238 1426                764      move.l zone4tlX, d1
00001782  2438 142A                765      move.l zone4tlY, d2
00001786  2638 142E                766      move.l zone4brX, d3
0000178A  2838 1432                767      move.l zone4brY, d4
0000178E  4EB9 000017B8            768      jsr drawRect
00001794                           769  
00001794                           770      ; done
00001794  4E75                     771      rts
00001796                           772  
00001796                           773  endDraw:
00001796  4E75                     774      rts
00001798                           775  
00001798                           776  setPenColour:
00001798  103C 0050                777      move.b #tcPenClr, d0
0000179C  4E4F                     778      trap #15
0000179E  4E75                     779      rts
000017A0                           780  
000017A0                           781  setFillColour:
000017A0  103C 0051                782      move.b #tcPenFil, d0
000017A4  4E4F                     783      trap #15
000017A6  4E75                     784      rts
000017A8                           785  
000017A8                           786  print:
000017A8  303C 000D                787      move #13, d0
000017AC  4E4F                     788      trap #15
000017AE  4E75                     789      rts
000017B0                           790  
000017B0                           791  printNum:
000017B0  303C 0003                792      move #3, d0
000017B4  4E4F                     793      trap #15
000017B6  4E75                     794      rts
000017B8                           795  
000017B8                           796  drawRect:
000017B8                           797      ; if not follow, draw like normal
000017B8  4A79 00001DE2            798      tst.w isFollow
000017BE  6700 003A                799      beq drawUiRect
000017C2                           800  
000017C2                           801      ; offset by camera
000017C2  92B9 00001DD8            802      sub.l cameraX, d1
000017C8  94B9 00001DDC            803      sub.l cameraY, d2
000017CE  96B9 00001DD8            804      sub.l cameraX, d3
000017D4  98B9 00001DDC            805      sub.l cameraY, d4
000017DA                           806      ; zoom by camera
000017DA  C2F9 00001DE0            807      mulu cameraZoom, d1
000017E0  C4F9 00001DE0            808      mulu cameraZoom, d2
000017E6  C6F9 00001DE0            809      mulu cameraZoom, d3
000017EC  C8F9 00001DE0            810      mulu cameraZoom, d4
000017F2                           811  
000017F2                           812      ; draw rect function
000017F2  103C 0057                813      MOVE.B  #tcRect, d0
000017F6  4E4F                     814      TRAP    #15
000017F8  4E75                     815      rts
000017FA                           816  
000017FA                           817  drawUiRect:
000017FA  103C 0057                818      MOVE.B  #tcRect, d0
000017FE  4E4F                     819      TRAP    #15
00001800  4E75                     820      rts
00001802                           821  
00001802                           822  setCursor:
00001802  103C 000B                823      MOVE.B  #tcCrs, d0
00001806  4E4F                     824      TRAP    #15
00001808  4E75                     825      rts
0000180A                           826  
0000180A                           827  toggleFullScreen:
0000180A  4281                     828      clr.l d1
0000180C  3239 00001852            829      move.w isFullScreen, d1
00001812  0C01 0001                830      cmpi.b #1, d1
00001816  6700 000E                831      beq goFullScreen
0000181A                           832  
0000181A                           833      ; go windowed
0000181A  7201                     834      move.l #1, d1
0000181C  4EB9 00001838            835      jsr setFullScreen
00001822                           836  
00001822  6000 000E                837      bra endToggleFullScreen
00001826                           838  goFullScreen:
00001826  5201                     839      add.b #1, d1
00001828  4EB9 00001838            840      jsr setFullScreen
0000182E  6000 0002                841      bra endToggleFullScreen
00001832                           842  endToggleFullScreen:
00001832  33C1 00001852            843      move.w d1, isFullScreen
00001838                           844  
00001838                           845  setFullScreen:
00001838  303C 0021                846      move #tcFullScreen, d0
0000183C  4E4F                     847      trap #15
0000183E  4E75                     848      rts
00001840                           849  
00001840                           850  ; INSTANT NEW LINE
00001840                           851  crlf:
00001840  303C 0006                852      move #6, d0
00001844  323C 000D                853      move #13, d1
00001848  4E4F                     854      trap #15
0000184A  323C 000A                855      move #10, d1
0000184E  4E4F                     856      trap #15
00001850  4E75                     857      rts
00001852                           858  
00001852= 0001                     859  isFullScreen dc.w 1
00001854                           860  
00001854= 47 41 4D 45 20 4F ...    861  endMsg dc.b 'GAME OVER', 0
0000185E= 50 4F 49 4E 54 53 ...    862  pointsMsg dc.b 'POINTS:', 0
00001866= 48 45 41 4C 54 48 ...    863  healthMsg dc.b 'HEALTH:', 0
0000186E                           864  
0000186E                           865  healthTlX ds.l 01
00001872                           866  healthTlY ds.l 01
00001876                           867  healthBrX ds.l 01
0000187A                           868  healthBrY ds.l 01
0000187E                           869  
0000187E                           870  currentHpX ds.l 01
00001882                           871  
00001882                           872  ; health stuff
00001882= 0050                     873  healthBarOffsetX dc.w 80
00001884= 0010                     874  healthBarLocY dc.w 16
00001886                           875  
00001886= 01                       876  healthRow dc.b 01
00001887= 03                       877  pointsRow dc.b 03
00001888                           878  
00001888                           879  ; pause stuff
00001888= 0000006E                 880  pauseHalfWidth dc.l 110
0000188C= 00000082                 881  pauseHalfHeight dc.l 130
00001890= 47 41 4D 45 20 50 ...    882  pauseMsg dc.b 'GAME PAUSED!', 0
0000189D                           883  
0000189D                           884  ; move to level stuff
0000189D= 41 4E 20 41 4E 54 ...    885  attackMsg1 dc.b 'AN ANTHILL IS UNDER ATTACK!',0
000018B9= 4D 4F 56 45 20 54 ...    886  attackMsg2 dc.b 'MOVE TOWARD IT AND PRESS "ENTER" TO DEFEND IT!',0
000018E8                           887  
000018E8                           888  -------------------- end include --------------------
000018E8                           889   include "map/enemies.x68"
000018E8                           890  ; this file contains enemy data
000018E8                           891  
000018E8                           892  ; variable data for current enemy
000018E8                           893  enemyX ds.l 01
000018EC                           894  enemyY ds.l 01
000018F0                           895  
000018F0                           896  ; enemy initialization: set position, health
000018F0                           897  ; 3 longs require 3 mem locations
000018F0                           898  ; call srts, then take values outside them
000018F0                           899  
000018F0                           900  ; GENERAL INIT/PROCESS
000018F0                           901  ; before these srts are called, enemyDir is given a value
000018F0                           902  ; 0: tl
000018F0                           903  ; 1: tr
000018F0                           904  ; 2: br
000018F0                           905  ; 3: bl
000018F0                           906  
000018F0                           907  initEnemy:
000018F0                           908      ; move screen w and h into regs
000018F0  4282                     909      clr.l d2 ; put screenw here
000018F2  4283                     910      clr.l d3 ; put screenh here
000018F4  3438 11FE                911      move.w screenW, d2
000018F8  3638 1200                912      move.w screenH, d3
000018FC                           913  
000018FC                           914      ; init based on which direction
000018FC  4A79 00001DCE            915      tst enemyDir
00001902  6700 0094                916      beq initEnemytl
00001906                           917  
00001906  0C79 0001 00001DCE       918      cmpi #1, enemyDir
0000190E  6700 00C4                919      beq initEnemytr
00001912                           920  
00001912  0C79 0002 00001DCE       921      cmpi #2, enemyDir
0000191A  6700 00F0                922      beq initEnemybr
0000191E                           923  
0000191E  0C79 0003 00001DCE       924      cmpi #3, enemyDir
00001926  6700 011C                925      beq initEnemyBl
0000192A                           926  
0000192A                           927      ; no valid direction placed. just put enemy at the top
0000192A  6000 006C                928      bra initEnemyTl
0000192E                           929  
0000192E                           930  processEnemy:
0000192E                           931  
0000192E                           932      ; process based on direction
0000192E  4A79 00001DCE            933      tst enemyDir
00001934  6700 007A                934      beq processEnemyTl
00001938  0C79 0001 00001DCE       935      cmpi #1, enemyDir
00001940  6700 00A6                936      beq processEnemytr
00001944  0C79 0002 00001DCE       937      cmpi #2, enemyDir
0000194C  6700 00CE                938      beq processEnemybr
00001950  0C79 0003 00001DCE       939      cmpi #3, enemyDir
00001958  6700 00FE                940      beq processEnemyBl
0000195C                           941  
0000195C                           942      ; no valid direction placed. just put enemy at the top
0000195C  6000 0052                943      bra processEnemyTl
00001960                           944  
00001960                           945  enemyColCheck:
00001960  3439 00001DCE            946      move.w enemyDir, d2
00001966                           947      ; colCheck based on direction
00001966  0C79 0000 00001DCE       948      cmpi #0, enemyDir
0000196E  6700 0110                949      beq enemyLeftColCheck
00001972                           950  
00001972  0C79 0001 00001DCE       951      cmpi #1, enemyDir
0000197A  6700 0112                952      beq enemyRightColCheck
0000197E                           953  
0000197E  0C79 0002 00001DCE       954      cmpi #2, enemyDir
00001986  6700 0106                955      beq enemyRightColCheck
0000198A                           956  
0000198A  0C79 0003 00001DCE       957      cmpi #3, enemyDir
00001992  6700 00EC                958      beq enemyLeftColCheck
00001996                           959  
00001996                           960      ; no valid direction. nothing we can do atp
00001996  4E75                     961      rts
00001998                           962  
00001998                           963  ;-------------------------------ENEMY TOP
00001998                           964  initEnemytl:
00001998  21FC 00000000 18EC       965      move.l #0, enemyY
000019A0  21FC 00000000 18E8       966      move.l #0, enemyX
000019A8  4EB9 00001AAC            967      jsr endInitEnemy
000019AE  4E75                     968      rts
000019B0                           969  processEnemyTl:
000019B0  3A39 00001AB8            970      move.w enemyTime, d5
000019B6  4EB9 00001AC2            971      jsr checkIncrement
000019BC  6600 00EA                972      bne endProcess
000019C0                           973  
000019C0  06B8 00000001 18EC       974      add.l #enemyYmove, enemyY
000019C8  52B8 18E8                975      add.l #1, enemyX
000019CC                           976  
000019CC  4EB8 1960                977      jsr enemyColCheck
000019D0                           978  
000019D0  6000 00D6                979      bra endProcess
000019D4                           980  
000019D4                           981  ;-------------------------------ENEMY LEFT
000019D4                           982  initEnemytr:
000019D4  21C2 18E8                983      move.l d2, enemyX
000019D8  21FC 00000000 18EC       984      move.l #0, enemyY
000019E0  4EB9 00001AAC            985      jsr endInitEnemy
000019E6  4E75                     986      rts
000019E8                           987  processEnemytr:
000019E8  3A39 00001AB8            988      move.w enemyTime, d5
000019EE  4EB9 00001AC2            989      jsr checkIncrement
000019F4  6600 00B2                990      bne endProcess
000019F8                           991  
000019F8  06B8 00000001 18EC       992      add.l #enemyYmove, enemyY
00001A00  53B8 18E8                993      sub.l #1, enemyX
00001A04                           994  
00001A04  4EB8 1960                995      jsr enemyColCheck
00001A08                           996  
00001A08  6000 009E                997      bra endProcess
00001A0C                           998  
00001A0C                           999  
00001A0C                          1000  
00001A0C                          1001  ;-------------------------------ENEMY RIGHT
00001A0C                          1002  initEnemybr:
00001A0C  21C2 18E8               1003      move.l d2, enemyX
00001A10                          1004  
00001A10  21C3 18EC               1005      move.l d3, enemyY
00001A14                          1006  
00001A14  4EB9 00001AAC           1007      jsr endInitEnemy
00001A1A  4E75                    1008      rts
00001A1C                          1009  processEnemybr:
00001A1C  3A39 00001AB8           1010      move.w enemyTime, d5
00001A22  4EB9 00001AC2           1011      jsr checkIncrement
00001A28  6600 007E               1012      bne endProcess
00001A2C                          1013  
00001A2C  04B8 00000001 18EC      1014      sub.l #enemyYmove, enemyY
00001A34  04B8 00000002 18E8      1015      sub.l #enemyXmove, enemyX
00001A3C                          1016  
00001A3C  4EB8 1960               1017      jsr enemyColCheck
00001A40                          1018  
00001A40  6000 0066               1019      bra endProcess
00001A44                          1020  
00001A44                          1021  ;-------------------------------ENEMY BOTTOM
00001A44                          1022  initEnemyBl:
00001A44  21C3 18EC               1023      move.l d3, enemyY
00001A48                          1024  
00001A48  21FC 00000000 18E8      1025      move.l #0, enemyX
00001A50                          1026  
00001A50  4EB9 00001AAC           1027      jsr endInitEnemy
00001A56  4E75                    1028      rts
00001A58                          1029  processEnemyBl:
00001A58  3A39 00001AB8           1030      move.w enemyTime, d5
00001A5E  4EB9 00001AC2           1031      jsr checkIncrement
00001A64  6600 0042               1032      bne endProcess
00001A68                          1033  
00001A68  04B8 00000001 18EC      1034      sub.l #enemyYmove, enemyY
00001A70  06B8 00000002 18E8      1035      add.l #enemyXmove, enemyX
00001A78                          1036  
00001A78  4EB8 1960               1037      jsr enemyColCheck
00001A7C                          1038  
00001A7C  6000 002A               1039      bra endProcess
00001A80                          1040  
00001A80                          1041  ;----------COLLISION
00001A80                          1042  enemyLeftColCheck:
00001A80  2438 13E6               1043      move.l celltlX, d2
00001A84                          1044      ;sub.l #enemyW, d2
00001A84  B4B8 18E8               1045      cmp.l enemyX, d2
00001A88  6F00 0018               1046      ble enemyCollide
00001A8C  4E75                    1047      rts
00001A8E                          1048  
00001A8E                          1049  enemyRightColCheck:
00001A8E  2438 13EE               1050      move.l cellbrx, d2
00001A92  0482 00000010           1051      sub.l #enemyw, d2
00001A98  B4B8 18E8               1052      cmp.l enemyX, d2
00001A9C  6C00 0004               1053      bge enemyCollide
00001AA0  4E75                    1054      rts
00001AA2                          1055  
00001AA2                          1056  ;---------------OTHER STUFF
00001AA2                          1057  enemyCollide: ; enemy successfully reached the base
00001AA2  4EB8 18F0               1058      jsr initEnemy
00001AA6  4E75                    1059      rts
00001AA8                          1060  
00001AA8                          1061  endProcess:
00001AA8  4E75                    1062      rts
00001AAA                          1063  endCollide:
00001AAA  4E75                    1064      rts
00001AAC                          1065  endInitEnemy:
00001AAC  5DB8 18EC               1066      sub.l #enemyHalfH, enemyY
00001AB0  51B8 18E8               1067      sub.l #enemyHalfW, enemyX
00001AB4  4E75                    1068      rts
00001AB6                          1069  
00001AB6                          1070  -------------------- end include --------------------
00001AB6                          1071   include "map/timings.x68"
00001AB6                          1072  ; this file contains timing stuff
00001AB6                          1073  
00001AB6= 000A                    1074  playerTime dc.w 10
00001AB8= 001E                    1075  enemyTime dc.w 30
00001ABA= 0028                    1076  healTime dc.w 40
00001ABC= 07D0                    1077  enemySpawnTimer dc.w 2000
00001ABE                          1078  
00001ABE                          1079  increment: ; D6 permanently used up
00001ABE  5246                    1080      add.w #1, d6
00001AC0  4E75                    1081      rts
00001AC2                          1082  
00001AC2                          1083  checkIncrement: ; d5 has been given check value
00001AC2  3806                    1084      move.w d6, d4 ; dont wanna mess up d6
00001AC4  88C5                    1085      divu d5, d4
00001AC6  383C 0000               1086      move.w #0, d4
00001ACA  4844                    1087      swap d4
00001ACC                          1088      ; d4 low word contains modulo
00001ACC                          1089      ; compare w/ 0
00001ACC  4A44                    1090      tst d4
00001ACE                          1091      ; thingy contains whether they were equal
00001ACE  4E75                    1092      rts
00001ACE  4E75                    1093  -------------------- end include --------------------
00001AD0                          1094   include "map/enemyManager.x68"
00001AD0                          1095  ;ENEMY 1
00001AD0= 00000000                1096  enemy1x dc.l 00
00001AD4= 00000000                1097  enemy1y dc.l 00
00001AD8                          1098  ;ENEMY 2
00001AD8= 00000032                1099  enemy2x dc.l 50
00001ADC= 00000032                1100  enemy2y dc.l 50
00001AE0                          1101  ;ENEMY 3
00001AE0= 00000064                1102  enemy3x dc.l 100
00001AE4= 00000064                1103  enemy3y dc.l 100
00001AE8                          1104  ;ENEMY 4
00001AE8= 00000096                1105  enemy4x dc.l 150
00001AEC= 00000096                1106  enemy4y dc.l 150
00001AF0                          1107  
00001AF0= 01                      1108  enemyIndex dc.b 1
00001AF1                          1109  
00001AF1                          1110  ; current enemy spawn
00001AF2                          1111  currentSpawnX ds.l 01
00001AF6                          1112  currentSpawnY ds.l 01
00001AFA                          1113  
00001AFA                          1114  initAllEnemies:
00001AFA  42B8 1AD0               1115      clr.l enemy1x
00001AFE  42B8 1AD4               1116      clr.l enemy1y
00001B02                          1117  
00001B02  42B8 1AD8               1118      clr.l enemy2x
00001B06  42B8 1ADC               1119      clr.l enemy2y
00001B0A                          1120  
00001B0A  42B8 1AE0               1121      clr.l enemy3x
00001B0E  42B8 1AE4               1122      clr.l enemy3y
00001B12                          1123  
00001B12  42B8 1AE8               1124      clr.l enemy4x
00001B16  42B8 1AEC               1125      clr.l enemy4y
00001B1A                          1126  
00001B1A  4282                    1127      clr.l d2 ; put screenw here
00001B1C  4283                    1128      clr.l d3 ; put screenh here
00001B1E  3438 11FE               1129      move.w screenW, d2
00001B22  3638 1200               1130      move.w screenH, d3
00001B26                          1131  
00001B26  0C79 0000 00001DCE      1132      cmpi.w #0, enemyDir
00001B2E  6700 0028               1133      beq initAlltl
00001B32  0C79 0001 00001DCE      1134      cmpi.w #1, enemyDir
00001B3A  6700 005E               1135      beq initAlltr
00001B3E  0C79 0002 00001DCE      1136      cmpi.w #2, enemyDir
00001B46  6700 00A4               1137      beq initAllbr
00001B4A  0C79 0003 00001DCE      1138      cmpi.w #3, enemyDir
00001B52  6700 0112               1139      beq initAllbl
00001B56  4E75                    1140      rts
00001B58                          1141  
00001B58                          1142  initAlltl: ; top left enemies
00001B58                          1143      ; no need to clear values
00001B58                          1144  
00001B58                          1145      ; add values
00001B58  06B8 00000000 1AD0      1146      add.l #enemy1offset, enemy1x
00001B60  06B8 00000000 1AD4      1147      add.l #enemy1offset, enemy1y
00001B68                          1148  
00001B68  06B8 00000032 1AD8      1149      add.l #enemy2offset, enemy2x
00001B70  06B8 00000032 1ADC      1150      add.l #enemy2offset, enemy2y
00001B78                          1151  
00001B78  06B8 00000064 1AE0      1152      add.l #enemy3offset, enemy3x
00001B80  06B8 00000064 1AE4      1153      add.l #enemy3offset, enemy3y
00001B88                          1154  
00001B88  06B8 00000096 1AE8      1155      add.l #enemy4offset, enemy4x
00001B90  06B8 00000096 1AEC      1156      add.l #enemy4offset, enemy4y
00001B98  4E75                    1157      rts
00001B9A                          1158  initAlltr:
00001B9A  21C2 1AD0               1159      move.l d2, enemy1x
00001B9E                          1160      ;clr.l enemy1y
00001B9E                          1161  
00001B9E  21C2 1AD8               1162      move.l d2, enemy2x
00001BA2                          1163      ;clr.l enemy2y
00001BA2                          1164  
00001BA2  21C2 1AE0               1165      move.l d2, enemy3x
00001BA6                          1166      ;clr.l enemy3y
00001BA6                          1167  
00001BA6  21C2 1AE8               1168      move.l d2, enemy4x
00001BAA                          1169      ;clr.l enemy4y
00001BAA                          1170  
00001BAA                          1171      ; add values
00001BAA  04B8 00000000 1AD0      1172      sub.l #enemy1offset, enemy1x
00001BB2  06B8 00000000 1AD4      1173      add.l #enemy1offset, enemy1y
00001BBA                          1174  
00001BBA  04B8 00000032 1AD8      1175      sub.l #enemy2offset, enemy2x
00001BC2  06B8 00000032 1ADC      1176      add.l #enemy2offset, enemy2y
00001BCA                          1177  
00001BCA  04B8 00000064 1AE0      1178      sub.l #enemy3offset, enemy3x
00001BD2  06B8 00000064 1AE4      1179      add.l #enemy3offset, enemy3y
00001BDA                          1180  
00001BDA  04B8 00000096 1AE8      1181      sub.l #enemy4offset, enemy4x
00001BE2  06B8 00000096 1AEC      1182      add.l #enemy4offset, enemy4y
00001BEA  4E75                    1183      rts
00001BEC                          1184  initAllbr: ; enemies on the bottom need different offsets
00001BEC  21C2 1AD0               1185      move.l d2, enemy1x
00001BF0  21C3 1AD4               1186      move.l d3, enemy1y
00001BF4                          1187  
00001BF4  21C2 1AD8               1188      move.l d2, enemy2x
00001BF8  21C3 1ADC               1189      move.l d3, enemy2y
00001BFC                          1190  
00001BFC  21C2 1AE0               1191      move.l d2, enemy3x
00001C00  21C3 1AE4               1192      move.l d3, enemy3y
00001C04                          1193  
00001C04  21C2 1AE8               1194      move.l d2, enemy4x
00001C08  21C3 1AEC               1195      move.l d3, enemy4y
00001C0C                          1196  
00001C0C                          1197      ; move yOffsets into d2, and half it
00001C0C                          1198  
00001C0C                          1199      ; add values
00001C0C  243C 00000000           1200      move.l #enemy1offset, d2
00001C12  84FC 0002               1201      divu #2, d2
00001C16  04B8 00000000 1AD0      1202      sub.l #enemy1offset, enemy1x
00001C1E  95B8 1AD4               1203      sub.l d2, enemy1y
00001C22                          1204  
00001C22  243C 00000032           1205      move.l #enemy2offset, d2
00001C28  84FC 0002               1206      divu #2, d2
00001C2C  04B8 00000032 1AD8      1207      sub.l #enemy2offset, enemy2x
00001C34  95B8 1ADC               1208      sub.l d2, enemy2y
00001C38                          1209  
00001C38  243C 00000064           1210      move.l #enemy3offset, d2
00001C3E  84FC 0002               1211      divu #2, d2
00001C42  04B8 00000064 1AE0      1212      sub.l #enemy3offset, enemy3x
00001C4A  95B8 1AE4               1213      sub.l d2, enemy3y
00001C4E                          1214  
00001C4E  243C 00000096           1215      move.l #enemy4offset, d2
00001C54  84FC 0002               1216      divu #2, d2
00001C58  04B8 00000096 1AE8      1217      sub.l #enemy4offset, enemy4x
00001C60  95B8 1AEC               1218      sub.l d2, enemy4y
00001C64  4E75                    1219      rts
00001C66                          1220  initAllBl:
00001C66                          1221      ;clr.l enemy1x
00001C66  21C3 1AD4               1222      move.l d3, enemy1y
00001C6A                          1223  
00001C6A                          1224      ;clr.l enemy2x
00001C6A  21C3 1ADC               1225      move.l d3, enemy2y
00001C6E                          1226  
00001C6E                          1227      ;clr.l enemy3x
00001C6E  21C3 1AE4               1228      move.l d3, enemy3y
00001C72                          1229  
00001C72                          1230      ;clr.l enemy4x
00001C72  21C3 1AEC               1231      move.l d3, enemy4y
00001C76                          1232  
00001C76                          1233      ; add values
00001C76  243C 00000000           1234      move.l #enemy1offset, d2
00001C7C  84FC 0002               1235      divu #2, d2
00001C80  06B8 00000000 1AD0      1236      add.l #enemy1offset, enemy1x
00001C88  95B8 1AD4               1237      sub.l d2, enemy1y
00001C8C                          1238  
00001C8C  243C 00000032           1239      move.l #enemy2offset, d2
00001C92  84FC 0002               1240      divu #2, d2
00001C96  06B8 00000032 1AD8      1241      add.l #enemy2offset, enemy2x
00001C9E  95B8 1ADC               1242      sub.l d2, enemy2y
00001CA2                          1243  
00001CA2  243C 00000064           1244      move.l #enemy3offset, d2
00001CA8  84FC 0002               1245      divu #2, d2
00001CAC  06B8 00000064 1AE0      1246      add.l #enemy3offset, enemy3x
00001CB4  95B8 1AE4               1247      sub.l d2, enemy3y
00001CB8                          1248  
00001CB8  243C 00000096           1249      move.l #enemy4offset, d2
00001CBE  84FC 0002               1250      divu #2, d2
00001CC2  06B8 00000096 1AE8      1251      add.l #enemy4offset, enemy4x
00001CCA  95B8 1AEC               1252      sub.l d2, enemy4y
00001CCE  4E75                    1253      rts
00001CD0                          1254  
00001CD0                          1255  processEnemies:
00001CD0  31FC 0001 1AF0          1256      move.w #1, enemyIndex
00001CD6  6000 0002               1257      bra processEnemiesLoop
00001CDA                          1258  processEnemiesLoop:
00001CDA  4EB9 00001CFA           1259      jsr getCurrentEnemy
00001CE0  4EB8 192E               1260      jsr processEnemy
00001CE4  4EB9 00001D64           1261      jsr saveCurrentEnemy
00001CEA  5278 1AF0               1262      add.w #1, enemyIndex
00001CEE                          1263  
00001CEE  3438 1AF0               1264      move.w enemyIndex, d2
00001CF2  0C42 0005               1265      cmpi.w #5, d2
00001CF6  66E2                    1266      bne processEnemiesLoop
00001CF8  4E75                    1267      rts
00001CFA                          1268  
00001CFA                          1269  
00001CFA                          1270  getCurrentEnemy:
00001CFA  3438 1AF0               1271      move.w enemyIndex, d2
00001CFE  0C42 0001               1272      cmpi.w #1, d2
00001D02  6700 0028               1273      beq getEnemy1
00001D06                          1274  
00001D06  3438 1AF0               1275      move.w enemyIndex, d2
00001D0A  0C42 0002               1276      cmpi.w #2, d2
00001D0E  6700 002A               1277      beq getEnemy2
00001D12                          1278  
00001D12  3438 1AF0               1279      move.w enemyIndex, d2
00001D16  0C42 0003               1280      cmpi.w #3, d2
00001D1A  6700 002C               1281      beq getEnemy3
00001D1E                          1282  
00001D1E  3438 1AF0               1283      move.w enemyIndex, d2
00001D22  0C42 0004               1284      cmpi.w #4, d2
00001D26  6700 002E               1285      beq getEnemy4
00001D2A  4E75                    1286      rts
00001D2C                          1287  getEnemy1:
00001D2C  21F8 1AD0 18E8          1288      move.l enemy1x, enemyX
00001D32  21F8 1AD4 18EC          1289      move.l enemy1y, enemyY
00001D38  4E75                    1290      rts
00001D3A                          1291  getEnemy2:
00001D3A  21F8 1AD8 18E8          1292      move.l enemy2x, enemyX
00001D40  21F8 1ADC 18EC          1293      move.l enemy2y, enemyY
00001D46  4E75                    1294      rts
00001D48                          1295  getEnemy3:
00001D48  21F8 1AE0 18E8          1296      move.l enemy3x, enemyX
00001D4E  21F8 1AE4 18EC          1297      move.l enemy3y, enemyY
00001D54  4E75                    1298      rts
00001D56                          1299  getEnemy4:
00001D56  21F8 1AE8 18E8          1300      move.l enemy4x, enemyX
00001D5C  21F8 1AEC 18EC          1301      move.l enemy4y, enemyY
00001D62  4E75                    1302      rts
00001D64                          1303  
00001D64                          1304  saveCurrentEnemy:
00001D64  3438 1AF0               1305      move.w enemyIndex, d2
00001D68  0C42 0001               1306      cmpi.w #1, d2
00001D6C  6700 0028               1307      beq saveEnemy1
00001D70                          1308  
00001D70  3438 1AF0               1309      move.w enemyIndex, d2
00001D74  0C42 0002               1310      cmpi.w #2, d2
00001D78  6700 002A               1311      beq saveEnemy2
00001D7C                          1312  
00001D7C  3438 1AF0               1313      move.w enemyIndex, d2
00001D80  0C42 0003               1314      cmpi.w #3, d2
00001D84  6700 002C               1315      beq saveEnemy3
00001D88                          1316  
00001D88  3438 1AF0               1317      move.w enemyIndex, d2
00001D8C  0C42 0004               1318      cmpi.w #4, d2
00001D90  6700 002E               1319      beq saveEnemy4
00001D94  4E75                    1320      rts
00001D96                          1321  
00001D96                          1322  saveEnemy1:
00001D96  21F8 18E8 1AD0          1323      move.l enemyx, enemy1X
00001D9C  21F8 18EC 1AD4          1324      move.l enemyy, enemy1Y
00001DA2  4E75                    1325      rts
00001DA4                          1326  saveEnemy2:
00001DA4  21F8 18E8 1AD8          1327      move.l enemyx, enemy2X
00001DAA  21F8 18EC 1ADC          1328      move.l enemyy, enemy2Y
00001DB0  4E75                    1329      rts
00001DB2                          1330  saveEnemy3:
00001DB2  21F8 18E8 1AE0          1331      move.l enemyx, enemy3X
00001DB8  21F8 18EC 1AE4          1332      move.l enemyy, enemy3Y
00001DBE  4E75                    1333      rts
00001DC0                          1334  saveEnemy4:
00001DC0  21F8 18E8 1AE8          1335      move.l enemyx, enemy4X
00001DC6  21F8 18EC 1AEC          1336      move.l enemyy, enemy4Y
00001DCC  4E75                    1337      rts
00001DCE                          1338  
00001DCE                          1339  ; current enemy dir
00001DCE= 0003                    1340  enemyDir dc.w 0003
00001DD0                          1341  
00001DD0                          1342  ; ENEMY START POINTS
00001DD0  =00000000               1343  enemy1offset equ 0
00001DD0  =00000032               1344  enemy2offset equ 50
00001DD0  =00000064               1345  enemy3offset equ 100
00001DD0  =00000096               1346  enemy4offset equ 150
00001DD0                          1347  
00001DD0  =00000002               1348  enemyXmove equ 2
00001DD0  =00000001               1349  enemyYmove equ 1
00001DD0  =00000001               1350  -------------------- end include --------------------
00001DD0                          1351   include "map/camera.x68"
00001DD0                          1352  ; this file contains camera information
00001DD0                          1353  
00001DD0= 000000A0                1354  cameraOffsetX dc.l 160
00001DD4= 00000078                1355  cameraOffsetY dc.l 120
00001DD8= 00000000                1356  cameraX dc.l 0
00001DDC= 00000000                1357  cameraY dc.l 0
00001DE0= 0002                    1358  cameraZoom dc.w 02
00001DE2                          1359  
00001DE2= 0000                    1360  isFollow dc.w 0
00001DE4                          1361  
00001DE4                          1362  followCam:
00001DE4  4A78 1DE2               1363      tst isFollow
00001DE8  6700 001C               1364      beq endFollow
00001DEC                          1365  
00001DEC  2438 11E2               1366      move.l playerX, d2
00001DF0  2638 11E6               1367      move.l playerY, d3
00001DF4  94B8 1DD0               1368      sub.l cameraOffsetX, d2
00001DF8  96B8 1DD4               1369      sub.l cameraOffsetY, d3
00001DFC                          1370  
00001DFC  21C2 1DD8               1371      move.l d2, cameraX
00001E00  21C3 1DDC               1372      move.l d3, cameraY
00001E04  4E75                    1373      RTS
00001E06                          1374  endFollow:
00001E06  4E75                    1375      rts
00001E08                          1376  
00001E08                          1377  toggleFollow:
00001E08  3438 1DE2               1378      move.w isFollow, d2
00001E0C  4A42                    1379      tst.w d2
00001E0E  6700 000A               1380      beq turnOnFollow
00001E12  31FC 0000 1DE2          1381      move.w #0, isFollow
00001E18  4E75                    1382      rts
00001E1A                          1383  
00001E1A                          1384  turnOnFollow:
00001E1A  31FC 0001 1DE2          1385      move.w #1, isFollow
00001E20  4E75                    1386      rts
00001E20  4E75                    1387  -------------------- end include --------------------
00001E22                          1388   include "map/input.x68"
00001E22= 0000                    1389  lvlType dc.w 0
00001E24                          1390  
00001E24                          1391  ; types:
00001E24                          1392  ; 0: menu
00001E24                          1393  ; 1: map
00001E24                          1394  ; 2: run
00001E24                          1395  
00001E24                          1396  testinput:
00001E24                          1397      ; getting previous key
00001E24  11F8 11D8 11DC          1398      move.b currentkey, lastkey
00001E2A                          1399  
00001E2A                          1400      ; set d1 to $0000 0000
00001E2A  7200                    1401      move.l #0, d1
00001E2C                          1402  
00001E2C                          1403      ; put "get input" code into d0
00001E2C  103C 0013               1404      move.b #tcinp, d0
00001E30  4E4F                    1405      trap #15
00001E32  11C1 11D8               1406      move.b d1, currentkey
00001E36  4E4F                    1407      trap #15
00001E38                          1408      
00001E38                          1409      ; AT THIS POINT, CURRENT KEY CONTAINS THE CURRENT/LAST KEY PRESSED,
00001E38                          1410      ; AND D1 CONTAINS WHETHER OR NOT IT IS STILL PRESSED
00001E38                          1411      
00001E38                          1412      ; test if no input
00001E38  0C01 0000               1413      cmpi.b #0, d1
00001E3C  6700 0032               1414      beq noinput     ; if no input, move to noinput
00001E40                          1415      
00001E40  4EB9 00001E80           1416      jsr commonInput ; happens in any level
00001E46                          1417  
00001E46                          1418  
00001E46  4A78 1E22               1419      TST.w lvlType
00001E4A                          1420      IF <EQ> THEN
00001E4E  6100 004E               1421          BSR menuInput ; happens in menu
00001E52                          1422      endi
00001E52  0C78 0001 1E22          1423      cmp.w #1, lvlType
00001E58                          1424      IF <EQ> THEN
00001E5C  6100 004C               1425          BSR mapInput ; happens in map
00001E60                          1426      endi
00001E60  0C78 0002 1E22          1427      cmp.w #2, lvlType
00001E66                          1428      IF <EQ> THEN
00001E6A  6100 035A               1429          BSR battleInput ; happens in run
00001E6E                          1430      ENDI
00001E6E                          1431      
00001E6E  4E75                    1432      rts             ; return to loop
00001E70                          1433  
00001E70                          1434  noinput:
00001E70                          1435      ; go back to loop
00001E70  11FC 0000 11D8          1436      move.b #0, currentKey
00001E76  11FC 0000 11DC          1437      move.b #0, lastkey
00001E7C  4E75                    1438      rts
00001E7E                          1439  
00001E7E= 0001                    1440  inputType dc.w 1
00001E80                          1441  
00001E80                          1442  commonInput:
00001E80                          1443      ; at this point, keycode in currentkey is pressed
00001E80                          1444  
00001E80                          1445      ; OPTIONS
00001E80  0C38 001B 11D8          1446      cmpi.b #escapeKey, currentkey ; pause
00001E86  6700 009C               1447      beq escapepressed
00001E8A  0C38 0030 11D8          1448      cmpi.b #key0, currentKey ; fullscreen
00001E90  6700 00A6               1449      beq key0pressed
00001E94                          1450  
00001E94  4A38 11E0               1451      tst.b isPaused
00001E98  6600 0072               1452      bne pausedInput
00001E9C  4E75                    1453      RTS
00001E9E                          1454  
00001E9E                          1455  menuInput:
00001E9E  0C38 000D 11D8          1456      cmpi.b #enterKey, currentKey
00001EA4  6700 F218               1457      beq mapInit
00001EA8  4E75                    1458      rts
00001EAA                          1459  
00001EAA                          1460  mapinput:
00001EAA                          1461      ; at this point, keycode in currentkey is pressed
00001EAA                          1462  
00001EAA                          1463      ; map buttons
00001EAA  0C38 005A 11D8          1464      cmpi.b #zKey, currentKey
00001EB0  6700 009A               1465      beq zPressed
00001EB4                          1466  
00001EB4                          1467      ; only move player if correct time
00001EB4  3A38 1AB6               1468      move.w playerTime, d5
00001EB8  4EB8 1AC2               1469      jsr checkIncrement
00001EBC  6600 0064               1470      bne endInput
00001EC0                          1471  
00001EC0                          1472      ; only when not paused
00001EC0                          1473  
00001EC0  0C38 000D 11D8          1474      cmpi.b #enterKey, currentKey
00001EC6  6700 F280               1475      beq collision
00001ECA                          1476  
00001ECA  6000 0004               1477      bra mapMoveInput
00001ECE                          1478  
00001ECE                          1479      ;cmpi.b #wkey, currentkey ; W:UP
00001ECE                          1480      ;beq wpressed
00001ECE                          1481      ;cmpi.b #akey, currentkey ; A:LEFT
00001ECE                          1482      ;beq apressed
00001ECE                          1483      ;cmpi.b #skey, currentkey ; S:DOWN
00001ECE                          1484      ;beq spressed
00001ECE                          1485      ;cmpi.b #dkey, currentkey ; D:RIGHT
00001ECE                          1486      ;beq dpressed
00001ECE  4E75                    1487      RTS
00001ED0                          1488  
00001ED0                          1489  mapMoveInput:
00001ED0  223C 57415344           1490      move.l #wasdKeys, d1
00001ED6  103C 0013               1491      move.b #tcinp, d0
00001EDA  4E4F                    1492      trap #15
00001EDC                          1493  
00001EDC  0801 0018               1494      BTST.L  #24,D1
00001EE0                          1495      IF <NE> THEN
00001EE4  6100 0088               1496          BSR    wPressed
00001EE8                          1497      ENDI
00001EE8                          1498  
00001EE8                          1499      ;MOVE.L  CURRENT_KEY, D1
00001EE8  0801 0010               1500      BTST.L  #16,D1
00001EEC                          1501      IF <NE> THEN
00001EF0  6100 0090               1502          BSR    aPressed
00001EF4                          1503      ENDI
00001EF4                          1504  
00001EF4                          1505      ;MOVE.L  CURRENT_KEY, D1
00001EF4  0801 0008               1506      BTST.L  #8,D1
00001EF8                          1507      IF <NE> THEN
00001EFC  6100 0098               1508          BSR    sPressed
00001F00                          1509      ENDI
00001F00                          1510  
00001F00                          1511      ;MOVE.L  CURRENT_KEY, D1
00001F00  0801 0000               1512      BTST.L  #0,D1
00001F04                          1513      IF <NE> THEN
00001F08  6100 00A2               1514          BSR    dPressed
00001F0C                          1515      ENDI
00001F0C                          1516  
00001F0C                          1517  pausedInput:
00001F0C  0C38 0031 11D8          1518      cmpi.b #key1, currentkey
00001F12  6700 0046               1519      beq key1pressed
00001F16                          1520  
00001F16  0C38 0032 11D8          1521      cmpi.b #key2, currentkey
00001F1C  6700 0044               1522      beq key2pressed
00001F20                          1523  
00001F20                          1524      ;cmpi.b #key3, currentkey
00001F20                          1525      ;beq key3pressed
00001F20                          1526  
00001F20  4E75                    1527      rts
00001F22                          1528  
00001F22                          1529  endInput:
00001F22  4E75                    1530      rts
00001F24                          1531  
00001F24                          1532  ; INPUTS
00001F24                          1533  escapePressed:
00001F24  1A38 11DC               1534      move.b lastkey, d5
00001F28  BA38 11D8               1535      cmp.b currentKey, d5
00001F2C  6600 0004               1536      bne escapeJustPressed
00001F30  4E75                    1537      rts
00001F32                          1538  escapeJustPressed:
00001F32  4EB8 117A               1539      jsr togglePause
00001F36  4E75                    1540      rts
00001F38                          1541  
00001F38                          1542  key0pressed:
00001F38  1A38 11DC               1543      move.b lastkey, d5
00001F3C  BA38 11D8               1544      cmp.b currentKey, d5
00001F40  6600 0004               1545      bne key0justPressed
00001F44  4E75                    1546      rts
00001F46                          1547  key0justPressed:
00001F46  4EB8 180A               1548      jsr toggleFullScreen
00001F4A  4E75                    1549      rts
00001F4C                          1550  
00001F4C                          1551  zPressed:
00001F4C  1A38 11DC               1552      move.b lastkey, d5
00001F50  BA38 11D8               1553      cmp.b currentKey, d5
00001F54  6600 FEB2               1554      bne toggleFollow ; z just pressed
00001F58  4E75                    1555      rts
00001F5A                          1556  
00001F5A                          1557  key1pressed: ; quit
00001F5A  4EB8 117A               1558      jsr togglePause
00001F5E  6000 F258               1559      bra end
00001F62                          1560  key2pressed: ; main menu
00001F62  4EB8 117A               1561      jsr togglePause
00001F66  4EB8 1164               1562      jsr clearscreen
00001F6A  6000 F094               1563      bra start
00001F6E                          1564  
00001F6E                          1565  ; MOVEMENT INPUT: MUST STAY WITHIN CELL BOUNDARIES
00001F6E                          1566  wpressed:
00001F6E  2638 11E6               1567      move.l playerY, d3 ; check boundary with proposed movement
00001F72  5383                    1568      sub.l #1, D3
00001F74  B6B8 13EA               1569      cmp.l celltlY, d3
00001F78  6700 0048               1570      beq endMovement
00001F7C                          1571  
00001F7C  53B8 11E6               1572      sub.l #1, playerY
00001F80  4E75                    1573      rts
00001F82                          1574  apressed:
00001F82  2638 11E2               1575      move.l playerX, d3 ; check boundary with proposed movement
00001F86  5383                    1576      sub.l #1, D3
00001F88  B6B8 13E6               1577      cmp.l celltlX, d3
00001F8C  6700 0034               1578      beq endMovement
00001F90                          1579  
00001F90  53B8 11E2               1580      sub.l #1, playerX
00001F94  4E75                    1581      rts
00001F96                          1582  spressed:
00001F96  2638 11E6               1583      move.l playerY, d3 ; check boundary with proposed movement
00001F9A  5283                    1584      add.l #1, D3
00001F9C  5083                    1585      add.l #playerH, d3 ; player size taken into consideration
00001F9E  B6B8 13F2               1586      cmp.l cellBrY, d3
00001FA2  6700 001E               1587      beq endMovement
00001FA6                          1588  
00001FA6  52B8 11E6               1589      add.l #1, playerY
00001FAA  4E75                    1590      rts
00001FAC                          1591  dpressed:
00001FAC  2638 11E2               1592      move.l playerX, d3 ; check boundary with proposed movement
00001FB0  5283                    1593      add.l #1, D3
00001FB2  5083                    1594      add.l #playerW, d3 ; player size taken into consideration
00001FB4  B6B8 13EE               1595      cmp.l cellBrX, d3
00001FB8  6700 0008               1596      beq endMovement
00001FBC                          1597  
00001FBC  52B8 11E2               1598      add.l #1, playerX
00001FC0  4E75                    1599      rts
00001FC2                          1600  
00001FC2                          1601  endMovement:
00001FC2  4E75                    1602      rts
00001FC2  4E75                    1603  -------------------- end include --------------------
00001FC4                          1604  
00001FC4                          1605   include "battle/battleView.x68"
00001FC4                          1606  
00001FC4                          1607  
00001FC4  =00000021               1608  TC_SCREEN   EQU         33          ; Screen size information trap code
00001FC4  =00000000               1609  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001FC4                          1610                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001FC4  =00000013               1611  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001FC4  =0000005C               1612  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001FC4  =0000000B               1613  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001FC4                          1614  
00001FC4  =0000005E               1615  TC_REDRAW   EQU         94          ; Redraw Screen
00001FC4  =00000009               1616  TC_EXIT     EQU         09          ; Exit Trapcode
00001FC4                          1617  
00001FC4  =00000014               1618  PLYR_W_INIT EQU         20          ; Players initial Width
00001FC4  =0000000C               1619  PLYR_H_INIT EQU         12          ; Players initial Height
00001FC4                          1620  
00001FC4  =00000000               1621  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001FC4  =FFFFFFED               1622  PLYR_JUMP_V EQU         -19          ; Player Jump Velocity
00001FC4  =00000001               1623  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001FC4                          1624  
00001FC4  =0000000F               1625  THRW_W_INIT EQU         15          ; Players initial Width
00001FC4  =0000000F               1626  THRW_H_INIT EQU         15          ; Players initial Height
00001FC4                          1627  
00001FC4  =00000000               1628  THRW_DFLT_V EQU         00          ; Default Player Velocity
00001FC4  =FFFFFFF0               1629  THRW_JUMP_V EQU         -16          ; Player Jump Velocity
00001FC4  =00000001               1630  THRW_DFLT_G EQU         01          ; Player Default Gravity
00001FC4                          1631  
00001FC4  =00000001               1632  GND_TRUE    EQU         01          ; Player on Ground True
00001FC4  =00000000               1633  GND_FALSE   EQU         00          ; Player on Ground False
00001FC4                          1634  
00001FC4  =00000000               1635  GAMEOVER_INDEX   EQU             00          ; Player Run Sound Index  
00001FC4  =00000001               1636  JMP_INDEX   EQU             01          ; Player Jump Sound Index  
00001FC4  =00000002               1637  HITHURT_INDEX  EQU          02          ; Player Opps Sound Index
00001FC4  =00000003               1638  POWERUP_INDEX  EQU          03          ; Player Opps Sound Index
00001FC4  =00000004               1639  LEVELCHANGE_INDEX  EQU      04          ; Player Opps Sound Index
00001FC4  =00000005               1640  HIT_INDEX  EQU              05  
00001FC4                          1641  
00001FC4  =0000000C               1642  ENMY_W_INIT EQU         12          ; Enemy initial Width
00001FC4  =0000000C               1643  ENMY_H_INIT EQU         12          ; Enemy initial Height
00001FC4  =0000000C               1644  ENEMY_H_INIT EQU         12          ; Enemy initial Height
00001FC4                          1645  
00001FC4  =00000014               1646  FLY_ENMY_W_INIT  EQU         20          ; Enemy initial Width
00001FC4  =0000000C               1647  FLY_ENMY_H_INIT  EQU         12          ; Enemy initial Height
00001FC4                          1648  
00001FC4  =0000000C               1649  HEALTH_PACK_W    EQU         12          ; Enemy initial Width
00001FC4  =0000000C               1650  HEALTH_PACK_H    EQU         12          ; Enemy initial Height
00001FC4                          1651  
00001FC4  =00000002               1652  LOOKRIGHT   EQU         02          ; Look Right
00001FC4  =00000001               1653  LOOKLEFT    EQU         01          ; Look Left
00001FC4  =00FFFFFF               1654  WHITE           EQU     $00FFFFFF
00001FC4  =00000000               1655  BLACK           EQU     $00000000
00001FC4  =000000FF               1656  RED             EQU     $000000FF
00001FC4  =00FF0000               1657  BLUE            EQU     $00FF0000
00001FC4  =00566D19               1658  GREEN           EQU     $00566D19
00001FC4  =0044FF44               1659  LIFEGREEN       EQU     $0044FF44
00001FC4  =0019506D               1660  BROWN           EQU     $0019506D         ; Brown   
00001FC4  =00004FAD               1661  DIRT           EQU      $00004FAD         ; Brown   
00001FC4  =00FFE2B0               1662  SKY             EQU     $00FFE2B0         ; Sky Blue
00001FC4                          1663  ;ad4f00
00001FC4  =00000020               1664  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001FC4  =0000001B               1665  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001FC4  =00000052               1666  Rkey           EQU         $52         ; R ASCII Keycode
00001FC4  =00000041               1667  Akey           EQU         $41         ; A ASCII Keycode
00001FC4  =00000053               1668  Skey           EQU         $53         ; S ASCII Keycode
00001FC4  =00000044               1669  Dkey           EQU         $44         ; D ASCII Keycode
00001FC4  =0000004C               1670  Lkey           EQU         $4C         ; L ASCII Keycode
00001FC4  =0000004B               1671  Kkey           EQU         $4B         ; K ASCII Keycode
00001FC4                          1672  
00001FC4                          1673  INITRUN:
00001FC4  31FC 0002 1E22          1674      move.w #2, lvlType
00001FCA                          1675      ; Initialise Sounds
00001FCA  6100 0942               1676      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001FCE  6100 0920               1677      BSR     GAMEOVER_LOAD                ; Load Run Sound into Memory
00001FD2  6100 0958               1678      BSR     HITHURT_LOAD               ; Load Opps (Collision) Sound into Memory
00001FD6  6100 0972               1679      BSR     POWERUP_LOAD               ; Load Opps (Collision) Sound into Memory
00001FDA  6100 098C               1680      BSR     LVLCHANGE_LOAD               ; Load Opps (Collision) Sound into Memory
00001FDE  6100 09A6               1681      BSR     HIT_LOAD
00001FE2                          1682  
00001FE2                          1683      ; Screen Size
00001FE2  103C 0021               1684      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001FE6  7200                    1685      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001FE8  4E4F                    1686      TRAP    #15                     ; interpret D0 and D1 for screen size
00001FEA  33C1 00003218           1687      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001FF0  4841                    1688      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001FF2  33C1 00003216           1689      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001FF8                          1690  
00001FF8                          1691      ; Place the Player at the center of the screen
00001FF8  B381                    1692      EOR.L    D1,D1                      ; Clear contents of D1 (XOR is faster)
00001FFA  3239 00003216           1693      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002000  82FC 0002               1694      DIVU    #02,        D1          ; divide by 2 for center on X Axis
00002004  23C1 00003220           1695      MOVE.L  D1,         PLAYER_X    ; Players X Position
0000200A                          1696  
0000200A  B381                    1697      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000200C  3239 00003218           1698      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002012  82FC 0002               1699      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002016  23C1 00003224           1700      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
0000201C                          1701  
0000201C                          1702      ; Set the player starting width and height
0000201C  13FC 0014 00003287      1703      MOVE.B  #PLYR_W_INIT,        PLAYER_WIDTH ; Players Width
00002024  13FC 000C 00003288      1704      MOVE.B  #PLYR_H_INIT,        PLAYER_HEIGHT ; Players Width
0000202C                          1705  
0000202C  B381                    1706      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000202E  3239 00003218           1707      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002034  82FC 0002               1708      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002038  23C1 00003224           1709      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
0000203E                          1710  
0000203E                          1711      ; Initialise Player Score
0000203E  B381                    1712      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00002040  7200                    1713      MOVE.L  #00,        D1          ; Init Score
00002042  23C1 00003228           1714      MOVE.L  D1,         PLAYER_SCORE
00002048                          1715  
00002048                          1716      ; Initialise Player Velocity
00002048  B381                    1717      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000204A  123C 0000               1718      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
0000204E  23C1 0000322C           1719      MOVE.L  D1,         PLYR_VELOCITY
00002054                          1720  
00002054                          1721      ; Initialise Player Gravity
00002054  B381                    1722      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00002056  7201                    1723      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00002058  23C1 00003230           1724      MOVE.L  D1,         PLYR_GRAVITY
0000205E                          1725      
0000205E                          1726      ; Initialise Player Velocity
0000205E  B381                    1727      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00002060  123C 0000               1728      MOVE.B  #THRW_DFLT_V,D1         ; Init Player Velocity
00002064  23C1 0000327C           1729      MOVE.L  D1,         THROW_VELOCITY
0000206A                          1730  
0000206A                          1731      ; Initialise Player Gravity
0000206A  B381                    1732      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000206C  7201                    1733      MOVE.L  #THRW_DFLT_G,D1         ; Init Player Gravity
0000206E  23C1 00003280           1734      MOVE.L  D1,         THROW_GRAVITY
00002074                          1735  
00002074                          1736      ; Initialize Player on Ground
00002074  23FC 00000001 00003234  1737      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
0000207E                          1738  
0000207E                          1739      ; Initial Position for Enemy
0000207E  B381                    1740      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00002080  3239 00003216           1741      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002086  23C1 0000323A           1742      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000208C                          1743  
0000208C  B381                    1744      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000208E  3239 00003218           1745      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002094  82FC 0002               1746      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002098  23C1 0000323E           1747      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
0000209E                          1748  
0000209E                          1749      ; Initialise the starting enemy width and height
0000209E  33FC 000C 0000328A      1750      MOVE.W  #12,        ENEMY_WIDTH ; Enemy Width
000020A6  33FC 000C 0000328C      1751      MOVE.W  #12,        ENEMY_HEIGHT ; Enemy Height
000020AE                          1752  
000020AE                          1753      ; Initial Position for Flying Enemy
000020AE  B381                    1754      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000020B0  3239 00003216           1755      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000020B6  23C1 0000324A           1756      MOVE.L  D1,         FLYINGENEMY_X     ; Enemy X Position
000020BC                          1757  
000020BC  B381                    1758      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000020BE  3239 00003218           1759      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000020C4  82FC 0002               1760      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000020C8  0441 003C               1761      SUB.W   #60,        D1
000020CC  23C1 0000324E           1762      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
000020D2                          1763      
000020D2                          1764      ; Initial Flying enemy width and height
000020D2  33FC 0014 0000328E      1765      MOVE.W  #20,        FLYENEMY_WIDTH ; Enemy Width
000020DA  33FC 000C 00003290      1766      MOVE.W  #12,        FLYENEMY_HEIGHT ; Enemy Height
000020E2                          1767      ; Initial Position for Health pack
000020E2  B381                    1768      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000020E4  3239 00003216           1769      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000020EA  0481 FFFFFFFF           1770      SUB.L   #-1,        D1
000020F0  23C1 00003242           1771      MOVE.L  D1,         HEALTH_X     ; Enemy X Position
000020F6                          1772  
000020F6  B381                    1773      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000020F8  3239 00003218           1774      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000020FE  82FC 0002               1775      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002102  23C1 00003246           1776      MOVE.L  D1,         HEALTH_Y     ; Enemy Y Position
00002108                          1777  
00002108                          1778  
00002108  45F9 00003206           1779      LEA    LEVELS,      A2
0000210E  13FC 0005 0000325E      1780      MOVE.B  #05,        LIVES
00002116  13FC 0002 0000325F      1781      MOVE.B  #02,        POINTS
0000211E  13FC 0000 000031FF      1782      MOVE.B  #00,        DRAW_HEALTHPACKS
00002126  13FC 0000 00003200      1783      MOVE.B  #00,        SPAWN_HEALTHPACKS
0000212E  33FC 0140 000032DE      1784      MOVE.W  #320,       Z
00002136  33FC 0004 000032E0      1785      MOVE.W  #4,         SCALER   
0000213E  33FC FFB0 000032E2      1786      MOVE.W  #-80,       WIDTH     
00002146                          1787  
00002146  23FC 00000000 00003266  1788      MOVE.L  #0,         ATTACK_X
00002150  23FC 00000000 0000326A  1789      MOVE.L  #0,         ATTACK_Y
0000215A  23FC FFFFFFFF 00003274  1790      MOVE.L  #-1,        THROW_X
00002164  23FC FFFFFFFF 00003278  1791      MOVE.L  #-1,        THROW_Y
0000216E                          1792      
0000216E  13FC 0000 00003260      1793      MOVE.B  #00,        CURRENTLYATTACKING
00002176  13FC 0000 0000326E      1794      MOVE.B  #00,        CURRENTLYTHROWING
0000217E                          1795  
0000217E  4281                    1796      CLR.L   D1
00002180                          1797   
00002180                          1798  
00002180                          1799      ; Enable the screen back buffer(see easy 68k help)
00002180  103C 005C               1800      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00002184  123C 0011               1801      MOVE.B  #17,        D1          ; Combine Tasks
00002188  4E4F                    1802      TRAP    #15                     ; Trap (Perform action)
0000218A                          1803          
0000218A                          1804      ; Clear the screen (see easy 68k help)
0000218A  103C 000B               1805      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000218E  323C FF00               1806      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00002192  4E4F                    1807      TRAP    #15                     ; Trap (Perform action)
00002194                          1808  
00002194  6000 0002               1809      bra gameloop
00002198                          1810  
00002198                          1811  GAME:
00002198                          1812  
00002198                          1813      
00002198                          1814  GAMELOOP:
00002198                          1815      ; Main Gameloop
00002198  23FC 00000BB8 000032E4  1816      MOVE.L      #3000,timer
000021A2                          1817  DELAY:     
000021A2  53B9 000032E4           1818      SUBI.L      #1,timer            ; decrement timer by 1 to simulate a delay
000021A8  4AB9 000032E4           1819      TST.L       timer            ; compare 0 to the value of timer
000021AE  66F2                    1820      BNE         DELAY               ; branch back to DELAY if the previous compare was not equal
000021B0                          1821  
000021B0  6100 0014               1822      BSR     BATTLEINPUT                   ; Check Keyboard Input
000021B4  6100 00D4               1823      BSR     UPDATE                  ; Update positions and points
000021B8  6100 069C               1824      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000021BC  6100 0AD4               1825      BSR     CHECK_COLLISIONS        ; Check for Collisions
000021C0  6100 039E               1826      BSR     DRAWBATTLE                  ; Draw the Scene
000021C4                          1827                  ; Loop back to GameLoop
000021C4  60D2                    1828      BRA     GAMELOOP    
000021C6                          1829      
000021C6                          1830  BATTLEINPUT:
000021C6  103C 0013               1831      MOVE.B  #TC_KEYCODE, D0          ; Check for pressed keys
000021CA                          1832      ;MOVE.L  #$41444C20, D1          ; Check for A, D and Spacebar
000021CA  223C 41444C20           1833      MOVE.L  #runActionKeys, D1          ; Check for A, D and Spacebar
000021D0  4E4F                    1834      TRAP    #15                     ; Trap (Perform action)
000021D2  23C1 0000321A           1835      MOVE.L  D1,         CURRENT_KEY ; Put Current Key in Memory
000021D8                          1836  
000021D8  0801 0018               1837      BTST.L  #24,D1
000021DC                          1838      IF <NE> THEN
000021E0  6100 01C0               1839          BSR    MOVE_PLAYER_LEFT
000021E4                          1840      ENDI
000021E4                          1841  
000021E4  2239 0000321A           1842      MOVE.L  CURRENT_KEY, D1
000021EA  0801 0010               1843      BTST.L  #16,D1
000021EE                          1844      IF <NE> THEN
000021F2  6100 01CC               1845          BSR    MOVE_PLAYER_RIGHT
000021F6                          1846      ENDI
000021F6                          1847  
000021F6  2239 0000321A           1848      MOVE.L  CURRENT_KEY, D1
000021FC  0801 0008               1849      BTST.L  #8,D1
00002200                          1850      IF <NE> THEN
00002204  6100 02DC               1851          BSR    PERFORM_ATTACK
00002208                          1852      ENDI
00002208                          1853  
00002208  2239 0000321A           1854      MOVE.L  CURRENT_KEY, D1
0000220E  0801 0000               1855      BTST.L  #0,D1
00002212                          1856      IF <NE> THEN
00002216  6100 0692               1857          BSR    JUMP
0000221A                          1858      ENDI
0000221A                          1859  
0000221A  103C 0013               1860      MOVE.B  #TC_KEYCODE, D0          ; Check for pressed keys
0000221E  724B                    1861      MOVE.L  #$4B, D1          ; Check for A, D and Spacebar
00002220  4E4F                    1862      TRAP    #15                     ; Trap (Perform action)
00002222                          1863      
00002222  0801 0000               1864      BTST.L  #0,D1
00002226                          1865      IF <NE> THEN
0000222A  6100 02F6               1866          BSR    PERFORM_THROW
0000222E                          1867      ENDI
0000222E                          1868  
0000222E                          1869  
0000222E                          1870      ; Process Input
0000222E  4281                    1871      CLR.L   D1                      ; Clear Data Register
00002230  4282                    1872      CLR.L   D2
00002232  103C 0013               1873      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
00002236  4E4F                    1874      TRAP    #15                     ; Trap (Perform action)
00002238  1401                    1875      MOVE.B  D1,         D2          ; Move last key D1 to D2
0000223A  B43C 0000               1876      CMP.B   #00,        D2          ; Key is pressed
0000223E  6700 000E               1877      BEQ     PROCESS_INPUT           ; Process Key
00002242  4E4F                    1878      TRAP    #15                     ; Trap for Last Key
00002244                          1879      ; Check if key still pressed
00002244  B23C 00FF               1880      CMP.B   #$FF,       D1          ; Is it still pressed
00002248  6700 0004               1881      BEQ     PROCESS_INPUT           ; Process Last Key
0000224C  4E75                    1882      RTS                             ; Return to subroutine
0000224E                          1883  PROCESS_INPUT:
0000224E  23C2 0000321A           1884      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00002254                          1885  
00002254                          1886  ; pause
00002254  0CB9 0000001B 0000321A  1887      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
0000225E  6700 FCC4               1888      BEQ     escapePressed
00002262                          1889  
00002262  4A38 11E0               1890      tst.b isPaused
00002266  6600 FCA4               1891      bne pausedInput
0000226A                          1892  
0000226A  4A39 0000325E           1893      TST.B   LIVES
00002270  6700 0008               1894      BEQ     PROCESS_RESTART
00002274  6000 0678               1895      BRA     IDLE                    ; Or Idle
00002278  4E75                    1896      RTS                             ; Return to subroutine
0000227A                          1897  
0000227A                          1898  PROCESS_RESTART:
0000227A  0CB9 00000052 0000321A  1899      CMP.L   #Rkey,  CURRENT_KEY ; Is Current Key R
00002284  6700 FD3E               1900      BEQ     INITrun
00002288  4E75                    1901      RTS                             ; Return to subroutine
0000228A                          1902  UPDATE:
0000228A                          1903      ; Update the Players Positon based on Velocity and Gravity
0000228A  4281                    1904      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000228C  2239 0000322C           1905      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
00002292  2439 00003230           1906      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00002298  D282                    1907      ADD.L   D2,         D1          ; Add Gravity to Velocity
0000229A  23C1 0000322C           1908      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
000022A0  D2B9 00003224           1909      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
000022A6  23C1 00003224           1910      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position
000022AC  23C1 0000326A           1911      MOVE.L  D1,         ATTACK_Y 
000022B2                          1912  
000022B2  6100 0074               1913      BSR     MOVE_THROW
000022B6                          1914  
000022B6                          1915      ; Move the Enemy
000022B6  4281                    1916      CLR.L   D1                      ; Clear the contents of D0
000022B8  2239 0000323A           1917      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
000022BE  B2BC 00000000           1918      CMP.L   #00,        D1
000022C4  6F00 01AA               1919      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
000022C8  6100 012E               1920      BSR     MOVE_ENEMY              ; Move the Enemy
000022CC                          1921  
000022CC                          1922      ; Move flying enemy
000022CC  4281                    1923      CLR.L   D1                      ; Clear the contents of D0
000022CE  2239 0000324A           1924      MOVE.L  FLYINGENEMY_X,    D1          ; Move the Enemy X Position to D0
000022D4  B2BC 00000000           1925      CMP.L   #00,        D1
000022DA  6F00 01BE               1926      BLE     RESET_FLYENEMY_POSITION    ; Reset Enemy if off Screen
000022DE                          1927  
000022DE  0CB9 00000000 00003242  1928      CMP.L   #00,        HEALTH_X
000022E8  6F00 01DE               1929      BLE     RESET_HEALTH_POSITION
000022EC  6100 0102               1930      BSR     MOVE_HEALTHPACK
000022F0                          1931  
000022F0  B381                    1932      EOR.L   D1,D1
000022F2  3239 000032E2           1933      MOVE.W  WIDTH,D1
000022F8  B279 000032DE           1934      CMP.W   Z,D1
000022FE  6C00 00DE               1935      BGE     RESET_TREE
00002302  6100 00E4               1936      BSR     MOVE_TREE
00002306                          1937  
00002306  6100 007C               1938      BSR     CHECK_ATTACK_COOLDOWN
0000230A                          1939  
0000230A  4A79 00003264           1940      TST.W   ATTACK_TIME
00002310  6600 0080               1941      BNE     ATTACK_TIME_SUB
00002314  13FC 0000 00003260      1942      MOVE.B  #00,        CURRENTLYATTACKING
0000231C  23FC 000001E0 0000326A  1943      MOVE.L  #480,        ATTACK_Y
00002326                          1944  
00002326  4E75                    1945      RTS                             ; Return to subroutine  
00002328                          1946  
00002328                          1947  MOVE_THROW:
00002328                          1948         ; Update the Players Positon based on Velocity and Gravity
00002328  B381                    1949      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
0000232A  2239 0000327C           1950      MOVE.L  THROW_VELOCITY, D1       ; Fetch Player Velocity
00002330  2439 00003280           1951      MOVE.L  THROW_GRAVITY, D2        ; Fetch Player Gravity
00002336  D282                    1952      ADD.L   D2,         D1          ; Add Gravity to Velocity
00002338  23C1 0000327C           1953      MOVE.L  D1,         THROW_VELOCITY ; Update Player Velocity
0000233E  D2B9 00003278           1954      ADD.L   THROW_Y,   D1          ; Add Velocity to Player
00002344  23C1 00003278           1955      MOVE.L  D1,         THROW_Y    ; Update Players Y Position
0000234A                          1956  
0000234A  58B9 00003274           1957      ADDI.L   #4,        THROW_X
00002350  6100 0004               1958      BSR     CHECK_THROW_DONE
00002354                          1959      
00002354  4E75                    1960      RTS
00002356                          1961  
00002356                          1962  CHECK_THROW_DONE:
00002356  0CB9 0000012C 00003278  1963      CMP.L    #300, THROW_Y
00002360  6E00 0004               1964      BGT      RESET_THROW
00002364  4E75                    1965      RTS
00002366                          1966  
00002366                          1967  RESET_THROW:
00002366  13FC 0000 0000326E      1968      MOVE.B   #00, CURRENTLYTHROWING
0000236E  23FC FFFFFFFF 00003274  1969      MOVE.L   #-1, THROW_X
00002378  23FC FFFFFFFF 00003278  1970      MOVE.L   #-1, THROW_Y
00002382  4E75                    1971      RTS
00002384                          1972  
00002384                          1973  CHECK_ATTACK_COOLDOWN:
00002384  0C79 0000 00003262      1974      CMP.W   #0, ATTACK_COOLDOWN
0000238C  6E00 000C               1975      BGT     ATTACK_COOLDOWN_SUB
00002390  4E75                    1976      RTS
00002392                          1977  
00002392                          1978  ATTACK_TIME_SUB:
00002392  5579 00003264           1979      SUB.W   #02,        ATTACK_TIME
00002398  4E75                    1980      RTS   
0000239A                          1981  ATTACK_COOLDOWN_SUB:
0000239A  5579 00003262           1982      SUB.W   #02,        ATTACK_COOLDOWN
000023A0  4E75                    1983      RTS                            
000023A2                          1984  
000023A2                          1985  MOVE_PLAYER_LEFT:
000023A2  13FC 0001 00003238      1986      MOVE.B  #LOOKLEFT,        PLAYER_DIR
000023AA  2239 00003220           1987      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
000023B0  5581                    1988      SUB.L   #02,        D1          ; Move Player Left
000023B2  23C1 00003220           1989      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
000023B8  55B9 00003266           1990      SUB.L   #02,        ATTACK_X
000023BE  4E75                    1991      RTS                             ; Return to subroutine    
000023C0                          1992  
000023C0                          1993  MOVE_PLAYER_RIGHT:
000023C0  13FC 0002 00003238      1994      MOVE.B  #LOOKRIGHT,        PLAYER_DIR
000023C8  2239 00003220           1995      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
000023CE  5481                    1996      ADD.L   #02,        D1          ; Move Player Right
000023D0  23C1 00003220           1997      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
000023D6  54B9 00003266           1998      ADD.L   #02,        ATTACK_X
000023DC  4E75                    1999      RTS                             ; Return to subroutine
000023DE                          2000  
000023DE                          2001  RESET_TREE:
000023DE  33FC 0280 000032DE      2002      MOVE.W  #640,Z
000023E6  4E75                    2003      RTS
000023E8                          2004  
000023E8                          2005  MOVE_TREE:
000023E8  5379 000032DE           2006      SUB.W  #01,Z
000023EE  4E75                    2007      RTS
000023F0                          2008  
000023F0                          2009  MOVE_HEALTHPACK:
000023F0  55B9 00003242           2010      SUB.L   #02,        HEALTH_X
000023F6  4E75                    2011      RTS
000023F8                          2012  
000023F8                          2013  MOVE_ENEMY:
000023F8  45F9 00003206           2014      LEA     LEVELS,      A2
000023FE  2A39 00003228           2015      MOVE.L  PLAYER_SCORE,   D5
00002404  2C1A                    2016      MOVE.L  (A2)+,       D6
00002406  BA86                    2017      CMP.L   D6,   D5
00002408  6E00 004C               2018      BGT     MOVE_ENEMY_L4
0000240C  2C1A                    2019      MOVE.L  (A2)+,       D6
0000240E  BA86                    2020      CMP.L   D6,   D5
00002410  6E00 002E               2021      BGT     MOVE_ENEMY_L3
00002414  2C1A                    2022      MOVE.L  (A2)+,       D6
00002416  BA86                    2023      CMP.L   D6,   D5
00002418  6E00 0010               2024      BGT     MOVE_ENEMY_L2
0000241C  57B9 0000324A           2025      SUB.L   #03,        FLYINGENEMY_X
00002422  55B9 0000323A           2026      SUB.L   #02,        ENEMY_X     ; Move enemy by X Value
00002428  4E75                    2027      RTS
0000242A                          2028  
0000242A                          2029  MOVE_ENEMY_L2:
0000242A  57B9 0000324A           2030      SUB.L   #03,        FLYINGENEMY_X
00002430  59B9 0000323A           2031      SUB.L   #04,        ENEMY_X     ; Move enemy by X Value
00002436  13FC 0003 0000325F      2032      MOVE.B  #03,        POINTS
0000243E  4E75                    2033      RTS
00002440                          2034  
00002440                          2035  MOVE_ENEMY_L3:
00002440  5FB9 0000324A           2036      SUB.L   #07,        FLYINGENEMY_X
00002446  5BB9 0000323A           2037      SUB.L   #05,        ENEMY_X     ; Move enemy by X Value
0000244C  13FC 0005 0000325F      2038      MOVE.B  #05,        POINTS
00002454  4E75                    2039      RTS
00002456                          2040  
00002456                          2041  MOVE_ENEMY_L4:
00002456  04B9 0000000A 0000324A  2042      SUB.L   #10,        FLYINGENEMY_X
00002460  51B9 0000323A           2043      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
00002466  13FC 000A 0000325F      2044      MOVE.B  #10,        POINTS
0000246E  4E75                    2045      RTS
00002470                          2046  RESET_ENEMY_POSITION:
00002470  4281                    2047      CLR.L   D1       
00002472  3239 00003218           2048      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002478  82FC 0002               2049      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000247C  23C1 0000323E           2050      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00002482  13FC 0000 00003285      2051      MOVE.B  #0,         ENEMY_HIT
0000248A                          2052  
0000248A  B381                    2053      EOR.L  D1,D1                      ; Clear contents of D1 (XOR is faster)
0000248C  3239 00003216           2054      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002492  23C1 0000323A           2055      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00002498  4E75                    2056      RTS
0000249A                          2057  
0000249A                          2058  RESET_FLYENEMY_POSITION:
0000249A  B381                    2059      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000249C  3239 00003218           2060      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000024A2  82FC 0002               2061      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000024A6  0441 003C               2062      SUB.W   #60,        D1
000024AA  23C1 0000324E           2063      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
000024B0  13FC 0000 00003286      2064      MOVE.B  #0,         FLYENEMY_HIT
000024B8                          2065  
000024B8  4281                    2066      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000024BA  3239 00003216           2067      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000024C0  23C1 0000324A           2068      MOVE.L  D1,         FLYINGENEMY_X     ; FLY Enemy X Position
000024C6  4E75                    2069      RTS
000024C8                          2070      
000024C8                          2071  RESET_HEALTH_POSITION:
000024C8  13FC 0001 000031FF      2072      MOVE.B  #01,        DRAW_HEALTHPACKS
000024D0  4281                    2073      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000024D2  3239 00003216           2074      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000024D8  23C1 00003242           2075      MOVE.L  D1,         HEALTH_X     ; healthpack X Position
000024DE  4E75                    2076      RTS
000024E0                          2077  
000024E0                          2078  CONTINUE:
000024E0  4E75                    2079      RTS
000024E2                          2080  
000024E2                          2081  PERFORM_ATTACK:
000024E2  4A79 00003262           2082      TST.W    ATTACK_COOLDOWN
000024E8  66F6                    2083      BNE      CONTINUE
000024EA                          2084      
000024EA  13FC 0001 00003260      2085      MOVE.B   #01, CURRENTLYATTACKING
000024F2  33FC 0032 00003264      2086      MOVE.W   #50, ATTACK_TIME
000024FA  33FC 004C 00003262      2087      MOVE.W   #76, ATTACK_COOLDOWN
00002502                          2088  
00002502  23F9 00003220 00003266  2089      MOVE.L   PLAYER_X,ATTACK_X
0000250C  06B9 00000014 00003266  2090      ADDI.L   #PLYR_W_INIT,ATTACK_X
00002516  23F9 00003224 0000326A  2091      MOVE.L   PLAYER_Y,ATTACK_Y
00002520  4E75                    2092      RTS
00002522                          2093  
00002522                          2094  PERFORM_THROW:
00002522  4A39 0000326E           2095      TST.B    CURRENTLYTHROWING
00002528  66B6                    2096      BNE      CONTINUE
0000252A                          2097      
0000252A  13FC 0001 0000326E      2098      MOVE.B   #01,CURRENTLYTHROWING
00002532  23F9 00003220 00003274  2099      MOVE.L   PLAYER_X,THROW_X
0000253C  06B9 00000014 00003274  2100      ADDI.L   #PLYR_W_INIT,THROW_X
00002546  23F9 00003224 00003278  2101      MOVE.L   PLAYER_Y,THROW_Y
00002550  04B9 0000000C 00003278  2102      SUBI.L   #PLYR_H_INIT,THROW_Y
0000255A                          2103  
0000255A  6100 0384               2104      BSR     PERFORM_THROW_ARC
0000255E  4E75                    2105      RTS
00002560                          2106  
00002560                          2107  DRAWBATTLE: 
00002560                          2108      ; Enable back buffer
00002560  103C 005E               2109      MOVE.B  #TC_REDRAW,        D0
00002564  4E4F                    2110      TRAP    #15
00002566                          2111  
00002566                          2112      ; Clear the screen
00002566  103C 000B               2113      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000256A  323C FF00               2114      MOVE.W  #$FF00,     D1          ; Clear contents
0000256E  4E4F                    2115      TRAP    #15                     ; Trap (Perform action)
00002570                          2116  
00002570  123C 0001               2117      MOVE.B  #1,D1
00002574  103C 005D               2118      MOVE.B  #93,D0
00002578  4E4F                    2119      TRAP    #15
0000257A                          2120  
0000257A  4EB8 14BC               2121      jsr drawPause
0000257E                          2122  
0000257E  6100 00B0               2123      BSR     DRAW_BACKGROUND        
00002582  6100 001C               2124      BSR     DRAW_HILL 
00002586  6100 0150               2125      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000258A  6100 0418               2126      BSR     DRAW_PLAYER             ; Draw Player
0000258E  6100 04FC               2127      BSR     DRAW_ENEMY              ; Draw Enemy
00002592  6100 053C               2128      BSR     DRAW_FLYENEMY
00002596  6100 057C               2129      BSR     DRAW_HEALTHPACK
0000259A  6100 05FA               2130      BSR     DRAW_FLOOR              ; Draw Floor
0000259E  4E75                    2131      RTS                             ; Return to subroutine
000025A0                          2132  
000025A0                          2133  
000025A0                          2134  DRAW_HILL:
000025A0                          2135  
000025A0                          2136  ; Set Pixel Colors
000025A0  223C 00004FAD           2137      MOVE.L  #DIRT,     D1          ; Set Background color
000025A6  103C 0050               2138      MOVE.B  #80,        D0          ; Task for Background Color
000025AA  4E4F                    2139      TRAP    #15                     ; Trap (Perform action)
000025AC                          2140  
000025AC  223C 00004FAD           2141      MOVE.L  #DIRT,     D1
000025B2  103C 0051               2142      MOVE.B  #81,        D0
000025B6  4E4F                    2143      TRAP    #15
000025B8                          2144  
000025B8                          2145      ; Set X, Y, X2, and Y2
000025B8  7200                    2146      MOVE.L  #0,   D1          ; X
000025BA  243C 000000F1           2147      MOVE.L  #241,  D2          ; Y
000025C0  761E                    2148      MOVE.L  #30,   D3           
000025C2  7878                    2149      MOVE.L  #120,   D4     
000025C4                          2150      
000025C4  103C 0057               2151      MOVE.B  #87,        D0          ; Draw Line
000025C8  4E4F                    2152      TRAP    #15                     ; Trap (Perform action)
000025CA                          2153      
000025CA                          2154       ; Set X, Y, X2, and Y2
000025CA  7200                    2155      MOVE.L  #0,   D1          ; X
000025CC  243C 000000F1           2156      MOVE.L  #241,  D2          ; Y
000025D2  763C                    2157      MOVE.L  #60,   D3           
000025D4  283C 00000087           2158      MOVE.L  #135,   D4 
000025DA                          2159      
000025DA                          2160      
000025DA  103C 0057               2161      MOVE.B  #87,        D0          ; Draw Line
000025DE  4E4F                    2162      TRAP    #15                     ; Trap (Perform action)
000025E0                          2163  
000025E0                          2164       ; Set X, Y, X2, and Y2
000025E0  7200                    2165      MOVE.L  #0,   D1          ; X
000025E2  243C 000000F1           2166      MOVE.L  #241,  D2          ; Y
000025E8  7650                    2167      MOVE.L  #80,   D3           
000025EA  283C 00000096           2168      MOVE.L  #150,   D4 
000025F0                          2169      
000025F0                          2170      
000025F0  103C 0057               2171      MOVE.B  #87,        D0          ; Draw Line
000025F4  4E4F                    2172      TRAP    #15                     ; Trap (Perform action)
000025F6                          2173  
000025F6                          2174       ; Set X, Y, X2, and Y2
000025F6  7200                    2175      MOVE.L  #0,   D1          ; X
000025F8  243C 000000F1           2176      MOVE.L  #241,  D2          ; Y
000025FE  7664                    2177      MOVE.L  #100,   D3           
00002600  283C 000000C8           2178      MOVE.L  #200,   D4 
00002606                          2179      
00002606                          2180      
00002606  103C 0057               2181      MOVE.B  #87,        D0          ; Draw Line
0000260A  4E4F                    2182      TRAP    #15                     ; Trap (Perform action)
0000260C                          2183  
0000260C  7200                    2184      MOVE.L  #BLACK,     D1
0000260E  103C 0051               2185      MOVE.B  #81,        D0
00002612  4E4F                    2186      TRAP    #15
00002614  7200                    2187      MOVE.L  #BLACK,     D1
00002616  103C 0050               2188      MOVE.B  #80,        D0
0000261A  4E4F                    2189      TRAP    #15
0000261C                          2190  
0000261C                          2191      ; Set X, Y, X2, and Y2
0000261C  7205                    2192      MOVE.L  #5,   D1          ; X
0000261E  243C 00000082           2193      MOVE.L  #130,  D2          ; Y
00002624  7619                    2194      MOVE.L  #25,   D3           
00002626  7878                    2195      MOVE.L  #120,   D4     
00002628                          2196  
00002628                          2197      
00002628  103C 0057               2198      MOVE.B  #87,        D0          ; Draw Line
0000262C  4E4F                    2199      TRAP    #15                     ; Trap (Perform action)
0000262E                          2200  
0000262E  4E75                    2201      RTS
00002630                          2202  
00002630                          2203  DRAW_BACKGROUND:
00002630  4281                    2204      CLR.L       D1
00002632  223C 00FFE2B0           2205      MOVE.L      #SKY,D1
00002638  103C 0051               2206      MOVE.B      #81,D0
0000263C  4E4F                    2207      TRAP        #15
0000263E                          2208  
0000263E  7200                    2209      MOVE.L      #00, D1
00002640  7400                    2210      MOVE.L      #00, D2
00002642  7059                    2211      MOVE.L      #89, D0
00002644  4E4F                    2212      TRAP        #15
00002646                          2213      
00002646  223C 0019506D           2214      MOVE.L     #BROWN,D1
0000264C  243C 01110000           2215      MOVE.L     #$01110000,D2
00002652  103C 0015               2216      MOVE.B     #21,D0
00002656  4E4F                    2217      TRAP       #15
00002658                          2218      
00002658                          2219  
00002658  B381                    2220      EOR.L      D1,D1
0000265A  143C 0005               2221      MOVE.B     #5,D2
0000265E  33FC 300B 000032D8      2222      MOVE.W     #$300B,TRUNK
00002666                          2223  TREE_LOOP:
00002666  700B                    2224      MOVE.L     #TC_CURSR_P,D0
00002668  3239 000032D8           2225      MOVE.W     TRUNK,D1
0000266E  5379 000032D8           2226      SUBQ.W      #01,TRUNK
00002674  4E4F                    2227      TRAP       #15
00002676                          2228     
00002676  43F9 000031D3           2229      LEA         TREET, A1
0000267C  700E                    2230      MOVE.L      #14, D0
0000267E  4E4F                    2231      TRAP        #15
00002680                          2232  
00002680  5302                    2233      SUBQ.B      #01,D2
00002682  B43C 0000               2234      CMP.B       #00,D2
00002686  66DE                    2235      BNE         TREE_LOOP
00002688                          2236  
00002688  223C 00566D19           2237      MOVE.L     #GREEN,D1
0000268E  243C 01110000           2238      MOVE.L     #$01110000,D2
00002694  103C 0015               2239      MOVE.B     #21,D0
00002698  4E4F                    2240      TRAP       #15
0000269A                          2241  
0000269A  163C 0005               2242      MOVE.B     #5,D3
0000269E                          2243  TREE_LEAVES_Y:
0000269E  13FC 002D 000032D8      2244      MOVE.B     #$2D,TRUNK
000026A6  143C 0008               2245      MOVE.B     #8,D2
000026AA                          2246  TREE_LEAVES_X:
000026AA  700B                    2247      MOVE.L     #TC_CURSR_P,D0
000026AC  3239 000032D8           2248      MOVE.W     TRUNK,D1
000026B2  5239 000032D8           2249      ADDQ.B     #01,TRUNK
000026B8  4E4F                    2250      TRAP       #15
000026BA                          2251     
000026BA  7240                    2252      MOVE.L      #$40, D1
000026BC  7006                    2253      MOVE.L      #6, D0
000026BE  4E4F                    2254      TRAP        #15
000026C0                          2255  
000026C0  5302                    2256      SUBQ.B      #01,D2
000026C2  B43C 0000               2257      CMP.B       #00,D2
000026C6  66E2                    2258      BNE         TREE_LEAVES_X
000026C8  5303                    2259      SUB.B       #01,D3
000026CA  5379 000032D8           2260      SUB.W       #01,TRUNK
000026D0  B63C 0000               2261      CMP.B       #00,D3
000026D4  66C8                    2262      BNE         TREE_LEAVES_Y
000026D6  4E75                    2263      RTS
000026D8                          2264  DRAW_PLYR_DATA:
000026D8  B381                    2265      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
000026DA  B582                    2266      EOR.L    D2,D2
000026DC                          2267  
000026DC                          2268  
000026DC  7200                    2269      MOVE.L  #BLACK,     D1
000026DE  103C 0015               2270      MOVE.B  #21,        D0          ; Set Text Color
000026E2  4E4F                    2271      TRAP    #15                     ; Trap (Perform action)
000026E4                          2272  
000026E4  223C 00FFE2B0           2273      MOVE.L  #SKY,       D1          ; Set Text Color
000026EA  7051                    2274      MOVE.L  #81,        D0          ; Set Text Color
000026EC  4E4F                    2275      TRAP    #15                     ; Trap (Perform action)
000026EE                          2276  
000026EE                          2277      ; Player Score Message
000026EE  103C 000B               2278      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000026F2  323C 0201               2279      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000026F6  4E4F                    2280      TRAP    #15                     ; Trap (Perform action)
000026F8  43F9 0000314C           2281      LEA     SCORE_MSG,  A1          ; Score Message
000026FE  303C 000D               2282      MOVE    #13,        D0          ; No Line feed
00002702  4E4F                    2283      TRAP    #15                     ; Trap (Perform action)
00002704                          2284  
00002704                          2285      ; Player Score Value
00002704  103C 000B               2286      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002708  323C 0901               2287      MOVE.W  #$0901,     D1          ; Col 09, Row 01
0000270C  4E4F                    2288      TRAP    #15                     ; Trap (Perform action)
0000270E  103C 0003               2289      MOVE.B  #03,        D0          ; Display number at D1.L
00002712  2239 00003228           2290      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00002718  4E4F                    2291      TRAP    #15                     ; Trap (Perform action)
0000271A                          2292      
0000271A                          2293      ; Player X Message
0000271A  103C 000B               2294      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000271E  323C 0202               2295      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00002722  4E4F                    2296      TRAP    #15                     ; Trap (Perform action)
00002724  43F9 00003186           2297      LEA     X_MSG,      A1          ; X Message
0000272A  303C 000D               2298      MOVE    #13,        D0          ; No Line feed
0000272E  4E4F                    2299      TRAP    #15                     ; Trap (Perform action)
00002730                          2300      
00002730                          2301      ; Player X
00002730  103C 000B               2302      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00002734  323C 0502               2303      MOVE.W  #$0502,     D1          ; Col 05, Row 02
00002738  4E4F                    2304      TRAP    #15                     ; Trap (Perform action)
0000273A  103C 0003               2305      MOVE.B  #03,        D0          ; Display number at D1.L
0000273E  2239 00003242           2306      MOVE.L  HEALTH_X,   D1          ; Move X to D1.L
00002744  4E4F                    2307      TRAP    #15                     ; Trap (Perform action)
00002746                          2308      
00002746                          2309      ; Player Y Message
00002746  103C 000B               2310      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000274A  323C 1002               2311      MOVE.W  #$1002,     D1          ; Col 10, Row 02
0000274E  4E4F                    2312      TRAP    #15                     ; Trap (Perform action)
00002750  43F9 00003189           2313      LEA     Y_MSG,      A1          ; Y Message
00002756  303C 000D               2314      MOVE    #13,        D0          ; No Line feed
0000275A  4E4F                    2315      TRAP    #15                     ; Trap (Perform action)
0000275C                          2316      
0000275C                          2317      ; Player Y
0000275C  103C 000B               2318      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002760  323C 1202               2319      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00002764  4E4F                    2320      TRAP    #15                     ; Trap (Perform action)
00002766  103C 0003               2321      MOVE.B  #03,        D0          ; Display number at D1.L
0000276A  2239 0000324E           2322      MOVE.L  FLYINGENEMY_Y,   D1          ; Move X to D1.L
00002770  4E4F                    2323      TRAP    #15                     ; Trap (Perform action) 
00002772                          2324  
00002772                          2325      ; Player Velocity Message
00002772  103C 000B               2326      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002776  323C 0203               2327      MOVE.W  #$0203,     D1          ; Col 02, Row 03
0000277A  4E4F                    2328      TRAP    #15                     ; Trap (Perform action)
0000277C  43F9 0000318C           2329      LEA     V_MSG,      A1          ; Velocity Message
00002782  303C 000D               2330      MOVE    #13,        D0          ; No Line feed
00002786  4E4F                    2331      TRAP    #15                     ; Trap (Perform action)
00002788                          2332      
00002788                          2333      ; Player Velocity
00002788  103C 000B               2334      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000278C  323C 0503               2335      MOVE.W  #$0503,     D1          ; Col 05, Row 03
00002790  4E4F                    2336      TRAP    #15                     ; Trap (Perform action)
00002792  103C 0003               2337      MOVE.B  #03,        D0          ; Display number at D1.L
00002796  2239 0000322C           2338      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
0000279C  4E4F                    2339      TRAP    #15                     ; Trap (Perform action)
0000279E                          2340      
0000279E                          2341      ; Player Gravity Message
0000279E  103C 000B               2342      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000027A2  323C 1003               2343      MOVE.W  #$1003,     D1          ; Col 10, Row 03
000027A6  4E4F                    2344      TRAP    #15                     ; Trap (Perform action)
000027A8  43F9 0000318F           2345      LEA     VARMSG,      A1          ; G Message
000027AE  303C 000D               2346      MOVE    #13,        D0          ; No Line feed
000027B2  4E4F                    2347      TRAP    #15                     ; Trap (Perform action)
000027B4                          2348      
000027B4                          2349      ; Player Gravity
000027B4  103C 000B               2350      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000027B8  323C 1903               2351      MOVE.W  #$1903,     D1          ; Col 12, Row 03
000027BC  4E4F                    2352      TRAP    #15                     ; Trap (Perform action)
000027BE  103C 0003               2353      MOVE.B  #03,        D0          ; Display number at D1.L
000027C2  4281                    2354      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000027C4  1239 00003262           2355      MOVE.B  ATTACK_COOLDOWN,D1         ; Move Gravity to D1.L
000027CA  4E4F                    2356      TRAP    #15                     ; Trap (Perform action)
000027CC                          2357  
000027CC                          2358      ; Player On Ground Message
000027CC  103C 000B               2359      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000027D0  323C 0204               2360      MOVE.W  #$0204,     D1          ; Col 10, Row 03
000027D4  4E4F                    2361      TRAP    #15                     ; Trap (Perform action)
000027D6  43F9 00003194           2362      LEA     GND_MSG,    A1          ; On Ground Message
000027DC  303C 000D               2363      MOVE    #13,        D0          ; No Line feed
000027E0  4E4F                    2364      TRAP    #15                     ; Trap (Perform action)
000027E2                          2365      
000027E2                          2366      ; Player On Ground
000027E2  103C 000B               2367      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000027E6  323C 1504               2368      MOVE.W  #$1504,     D1          ; Col 06, Row 04
000027EA  4E4F                    2369      TRAP    #15                     ; Trap (Perform action)
000027EC  103C 0003               2370      MOVE.B  #03,        D0          ; Display number at D1.L
000027F0  4281                    2371      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000027F2  1239 00003284           2372      MOVE.B  ENEMIES_DEFEATED,     D1          ; Move Play on Ground ? to D1.L
000027F8  4E4F                    2373      TRAP    #15                     ; Trap (Perform action)
000027FA                          2374  
000027FA                          2375      ; Show Keys Pressed
000027FA  103C 000B               2376      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000027FE  323C 2001               2377      MOVE.W  #$2001,     D1          ; Col 20, Row 1
00002802  4E4F                    2378      TRAP    #15                     ; Trap (Perform action)
00002804  43F9 00003155           2379      LEA     KEYCODE_MSG, A1         ; Keycode
0000280A  303C 000D               2380      MOVE    #13,        D0          ; No Line feed
0000280E  4E4F                    2381      TRAP    #15                     ; Trap (Perform action)
00002810                          2382  
00002810                          2383      ; Show KeyCode
00002810  103C 000B               2384      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002814  323C 3001               2385      MOVE.W  #$3001,     D1          ; Col 30, Row 1
00002818  4E4F                    2386      TRAP    #15                     ; Trap (Perform action)    
0000281A  2239 0000321A           2387      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
00002820  103C 0003               2388      MOVE.B  #03,        D0          ; Display the contents of D1
00002824  4E4F                    2389      TRAP    #15                     ; Trap (Perform action)
00002826                          2390  
00002826                          2391      ; Show Lives msg
00002826  103C 000B               2392      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000282A  323C 0207               2393      MOVE.W  #$0207,     D1          ; Col 02, Row 06
0000282E  4E4F                    2394      TRAP    #15                     ; Trap (Perform action)
00002830  43F9 000031F4           2395      LEA     LIVES_MSG,   A1          ; Draw
00002836  303C 000D               2396      MOVE    #13,        D0          ; No Line feed
0000283A  4E4F                    2397      TRAP    #15                     ; Trap (Perform action)  
0000283C                          2398      
0000283C                          2399      ; Show Lives msg
0000283C  103C 000B               2400      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002840  323C 0A07               2401      MOVE.W  #$0A07,     D1          ; Col 30, Row 1
00002844  4E4F                    2402      TRAP    #15                     ; Trap (Perform action)   
00002846  B381                    2403      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
00002848  1239 0000325E           2404      MOVE.B  LIVES,      D1          ; Move Key Pressed to D1
0000284E  103C 0003               2405      MOVE.B  #03,        D0          ; Display the contents of D1
00002852  4E4F                    2406      TRAP    #15                     ; Trap (Perform action)
00002854                          2407  
00002854  4E75                    2408      RTS
00002856                          2409  IS_PLAYER_ON_GND:
00002856                          2410      ; Check if Player is on Ground
00002856  4281                    2411      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002858  4282                    2412      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
0000285A  3239 00003218           2413      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1  
00002860  82FC 0002               2414      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002864  2439 00003224           2415      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
0000286A  B441                    2416      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
0000286C  6C00 0008               2417      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00002870  6D00 002C               2418      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00002874  4E75                    2419      RTS                             ; Return to subroutine
00002876                          2420  
00002876                          2421  
00002876                          2422  SET_ON_GROUND:
00002876  4281                    2423      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002878  3239 00003218           2424      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000287E  82FC 0002               2425      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002882  23C1 00003224           2426      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00002888  4281                    2427      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000288A  7200                    2428      MOVE.L  #00,        D1          ; Player Velocity
0000288C  23C1 0000322C           2429      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
00002892  23FC 00000001 00003234  2430      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
0000289C  4E75                    2431      RTS
0000289E                          2432  
0000289E                          2433  SET_OFF_GROUND:
0000289E  23FC 00000000 00003234  2434      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
000028A8  4E75                    2435      RTS                             ; Return to subroutine
000028AA                          2436  JUMP:
000028AA  0CB9 00000001 00003234  2437      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000028B4  6700 0006               2438      BEQ     PERFORM_JUMP            ; Do Jump
000028B8  6000 0012               2439      BRA     JUMP_DONE               ;
000028BC                          2440  PERFORM_JUMP:
000028BC  6100 0062               2441      BSR     PLAY_JUMP               ; Play jump sound
000028C0  23FC FFFFFFED 0000322C  2442      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000028CA  4E75                    2443      RTS                             ; Return to subroutine
000028CC                          2444  JUMP_DONE:
000028CC  4E75                    2445      RTS                             ; Return to subroutine
000028CE                          2446  
000028CE                          2447  THROW_ARC:
000028CE  0CB9 00000001 00003234  2448      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000028D8  6700 0006               2449      BEQ     PERFORM_THROW_ARC    ; Do Jump
000028DC  6000 000E               2450      BRA     ARC_DONE               ;
000028E0                          2451  PERFORM_THROW_ARC:
000028E0                          2452      ;BSR     PLAY_JUMP               ; Play jump sound
000028E0  23FC FFFFFFF0 0000327C  2453      MOVE.L  #THRW_JUMP_V,THROW_VELOCITY ; Set the players velocity to true
000028EA  4E75                    2454      RTS                             ; Return to subroutine
000028EC                          2455  ARC_DONE:
000028EC  4E75                    2456      RTS                             ; Return to subroutine
000028EE                          2457  
000028EE                          2458  IDLE:
000028EE  4E75                    2459      RTS                             ; Return to subroutine
000028F0                          2460  
000028F0                          2461  GAMEOVER_LOAD:
000028F0  43F9 0000329B           2462      LEA     GAMEOVER_WAV,    A1          ; Load Wav File into A1
000028F6  323C 0000               2463      MOVE    #GAMEOVER_INDEX, D1          ; Assign it INDEX
000028FA  303C 004A               2464      MOVE    #74,        D0          ; Load into memory
000028FE  4E4F                    2465      TRAP    #15                     ; Trap (Perform action)
00002900  4E75                    2466      RTS                             ; Return to subroutine
00002902                          2467  
00002902                          2468  PLAY_GAMEOVER:
00002902  323C 0000               2469      MOVE    #GAMEOVER_INDEX, D1          ; Load Sound INDEX
00002906  303C 004B               2470      MOVE    #75,        D0          ; Play Sound
0000290A  4E4F                    2471      TRAP    #15                     ; Trap (Perform action)
0000290C  4E75                    2472      RTS                             ; Return to subroutine
0000290E                          2473  
0000290E                          2474  JUMP_LOAD:
0000290E  43F9 00003292           2475      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
00002914  323C 0001               2476      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
00002918  303C 004A               2477      MOVE    #74,        D0          ; Load into memory
0000291C  4E4F                    2478      TRAP    #15                     ; Trap (Perform action)
0000291E  4E75                    2479      RTS                             ; Return to subroutine
00002920                          2480  
00002920                          2481  PLAY_JUMP:
00002920  323C 0001               2482      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
00002924  303C 004B               2483      MOVE    #75,        D0          ; Play Sound
00002928  4E4F                    2484      TRAP    #15                     ; Trap (Perform action)
0000292A  4E75                    2485      RTS                             ; Return to subroutine
0000292C                          2486  
0000292C                          2487  HITHURT_LOAD:
0000292C  43F9 000032A8           2488      LEA     HITHURT_WAV,   A1          ; Load Wav File into A1
00002932  323C 0002               2489      MOVE    #HITHURT_INDEX,D1          ; Assign it INDEX
00002936  303C 004A               2490      MOVE    #74,        D0          ; Load into memory
0000293A  4E4F                    2491      TRAP    #15                     ; Trap (Perform action)
0000293C  4E75                    2492      RTS                             ; Return to subroutine
0000293E                          2493  
0000293E                          2494  PLAY_HITHURT:
0000293E  323C 0002               2495      MOVE    #HITHURT_INDEX,D1          ; Load Sound INDEX
00002942  303C 004B               2496      MOVE    #75,        D0          ; Play Sound
00002946  4E4F                    2497      TRAP    #15                     ; Trap (Perform action)
00002948  4E75                    2498      RTS                             ; Return to subroutine
0000294A                          2499  
0000294A                          2500  POWERUP_LOAD:
0000294A  43F9 000032BC           2501      LEA     POWERUP_WAV,   A1          ; Load Wav File into A1
00002950  323C 0003               2502      MOVE    #POWERUP_INDEX,D1          ; Assign it INDEX
00002954  303C 004A               2503      MOVE    #74,        D0          ; Load into memory
00002958  4E4F                    2504      TRAP    #15                     ; Trap (Perform action)
0000295A  4E75                    2505      RTS                             ; Return to subroutine
0000295C                          2506  
0000295C                          2507  PLAY_POWERUP:
0000295C  323C 0003               2508      MOVE    #POWERUP_INDEX,D1          ; Load Sound INDEX
00002960  303C 004B               2509      MOVE    #75,        D0          ; Play Sound
00002964  4E4F                    2510      TRAP    #15                     ; Trap (Perform action)
00002966  4E75                    2511      RTS                             ; Return to subroutine
00002968                          2512  
00002968                          2513  LVLCHANGE_LOAD:
00002968  43F9 000032C8           2514      LEA     LEVELCHANGE_WAV,   A1          ; Load Wav File into A1
0000296E  323C 0004               2515      MOVE    #LEVELCHANGE_INDEX,D1          ; Assign it INDEX
00002972  303C 004A               2516      MOVE    #74,        D0          ; Load into memory
00002976  4E4F                    2517      TRAP    #15                     ; Trap (Perform action)
00002978  4E75                    2518      RTS                             ; Return to subroutine
0000297A                          2519  
0000297A                          2520  PLAY_LVLCHANGE:
0000297A  323C 0004               2521      MOVE    #LEVELCHANGE_INDEX,D1          ; Load Sound INDEX
0000297E  303C 004B               2522      MOVE    #75,        D0          ; Play Sound
00002982  4E4F                    2523      TRAP    #15                     ; Trap (Perform action)
00002984  4E75                    2524      RTS                             ; Return to subroutine
00002986                          2525  
00002986                          2526  HIT_LOAD:
00002986  43F9 000032B4           2527      LEA     HIT_WAV,   A1          ; Load Wav File into A1
0000298C  323C 0005               2528      MOVE    #HIT_INDEX,D1          ; Assign it INDEX
00002990  303C 004A               2529      MOVE    #74,        D0          ; Load into memory
00002994  4E4F                    2530      TRAP    #15                     ; Trap (Perform action)
00002996  4E75                    2531      RTS                             ; Return to subroutine
00002998                          2532  
00002998                          2533  PLAY_HIT:
00002998  323C 0005               2534      MOVE    #HIT_INDEX,D1          ; Load Sound INDEX
0000299C  303C 004B               2535      MOVE    #75,        D0          ; Play Sound
000029A0  4E4F                    2536      TRAP    #15                     ; Trap (Perform action)
000029A2  4E75                    2537      RTS                             ; Return to subroutine
000029A4                          2538  
000029A4                          2539  DRAW_PLAYER:
000029A4                          2540      ; Set Pixel Colors
000029A4  7200                    2541      MOVE.L  #BLACK,     D1          ; Set Background color
000029A6  103C 0050               2542      MOVE.B  #80,        D0          ; Task for Background Color
000029AA  4E4F                    2543      TRAP    #15                     ; Trap (Perform action)
000029AC                          2544      ; Reset Pixel Colors
000029AC  7200                    2545      MOVE.L  #BLACK,     D1          ; Set Background color
000029AE  103C 0051               2546      MOVE.B  #81,        D0          ; Task for Background Color
000029B2  4E4F                    2547      TRAP    #15                     ; Trap (Perform action)
000029B4                          2548  
000029B4                          2549      ; Set X, Y, Width and Height
000029B4  2239 00003220           2550      MOVE.L  PLAYER_X,   D1          ; X
000029BA  2439 00003224           2551      MOVE.L  PLAYER_Y,   D2
000029C0                          2552      
000029C0  2639 00003220           2553      MOVE.L  PLAYER_X,   D3
000029C6  B984                    2554      EOR.L   D4,D4
000029C8  1839 00003287           2555      MOVE.B   PLAYER_WIDTH,   D4      ; Width
000029CE  D684                    2556      ADD.L   D4,D3
000029D0  2839 00003224           2557      MOVE.L  PLAYER_Y,   D4 
000029D6  9839 00003288           2558      SUB.B   PLAYER_HEIGHT,   D4      ; Height          ; Y
000029DC                          2559      
000029DC                          2560      ; Draw Player
000029DC  103C 0057               2561      MOVE.B  #87,        D0          ; Draw Player
000029E0  4E4F                    2562      TRAP    #15                     ; Trap (Perform action)
000029E2  6100 0008               2563      BSR     IS_ATTACKING
000029E6  6100 0054               2564      BSR     IS_THROWING
000029EA                          2565  
000029EA  4E75                    2566      RTS                             ; Return to subroutine
000029EC                          2567  
000029EC                          2568  IS_ATTACKING:
000029EC  4A39 00003260           2569      TST.B   CURRENTLYATTACKING
000029F2  6600 0004               2570      BNE     DRAW_ATTACK
000029F6  4E75                    2571      RTS
000029F8                          2572  DRAW_ATTACK:
000029F8                          2573  
000029F8                          2574      ; Set Pixel Colors
000029F8  223C 00FFFFFF           2575      MOVE.L  #WHITE,     D1          ; Set Background color
000029FE  103C 0050               2576      MOVE.B  #80,        D0          ; Task for Background Color
00002A02  4E4F                    2577      TRAP    #15                     ; Trap (Perform action)
00002A04                          2578      ; Reset Pixel Colors
00002A04  223C 00FFFFFF           2579      MOVE.L  #WHITE,     D1          ; Set Background color
00002A0A  103C 0051               2580      MOVE.B  #81,        D0          ; Task for Background Color
00002A0E  4E4F                    2581      TRAP    #15                     ; Trap (Perform action)
00002A10                          2582  
00002A10  2239 00003266           2583      MOVE.L  ATTACK_X,   D1          ; X
00002A16  2439 0000326A           2584      MOVE.L  ATTACK_Y,   D2
00002A1C                          2585      
00002A1C  2639 00003266           2586      MOVE.L  ATTACK_X,   D3
00002A22  0683 00000023           2587      ADD.L   #ATTACK_WIDTH,   D3      ; Width
00002A28  2839 0000326A           2588      MOVE.L  ATTACK_Y,   D4 
00002A2E  0484 00000014           2589      SUB.L   #ATTACK_HEIGHT,   D4      ; Height          ; Y
00002A34                          2590      
00002A34                          2591      ; Draw Player
00002A34  103C 0057               2592      MOVE.B  #87,        D0          ; Draw Player
00002A38  4E4F                    2593      TRAP    #15                     ; Trap (Perform action)
00002A3A  4E75                    2594      RTS                             ; Return to subroutine
00002A3C                          2595  
00002A3C                          2596  IS_THROWING:
00002A3C  4A39 0000326E           2597      TST.B   CURRENTLYTHROWING
00002A42  6600 0004               2598      BNE     DRAW_THROW
00002A46  4E75                    2599      RTS
00002A48                          2600  DRAW_THROW:
00002A48                          2601  
00002A48                          2602      ; Set Pixel Colors
00002A48  223C 0019506D           2603      MOVE.L  #BROWN,     D1          ; Set Background color
00002A4E  103C 0050               2604      MOVE.B  #80,        D0          ; Task for Background Color
00002A52  4E4F                    2605      TRAP    #15                     ; Trap (Perform action)
00002A54                          2606      ; Reset Pixel Colors
00002A54  223C 0019506D           2607      MOVE.L  #BROWN,     D1          ; Set Background color
00002A5A  103C 0051               2608      MOVE.B  #81,        D0          ; Task for Background Color
00002A5E  4E4F                    2609      TRAP    #15                     ; Trap (Perform action)
00002A60                          2610  
00002A60  2239 00003274           2611      MOVE.L  THROW_X,   D1          ; X
00002A66  2439 00003278           2612      MOVE.L  THROW_Y,   D2
00002A6C                          2613      
00002A6C  2639 00003274           2614      MOVE.L  THROW_X,   D3
00002A72  0683 0000000F           2615      ADD.L   #THRW_W_INIT,   D3      ; Width
00002A78  2839 00003278           2616      MOVE.L  THROW_Y,   D4 
00002A7E  0484 0000000F           2617      SUB.L   #THRW_H_INIT,   D4      ; Height          ; Y
00002A84                          2618      
00002A84                          2619      ; Draw Acorn
00002A84  103C 0057               2620      MOVE.B  #87,        D0          ; Draw Player
00002A88  4E4F                    2621      TRAP    #15                     ; Trap (Perform action)
00002A8A  4E75                    2622      RTS                             ; Return to subroutine
00002A8C                          2623  
00002A8C                          2624  DRAW_ENEMY:
00002A8C                          2625      ; Set Pixel Colors
00002A8C  2239 00003252           2626      MOVE.L  ENEMYCOLOR,       D1          ; Set Background color
00002A92  103C 0050               2627      MOVE.B  #80,        D0          ; Task for Background Color
00002A96  4E4F                    2628      TRAP    #15                     ; Trap (Perform action)
00002A98                          2629  
00002A98                          2630      ; Reset Pixel Colors
00002A98  2239 00003252           2631      MOVE.L  ENEMYCOLOR,     D1          ; Set Background color
00002A9E  103C 0051               2632      MOVE.B  #81,        D0          ; Task for Background Color
00002AA2  4E4F                    2633      TRAP    #15                     ; Trap (Perform action)
00002AA4                          2634  
00002AA4                          2635      ; Set X, Y, Width and Height
00002AA4  2239 0000323A           2636      MOVE.L  ENEMY_X,    D1          ; X
00002AAA  2439 0000323E           2637      MOVE.L  ENEMY_Y,    D2          ; Y
00002AB0  2639 0000323A           2638      MOVE.L  ENEMY_X,    D3
00002AB6  D679 0000328A           2639      ADD.W   ENEMY_WIDTH,   D3      ; Width
00002ABC  2839 0000323E           2640      MOVE.L  ENEMY_Y,    D4 
00002AC2  9879 0000328C           2641      SUB.W   ENEMY_HEIGHT,   D4      ; Height
00002AC8                          2642      
00002AC8                          2643      ; Draw Enemy    
00002AC8  103C 0057               2644      MOVE.B  #87,        D0          ; Draw Enemy
00002ACC  4E4F                    2645      TRAP    #15                     ; Trap (Perform action)
00002ACE  4E75                    2646      RTS                             ; Return to subroutine
00002AD0                          2647  
00002AD0                          2648  DRAW_FLYENEMY:
00002AD0                          2649      ; Set Pixel Colors
00002AD0  2239 00003256           2650      MOVE.L  FLYENEMYCOLOR,       D1          ; Set Background color
00002AD6  103C 0050               2651      MOVE.B  #80,        D0          ; Task for Background Color
00002ADA  4E4F                    2652      TRAP    #15                     ; Trap (Perform action)
00002ADC                          2653  
00002ADC                          2654      ; Reset Pixel Colors
00002ADC  2239 00003256           2655      MOVE.L  FLYENEMYCOLOR,     D1          ; Set Background color
00002AE2  103C 0051               2656      MOVE.B  #81,        D0          ; Task for Background Color
00002AE6  4E4F                    2657      TRAP    #15                     ; Trap (Perform action)
00002AE8                          2658  
00002AE8                          2659      ; Set X, Y, Width and Height
00002AE8  2239 0000324A           2660      MOVE.L  FLYINGENEMY_X,    D1          ; X
00002AEE  2439 0000324E           2661      MOVE.L  FLYINGENEMY_Y,    D2          ; Y
00002AF4  2639 0000324A           2662      MOVE.L  FLYINGENEMY_X,    D3
00002AFA  D679 0000328E           2663      ADD.W   FLYENEMY_WIDTH,   D3      ; Width
00002B00  2839 0000324E           2664      MOVE.L  FLYINGENEMY_Y,    D4 
00002B06  9879 00003290           2665      SUB.W   FLYENEMY_HEIGHT,   D4      ; Height
00002B0C                          2666      
00002B0C                          2667      ; Draw Enemy    
00002B0C  103C 0057               2668      MOVE.B  #87,        D0          ; Draw Enemy
00002B10  4E4F                    2669      TRAP    #15                     ; Trap (Perform action)
00002B12  4E75                    2670      RTS  
00002B14                          2671  
00002B14                          2672  DRAW_HEALTHPACK:
00002B14                          2673  
00002B14  0C39 0000 00003200      2674      CMP.B   #00,     SPAWN_HEALTHPACKS
00002B1C  6700 006C               2675      BEQ     DRAW_HEALTHPACK_DONE
00002B20  0C39 0000 000031FF      2676      CMP.B   #00,     DRAW_HEALTHPACKS
00002B28  6700 0060               2677      BEQ     DRAW_HEALTHPACK_DONE
00002B2C                          2678      
00002B2C                          2679      ;BSR     RANDOM_NUMBER
00002B2C                          2680      ;CMP.L   #$80,  D1
00002B2C                          2681      ;BGT     DRAW_HEALTHPACK_DONE
00002B2C                          2682  
00002B2C  13FC 0001 000031FF      2683      MOVE.B  #01,        DRAW_HEALTHPACKS
00002B34  3239 00003218           2684      MOVE.W  SCREEN_H,     D1
00002B3A  82FC 0002               2685      DIVU.W    #02,        D1
00002B3E  C2BC 0000FFFF           2686      AND.L   #$0000FFFF,   D1
00002B44  23C1 00003246           2687      MOVE.L  D1,         HEALTH_Y
00002B4A                          2688      ; Set Pixel Colors
00002B4A  7200                    2689      MOVE.L  #BLACK,       D1          ; Set Background color
00002B4C  103C 0050               2690      MOVE.B  #80,        D0          ; Task for Background Color
00002B50  4E4F                    2691      TRAP    #15                     ; Trap (Perform action)
00002B52                          2692  
00002B52                          2693      ; Reset Pixel Colors
00002B52  223C 0044FF44           2694      MOVE.L  #LIFEGREEN,     D1          ; Set Background color
00002B58  103C 0051               2695      MOVE.B  #81,        D0          ; Task for Background Color
00002B5C  4E4F                    2696      TRAP    #15                     ; Trap (Perform action)
00002B5E                          2697  
00002B5E                          2698      ; Set X, Y, Width and Height
00002B5E  2239 00003242           2699      MOVE.L  HEALTH_X,    D1          ; X
00002B64  2439 00003246           2700      MOVE.L  HEALTH_Y,    D2          ; Y
00002B6A  2639 00003242           2701      MOVE.L  HEALTH_X,    D3
00002B70  0683 0000000C           2702      ADD.L   #HEALTH_PACK_W,   D3      ; Width
00002B76  2839 00003246           2703      MOVE.L  HEALTH_Y,    D4 
00002B7C  0484 0000000C           2704      SUB.L   #HEALTH_PACK_H,   D4      ; Height
00002B82                          2705      
00002B82                          2706      ; Draw Enemy    
00002B82  103C 0057               2707      MOVE.B  #87,        D0          ; Draw Enemy
00002B86  4E4F                    2708      TRAP    #15                     ; Trap (Perform action)
00002B88  4E75                    2709      RTS                             ; Return to subroutine
00002B8A                          2710  
00002B8A                          2711  DRAW_HEALTHPACK_DONE:
00002B8A  23FC FFFFFFFF 00003246  2712      MOVE.L  #-1, HEALTH_Y
00002B94  4E75                    2713      RTS
00002B96                          2714  
00002B96                          2715  DRAW_FLOOR:
00002B96                          2716      ; Set Pixel Colors
00002B96  223C 00566D19           2717      MOVE.L  #GREEN,     D1          ; Set Background color
00002B9C  103C 0050               2718      MOVE.B  #80,        D0          ; Task for Background Color
00002BA0  4E4F                    2719      TRAP    #15                     ; Trap (Perform action)
00002BA2                          2720  
00002BA2  223C 00566D19           2721      MOVE.L  #GREEN,     D1
00002BA8  103C 0051               2722      MOVE.B  #81,        D0
00002BAC  4E4F                    2723      TRAP    #15
00002BAE                          2724  
00002BAE                          2725      
00002BAE                          2726      ; Set X, Y, X2, and Y2
00002BAE  7200                    2727      MOVE.L  #0,   D1          ; X
00002BB0  243C 000000F1           2728      MOVE.L  #241,  D2          ; Y
00002BB6  263C 00000280           2729      MOVE.L  #640,   D3           
00002BBC  283C 000001E0           2730      MOVE.L  #480,   D4 
00002BC2                          2731      
00002BC2                          2732      ; Draw grass
00002BC2  103C 0057               2733      MOVE.B  #87,        D0          ; Draw Line
00002BC6  4E4F                    2734      TRAP    #15                     ; Trap (Perform action)
00002BC8                          2735  
00002BC8                          2736      ; Set Pixel Colors
00002BC8  223C 0019506D           2737      MOVE.L  #BROWN,     D1          ; Set Background color
00002BCE  103C 0050               2738      MOVE.B  #80,        D0          ; Task for Background Color
00002BD2  4E4F                    2739      TRAP    #15                     ; Trap (Perform action)
00002BD4                          2740  
00002BD4  223C 0019506D           2741      MOVE.L  #BROWN,     D1
00002BDA  103C 0051               2742      MOVE.B  #81,        D0
00002BDE  4E4F                    2743      TRAP    #15
00002BE0                          2744  
00002BE0  45F9 00003206           2745      LEA     LEVELS,      A2
00002BE6  2A39 00003228           2746      MOVE.L  PLAYER_SCORE,   D5
00002BEC                          2747      ;CMP.L   (A2)+,       D5
00002BEC                          2748      ;BGT     DRAW_FLOOR_L5
00002BEC                          2749      ;CMP.L   (A2)+,       D5
00002BEC                          2750      ;BGT     DRAW_FLOOR_L4
00002BEC                          2751      ;CMP.L   (A2)+,       D5
00002BEC                          2752      ;BGT     DRAW_FLOOR_L3
00002BEC                          2753      ;CMP.L   (A2)+,       D5
00002BEC                          2754      ;BGT     DRAW_FLOOR_L2
00002BEC  6000 0074               2755      BRA     DRAW_FLOOR_L1
00002BF0                          2756  
00002BF0                          2757  DRAW_FLOOR_L5:
00002BF0  33FC 000C 000032E0      2758      MOVE.W  #12,SCALER
00002BF8  243C 000001E0           2759      MOVE.L  #480,   D2          ; Y
00002BFE                          2760      ;MOVE.L  #135, FLYINGENEMY_Y
00002BFE                          2761      ;MOVE.W  #40, FLYENEMY_HEIGHT
00002BFE                          2762      ;MOVE.W  #65, FLYENEMY_WIDTH
00002BFE                          2763      ;MOVE.W  #40, ENEMY_HEIGHT
00002BFE                          2764      ;MOVE.W  #40, ENEMY_WIDTH
00002BFE  6000 006C               2765      BRA     DRAWDIRT
00002C02                          2766      
00002C02                          2767  DRAW_FLOOR_L4:
00002C02  33FC 000A 000032E0      2768      MOVE.W  #10,SCALER
00002C0A  243C 000001E0           2769      MOVE.L  #480,   D2          ; Y
00002C10                          2770      ;MOVE.L  #140, FLYINGENEMY_Y
00002C10                          2771      ;MOVE.W  #45, FLYENEMY_HEIGHT
00002C10                          2772      ;MOVE.W  #55, FLYENEMY_WIDTH
00002C10                          2773      ;MOVE.W  #30, ENEMY_HEIGHT
00002C10                          2774      ;MOVE.W  #30, ENEMY_WIDTH
00002C10  6000 005A               2775      BRA     DRAWDIRT
00002C14                          2776  DRAW_FLOOR_L3:
00002C14  33FC 0008 000032E0      2777      MOVE.W  #8,SCALER
00002C1C  243C 000001AE           2778      MOVE.L  #430,   D2          ; Y
00002C22                          2779      ;MOVE.L  #160, FLYINGENEMY_Y
00002C22                          2780      ;MOVE.W  #25, FLYENEMY_HEIGHT
00002C22                          2781      ;MOVE.W  #35, FLYENEMY_WIDTH
00002C22                          2782      ;MOVE.W  #25, ENEMY_HEIGHT
00002C22                          2783      ;MOVE.W  #25, ENEMY_WIDTH
00002C22  6000 0048               2784      BRA     DRAWDIRT
00002C26                          2785  DRAW_FLOOR_L2:
00002C26  33FC 0006 000032E0      2786      MOVE.W  #6,SCALER
00002C2E  243C 0000014A           2787      MOVE.L  #330,   D2          ; Y
00002C34  23FC 000000AA 0000324E  2788      MOVE.L  #170, FLYINGENEMY_Y
00002C3E  33FC 000F 00003290      2789      MOVE.W  #15, FLYENEMY_HEIGHT
00002C46  33FC 0019 0000328E      2790      MOVE.W  #25, FLYENEMY_WIDTH
00002C4E  33FC 000F 0000328C      2791      MOVE.W  #15, ENEMY_HEIGHT
00002C56  33FC 000F 0000328A      2792      MOVE.W  #15, ENEMY_WIDTH
00002C5E                          2793  
00002C5E  6000 000C               2794      BRA     DRAWDIRT
00002C62                          2795  DRAW_FLOOR_L1:
00002C62  243C 00000115           2796      MOVE.L  #277,   D2          ; Y
00002C68  6000 0002               2797      BRA     DRAWDIRT
00002C6C                          2798  DRAWDIRT:
00002C6C                          2799      ; Set X, Y, X2, and Y2
00002C6C  7200                    2800      MOVE.L  #0,   D1          ; X
00002C6E  263C 00000280           2801      MOVE.L  #640,   D3           
00002C74  283C 000001E0           2802      MOVE.L  #480,   D4 
00002C7A                          2803      
00002C7A                          2804      ; Draw Dirt
00002C7A  103C 0057               2805      MOVE.B  #87,        D0          ; Draw Line
00002C7E  4E4F                    2806      TRAP    #15                     ; Trap (Perform action)
00002C80                          2807  
00002C80                          2808  
00002C80                          2809      ; Reset Pixel Colors
00002C80  7200                    2810      MOVE.L  #$00000000,     D1          ; Set Background color
00002C82  103C 0050               2811      MOVE.B  #80,        D0          ; Task for Background Color
00002C86  4E4F                    2812      TRAP    #15                     ; Trap (Perform action)
00002C88                          2813  
00002C88                          2814      ; Reset Pixel Colors
00002C88  7200                    2815      MOVE.L  #$00000000,     D1          ; Set Background color
00002C8A  103C 0051               2816      MOVE.B  #81,        D0          ; Task for Background Color
00002C8E  4E4F                    2817      TRAP    #15                     ; Trap (Perform action)
00002C90                          2818  
00002C90  4E75                    2819      RTS                             ; Return to subroutine
00002C92                          2820  
00002C92                          2821  CHECK_COLLISIONS:
00002C92                          2822  
00002C92  4281                    2823      CLR.L   D1                      ; Clear D1
00002C94  4282                    2824      CLR.L   D2                      ; Clear D2
00002C96                          2825  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
00002C96  2239 00003220           2826      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00002C9C  D239 00003287           2827      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002CA2  2439 0000323A           2828      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00002CA8  B481                    2829      CMP.L   D1,         D2          ; Do the Overlap ?
00002CAA  6F00 0006               2830      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00002CAE  6000 004C               2831      BRA     CHECK_FLYENEMY_COLLISIONS
00002CB2                          2832  
00002CB2                          2833  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00002CB2  2239 00003220           2834      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00002CB8  2439 0000323A           2835      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00002CBE  D479 0000328A           2836      ADD.W   ENEMY_WIDTH,D2          ; Set Enemy width X + Width
00002CC4  B481                    2837      CMP.L   D1,         D2          ; Do they OverLap ?
00002CC6  6C00 0006               2838      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002CCA  6000 0030               2839      BRA     CHECK_FLYENEMY_COLLISIONS  
00002CCE                          2840  
00002CCE                          2841  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00002CCE  2239 00003224           2842      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002CD4  2439 0000323E           2843      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002CDA  D478 000C               2844      ADD.W   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00002CDE  B481                    2845      CMP.L   D1,         D2          ; Do they Overlap ?
00002CE0  6F00 0006               2846      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00002CE4  6000 0016               2847      BRA     CHECK_FLYENEMY_COLLISIONS
00002CE8                          2848  
00002CE8                          2849  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00002CE8  D238 000C               2850      ADD.B   PLYR_H_INIT,D1          ; Add Player Height to D1
00002CEC  2439 0000323E           2851      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002CF2  B481                    2852      CMP.L   D1,         D2          ; Do they OverLap ?
00002CF4  6C00 030C               2853      BGE     ENEMYCOLLISION               ; Collision !
00002CF8  6000 0002               2854      BRA     CHECK_FLYENEMY_COLLISIONS
00002CFC                          2855  
00002CFC                          2856  CHECK_FLYENEMY_COLLISIONS:
00002CFC  4281                    2857      CLR.L   D1                      ; Clear D1
00002CFE  4282                    2858      CLR.L   D2                      ; Clear D2
00002D00                          2859  PLX_LTE_TO_FLYENEMY_X_PLUS_W:
00002D00  2239 00003220           2860      MOVE.L  PLAYER_X,   D1
00002D06  D239 00003287           2861      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002D0C  2439 0000324A           2862      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002D12  B481                    2863      CMP.L   D1,         D2                          ; Do the Overlap ?
00002D14  6F00 0006               2864      BLE     PLX_PLUS_W_LTE_TO_FLYENEMY_X      ; Less than or Equal ?
00002D18  6000 0050               2865      BRA     CHECK_HEALTH_COLLISIONS
00002D1C                          2866  
00002D1C                          2867  PLX_PLUS_W_LTE_TO_FLYENEMY_X:           ; Check player is not  
00002D1C  2239 00003220           2868      MOVE.L  PLAYER_X,   D1
00002D22  2439 0000324A           2869      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002D28  D479 0000328E           2870      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002D2E  B481                    2871      CMP.L   D1,         D2                  ; Do they OverLap ?
00002D30  6C00 0006               2872      BGE     PLY_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002D34  6000 0034               2873      BRA     CHECK_HEALTH_COLLISIONS
00002D38                          2874  
00002D38                          2875  PLY_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002D38  2239 00003224           2876      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002D3E  2439 0000324E           2877      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002D44  D479 00003290           2878      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002D4A  B481                    2879      CMP.L   D1,         D2          ; Do they Overlap ?
00002D4C  6C00 0006               2880      BGE     PLY_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002D50  6000 0018               2881      BRA     CHECK_HEALTH_COLLISIONS
00002D54                          2882  
00002D54                          2883  PLY_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002D54  D239 00003288           2884      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00002D5A  2439 0000324E           2885      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002D60  B481                    2886      CMP.L   D1,         D2          ; Do they OverLap ?
00002D62  6F00 029E               2887      BLE     ENEMYCOLLISION               ; Collision !
00002D66  6000 0002               2888      BRA     CHECK_HEALTH_COLLISIONS
00002D6A                          2889  
00002D6A                          2890  CHECK_HEALTH_COLLISIONS:
00002D6A  4281                    2891      CLR.L   D1                      ; Clear D1
00002D6C  4282                    2892      CLR.L   D2                      ; Clear D2
00002D6E                          2893  PLX_LTE_TO_HEALTH_X_PLUS_W:
00002D6E  2239 00003220           2894      MOVE.L  PLAYER_X,   D1
00002D74  D239 00003287           2895      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002D7A  2439 00003242           2896      MOVE.L  HEALTH_X,    D2                    ; Move Enemy X to D2
00002D80  B481                    2897      CMP.L   D1,         D2                          ; Do the Overlap ?
00002D82  6F00 0006               2898      BLE     PLX_PLUS_W_LTE_TO_HEALTH_X      ; Less than or Equal ?
00002D86  6000 0050               2899      BRA     CHECK_ATTACK_COLLISIONS
00002D8A                          2900  
00002D8A                          2901  PLX_PLUS_W_LTE_TO_HEALTH_X:           ; Check player is not  
00002D8A  2239 00003220           2902      MOVE.L  PLAYER_X,   D1
00002D90  2439 00003242           2903      MOVE.L  HEALTH_X,    D2            ; Move Enemy X to D2
00002D96  0682 0000000C           2904      ADD.L   #HEALTH_PACK_W,  D2                    ; Set Enemy width X + Width
00002D9C  B481                    2905      CMP.L   D1,         D2                  ; Do they OverLap ?
00002D9E  6C00 0006               2906      BGE     PLY_LTE_TO_HEALTH_Y_PLUS_H  ; Less than or Equal
00002DA2  6000 0034               2907      BRA     CHECK_ATTACK_COLLISIONS
00002DA6                          2908  PLY_LTE_TO_HEALTH_Y_PLUS_H:     
00002DA6  2239 00003224           2909      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002DAC  2439 00003246           2910      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Y to D2
00002DB2  0682 0000000C           2911      ADD.L   #HEALTH_PACK_H,D2          ; Set Enemy Height to D2
00002DB8  B481                    2912      CMP.L   D1,         D2          ; Do they Overlap ?
00002DBA  6C00 0006               2913      BGE     PLY_PLUS_H_LTE_TO_HEALTH_Y  ; Less than or Equal
00002DBE  6000 0018               2914      BRA     CHECK_ATTACK_COLLISIONS
00002DC2                          2915  
00002DC2                          2916  PLY_PLUS_H_LTE_TO_HEALTH_Y:     ; Less than or Equal ?
00002DC2  D239 00003288           2917      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00002DC8  2439 00003246           2918      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Height to D2  
00002DCE  B481                    2919      CMP.L   D1,         D2          ; Do they OverLap ?
00002DD0  6F00 0276               2920      BLE     HEALTH_COLLISION               ; Collision !
00002DD4  6000 0002               2921      BRA     CHECK_ATTACK_COLLISIONS
00002DD8                          2922  
00002DD8                          2923  CHECK_ATTACK_COLLISIONS:
00002DD8  4281                    2924      CLR.L   D1                      ; Clear D1
00002DDA  4282                    2925      CLR.L   D2                      ; Clear D2
00002DDC                          2926  ATTACK_X_LTE_TO_ENEMY_X_PLUS_W:
00002DDC  2239 00003266           2927      MOVE.L  ATTACK_X,   D1
00002DE2  0681 00000023           2928      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002DE8  2439 0000323A           2929      MOVE.L  ENEMY_X,    D2                    ; Move Enemy X to D2
00002DEE  B481                    2930      CMP.L   D1,         D2                          ; Do the Overlap ?
00002DF0  6F00 0006               2931      BLE     ATTACK_PLUS_W_LTE_TO_ENMY_X      ; Less than or Equal ?
00002DF4  6000 0050               2932      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002DF8                          2933  
00002DF8                          2934  ATTACK_PLUS_W_LTE_TO_ENMY_X:           ; Check player is not  
00002DF8  2239 00003266           2935      MOVE.L  ATTACK_X,   D1
00002DFE  2439 0000323A           2936      MOVE.L  ENEMY_X,    D2            ; Move Enemy X to D2
00002E04  D479 0000328A           2937      ADD.W   ENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002E0A  B481                    2938      CMP.L   D1,         D2                  ; Do they OverLap ?
00002E0C  6C00 0006               2939      BGE     ATK_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002E10  6000 0034               2940      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002E14                          2941  
00002E14                          2942  ATK_LTE_TO_ENEMY_Y_PLUS_H:     
00002E14  2239 0000326A           2943      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002E1A  2439 0000323E           2944      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002E20  D479 0000328C           2945      ADD.W   ENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002E26  B481                    2946      CMP.L   D1,         D2          ; Do they Overlap ?
00002E28  6C00 0006               2947      BGE     ATK_PLUS_H_LTE_TO_ATTACK_Y  ; Less than or Equal
00002E2C  6000 0018               2948      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002E30                          2949  
00002E30                          2950  ATK_PLUS_H_LTE_TO_ATTACK_Y:     ; Less than or Equal ?
00002E30  0681 00000014           2951      ADD.L   #ATTACK_HEIGHT,D1          ; Add Player Height to D1
00002E36  2439 0000323E           2952      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002E3C  B481                    2953      CMP.L   D1,         D2          ; Do they OverLap ?
00002E3E  6F00 0150               2954      BLE     ATTACK_COLLISION               ; Collision !
00002E42  6000 0002               2955      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002E46                          2956  
00002E46                          2957  CHECK_ATTACK_FLY_COLLISIONS:
00002E46  4281                    2958      CLR.L   D1                      ; Clear D1
00002E48  4282                    2959      CLR.L   D2                      ; Clear D2
00002E4A                          2960  ATK_X_LTE_TO_FLYENEMY_X_PLUS_W:
00002E4A  2239 00003266           2961      MOVE.L  ATTACK_X,   D1
00002E50  0681 00000023           2962      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002E56  2439 0000324A           2963      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002E5C  B481                    2964      CMP.L   D1,         D2                          ; Do the Overlap ?
00002E5E  6F00 0006               2965      BLE     ATTACK_PLUS_W_LTE_TO_FLYENMY_X     ; Less than or Equal ?
00002E62  6000 0050               2966      BRA     CHECK_THROW_COLLISION
00002E66                          2967  
00002E66                          2968  ATTACK_PLUS_W_LTE_TO_FLYENMY_X:           ; Check player is not  
00002E66  2239 00003266           2969      MOVE.L  ATTACK_X,   D1
00002E6C  2439 0000324A           2970      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002E72  D479 0000328E           2971      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002E78  B481                    2972      CMP.L   D1,         D2                  ; Do they OverLap ?
00002E7A  6C00 0006               2973      BGE     ATK_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002E7E  6000 0034               2974      BRA     CHECK_THROW_COLLISION
00002E82                          2975  
00002E82                          2976  ATK_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002E82  2239 0000326A           2977      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002E88  2439 0000324E           2978      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002E8E  D479 00003290           2979      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002E94  B481                    2980      CMP.L   D1,         D2          ; Do they Overlap ?
00002E96  6C00 0006               2981      BGE     ATK_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002E9A  6000 0018               2982      BRA     CHECK_THROW_COLLISION
00002E9E                          2983  
00002E9E                          2984  ATK_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002E9E  0681 00000014           2985      ADD.L   #ATTACK_HEIGHT,D1          ; Add Player Height to D1
00002EA4  2439 0000324E           2986      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002EAA  B481                    2987      CMP.L   D1,         D2          ; Do they OverLap ?
00002EAC  6F00 010A               2988      BLE     ATTACK_FLY_COLLISION               ; Collision !
00002EB0  6000 0002               2989      BRA     CHECK_THROW_COLLISION
00002EB4                          2990  
00002EB4                          2991  CHECK_THROW_COLLISION:
00002EB4  4281                    2992      CLR.L   D1                      ; Clear D1
00002EB6  4282                    2993      CLR.L   D2                      ; Clear D2
00002EB8                          2994  THROW_X_LTE_TO_ENEMY_X_PLUS_W:
00002EB8  2239 00003274           2995      MOVE.L  THROW_X,   D1
00002EBE  0681 00000023           2996      ADD.L   #THROW_WIDTH,D1          ; Move Player Width to D1
00002EC4  2439 0000323A           2997      MOVE.L  ENEMY_X,    D2                    ; Move Enemy X to D2
00002ECA  B481                    2998      CMP.L   D1,         D2                          ; Do the Overlap ?
00002ECC  6F00 0006               2999      BLE     THROW_PLUS_W_LTE_TO_ENMY_X      ; Less than or Equal ?
00002ED0  6000 0050               3000      BRA     CHECK_THROW_FLY_COLLISIONS
00002ED4                          3001  
00002ED4                          3002  THROW_PLUS_W_LTE_TO_ENMY_X:           ; Check player is not  
00002ED4  2239 00003274           3003      MOVE.L  THROW_X,   D1
00002EDA  2439 0000323A           3004      MOVE.L  ENEMY_X,    D2            ; Move Enemy X to D2
00002EE0  D479 0000328A           3005      ADD.W   ENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002EE6  B481                    3006      CMP.L   D1,         D2                  ; Do they OverLap ?
00002EE8  6C00 0006               3007      BGE     TRW_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002EEC  6000 0034               3008      BRA     CHECK_THROW_FLY_COLLISIONS
00002EF0                          3009  
00002EF0                          3010  TRW_LTE_TO_ENEMY_Y_PLUS_H:     
00002EF0  2239 00003278           3011      MOVE.L  THROW_Y,   D1          ; Move Player Y to D1
00002EF6  2439 0000323E           3012      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002EFC  D479 0000328C           3013      ADD.W   ENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002F02  B481                    3014      CMP.L   D1,         D2          ; Do they Overlap ?
00002F04  6C00 0006               3015      BGE     TRW_PLUS_H_LTE_TO_THROW_Y  ; Less than or Equal
00002F08  6000 0018               3016      BRA     CHECK_THROW_FLY_COLLISIONS
00002F0C                          3017  
00002F0C                          3018  TRW_PLUS_H_LTE_TO_THROW_Y:     ; Less than or Equal ?
00002F0C  0681 0000000F           3019      ADD.L   #THRW_H_INIT,D1          ; Add Player Height to D1
00002F12  2439 0000323E           3020      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002F18  B481                    3021      CMP.L   D1,         D2          ; Do they OverLap ?
00002F1A  6F00 0074               3022      BLE     ATTACK_COLLISION               ; Collision !
00002F1E  6000 0002               3023      BRA     CHECK_THROW_FLY_COLLISIONS
00002F22                          3024  
00002F22                          3025  CHECK_THROW_FLY_COLLISIONS:
00002F22  4281                    3026      CLR.L   D1                      ; Clear D1
00002F24  4282                    3027      CLR.L   D2                      ; Clear D2
00002F26                          3028  THROW_X_LTE_TO_FLYENEMY_X_PLUS_W:
00002F26  2239 00003274           3029      MOVE.L  THROW_X,   D1
00002F2C  0681 0000000F           3030      ADD.L   #THRW_W_INIT,D1          ; Move Player Width to D1
00002F32  2439 0000324A           3031      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002F38  B481                    3032      CMP.L   D1,         D2                          ; Do the Overlap ?
00002F3A  6F00 0006               3033      BLE     THROW_PLUS_W_LTE_TO_FLYENMY_X     ; Less than or Equal ?
00002F3E  6000 00A0               3034      BRA     COLLISION_CHECK_DONE
00002F42                          3035  
00002F42                          3036  THROW_PLUS_W_LTE_TO_FLYENMY_X:           ; Check player is not  
00002F42  2239 00003274           3037      MOVE.L  THROW_X,   D1
00002F48  2439 0000324A           3038      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002F4E  D479 0000328E           3039      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002F54  B481                    3040      CMP.L   D1,         D2                  ; Do they OverLap ?
00002F56  6C00 0006               3041      BGE     TRW_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002F5A  6000 0084               3042      BRA     COLLISION_CHECK_DONE
00002F5E                          3043  
00002F5E                          3044  TRW_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002F5E  2239 00003278           3045      MOVE.L  THROW_Y,   D1          ; Move Player Y to D1
00002F64  2439 0000324E           3046      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002F6A  D479 00003290           3047      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002F70  B481                    3048      CMP.L   D1,         D2          ; Do they Overlap ?
00002F72  6C00 0006               3049      BGE     TRW_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002F76  6000 0068               3050      BRA     COLLISION_CHECK_DONE
00002F7A                          3051  
00002F7A                          3052  TRW_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002F7A  0681 0000000F           3053      ADD.L   #THRW_H_INIT,D1          ; Add Player Height to D1
00002F80  2439 0000324E           3054      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002F86  B481                    3055      CMP.L   D1,         D2          ; Do they OverLap ?
00002F88  6F00 002E               3056      BLE     ATTACK_FLY_COLLISION               ; Collision !
00002F8C  6000 0052               3057      BRA     COLLISION_CHECK_DONE
00002F90                          3058  
00002F90                          3059  
00002F90                          3060  ;---
00002F90                          3061  
00002F90                          3062  ATTACK_COLLISION:
00002F90  4A39 00003285           3063      TST.B   ENEMY_HIT
00002F96  6600 00EE               3064      BNE     STILL_COLLIDED
00002F9A  6100 F9FC               3065      BSR     PLAY_HIT
00002F9E  23FC 00000190 0000323E  3066      MOVE.L  #400, ENEMY_Y
00002FA8  13FC 0001 00003285      3067      MOVE.B  #01,  ENEMY_HIT
00002FB0  5239 00003284           3068      ADDI.B  #1,   ENEMIES_DEFEATED
00002FB6  4E75                    3069      RTS
00002FB8                          3070  
00002FB8                          3071  ATTACK_FLY_COLLISION:
00002FB8  4A39 00003286           3072      TST.B   FLYENEMY_HIT
00002FBE  6600 00C6               3073      BNE     STILL_COLLIDED
00002FC2  6100 F9D4               3074      BSR     PLAY_HIT
00002FC6  23FC 00000190 0000324E  3075      MOVE.L  #400, FLYINGENEMY_Y
00002FD0  13FC 0001 00003286      3076      MOVE.B  #01,  FLYENEMY_HIT
00002FD8  5239 00003284           3077      ADDI.B  #1,   ENEMIES_DEFEATED
00002FDE  4E75                    3078      RTS
00002FE0                          3079  
00002FE0                          3080  COLLISION_CHECK_DONE:               ; No Collision Update points
00002FE0  4239 000031FD           3081      CLR.B   IN_ENEMY
00002FE6  4239 000031FE           3082      CLR.B   IN_HPACK
00002FEC  4281                    3083      CLR.L   D1
00002FEE  1239 0000325F           3084      MOVE.B  POINTS,    D1          ; Move points upgrade to D1
00002FF4  D2B9 00003228           3085      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00002FFA  23C1 00003228           3086      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00003000  4E75                    3087      RTS                             ; Return to subroutine
00003002                          3088  
00003002                          3089  
00003002                          3090  ENEMYCOLLISION:
00003002  0C39 0001 000031FD      3091      CMP.B     #$01, IN_ENEMY
0000300A  6700 007A               3092      BEQ     STILL_COLLIDED
0000300E  0C39 0001 000031FF      3093      CMP.B   #01, DRAW_HEALTHPACKS
00003016  6600 F4B0               3094      BNE     RESET_HEALTH_POSITION
0000301A  13FC 0001 000031FF      3095      MOVE.B  #01, DRAW_HEALTHPACKS 
00003022  13FC 0001 00003200      3096      MOVE.B  #01, SPAWN_HEALTHPACKS 
0000302A  5339 0000325E           3097      SUB.B   #1, LIVES
00003030  13FC 0001 000031FD      3098      MOVE.B  #$01, IN_ENEMY
00003038  4A39 0000325E           3099      TST.B   LIVES
0000303E  6700 0048               3100      BEQ     GAME_OVER
00003042  6100 F8FA               3101      BSR     PLAY_HITHURT               ; Play Opps Wav
00003046  4E75                    3102      RTS                             ; Return to subroutine
00003048                          3103  
00003048                          3104  HEALTH_COLLISION:
00003048  0C39 0001 000031FE      3105      CMP.B     #$01, IN_HPACK
00003050  6700 0034               3106      BEQ     STILL_COLLIDED
00003054  13FC 0000 000031FF      3107      MOVE.B  #00, DRAW_HEALTHPACKS
0000305C  6100 F8FE               3108      BSR     PLAY_POWERUP               ; Play Opps Wav
00003060  5239 0000325E           3109      ADD.B   #1, LIVES
00003066  0C39 0005 0000325E      3110      CMP.B   #05, LIVES
0000306E  6C00 000C               3111      BGE     STOP_HPACK_SPAWN
00003072  13FC 0001 000031FE      3112      MOVE.B  #$01, IN_HPACK
0000307A  4E75                    3113      RTS
0000307C                          3114  
0000307C                          3115  STOP_HPACK_SPAWN:
0000307C  13FC 0000 00003200      3116      MOVE.B  #00, SPAWN_HEALTHPACKS
00003084  4E75                    3117      RTS
00003086                          3118  
00003086                          3119  STILL_COLLIDED:
00003086  4E75                    3120      RTS
00003088                          3121  
00003088                          3122  GAME_OVER:
00003088  6100 E3FA               3123      BSR     DRAW                    ; Redraw the Scene
0000308C  103C 005E               3124      MOVE.B  #TC_REDRAW,        D0
00003090  4E4F                    3125      TRAP    #15
00003092  6100 F86E               3126      BSR     PLAY_GAMEOVER
00003096  4281                    3127      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00003098                          3128  
00003098  223C 00FFFFFF           3129      MOVE.L  #WHITE,     D1
0000309E  103C 0015               3130      MOVE.B  #21,        D0          ; Set Text Color
000030A2  243C 01130005           3131      MOVE.L  #$01130005, D2
000030A8  4E4F                    3132      TRAP    #15                     ; Trap (Perform action)
000030AA                          3133  
000030AA  7200                    3134      MOVE.L  #BLACK,     D1
000030AC  103C 0051               3135      MOVE.B  #81,        D0          ; Set Text Color
000030B0  4E4F                    3136      TRAP    #15                     ; Trap (Perform action)
000030B2                          3137  
000030B2  103C 000B               3138      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000030B6  323C FF00               3139      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000030BA  4E4F                    3140      TRAP    #15                     ; Trap (Perform action)
000030BC                          3141  
000030BC  103C 000B               3142      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000030C0  323C 1005               3143      MOVE.W  #$1005,     D1          ; Col 10, Row 03
000030C4  4E4F                    3144      TRAP    #15                     ; Trap (Perform action)
000030C6  43F9 000031B2           3145      LEA     GAMEOVER_MSG,A1        ; Game Over Message
000030CC  303C 000D               3146      MOVE    #13,        D0          ; No Line feed
000030D0  4E4F                    3147      TRAP    #15                     ; Trap (Perform action)
000030D2                          3148  
000030D2                          3149      ; Player Score Message
000030D2  103C 000B               3150      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000030D6  323C 0F06               3151      MOVE.W  #$0F06,     D1          ; Col 02, Row 01
000030DA  4E4F                    3152      TRAP    #15                     ; Trap (Perform action)
000030DC  43F9 0000314C           3153      LEA     SCORE_MSG,  A1          ; Score Message
000030E2  303C 000D               3154      MOVE    #13,        D0          ; No Line feed
000030E6  4E4F                    3155      TRAP    #15                     ; Trap (Perform action)
000030E8                          3156  
000030E8                          3157      ; Player Score Value
000030E8  103C 000B               3158      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000030EC  323C 1706               3159      MOVE.W  #$1706,     D1          ; Col 09, Row 01
000030F0  4E4F                    3160      TRAP    #15                     ; Trap (Perform action)
000030F2  103C 0003               3161      MOVE.B  #03,        D0          ; Display number at D1.L
000030F6  2239 00003228           3162      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000030FC  4E4F                    3163      TRAP    #15                     ; Trap (Perform action)
000030FE                          3164      
000030FE                          3165  
000030FE  223C 00FFFFFF           3166      MOVE.L  #WHITE,     D1
00003104  103C 0015               3167      MOVE.B  #21,        D0          ; Set Text Color
00003108  243C 03140000           3168      MOVE.L  #$03140000, D2
0000310E  4E4F                    3169      TRAP    #15                     ; Trap (Perform action)
00003110                          3170  
00003110                          3171  
00003110                          3172      ; Restart
00003110  103C 000B               3173      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00003114  323C 0B08               3174      MOVE.W  #$0B08,     D1          ; Col 09, Row 01
00003118  4E4F                    3175      TRAP    #15                     ; Trap (Perform action)
0000311A  43F9 000031BD           3176      LEA     RESTART_MSG,  A1          ; Score Message
00003120  303C 000D               3177      MOVE    #13,        D0          ; No Line feed
00003124  4E4F                    3178      TRAP    #15                     ; Trap (Perform action)
00003126                          3179  
00003126                          3180      
00003126  103C 005E               3181      MOVE.B  #TC_REDRAW,        D0
0000312A  4E4F                    3182      TRAP    #15
0000312C                          3183  
0000312C                          3184  INPUTLOOP:
0000312C  6100 F098               3185      BSR     BATTLEINPUT
00003130  60FA                    3186      BRA     INPUTLOOP
00003132                          3187  
00003132                          3188  EXIT:
00003132                          3189      
00003132  103C 000B               3190      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00003136  323C FF00               3191      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
0000313A  4E4F                    3192      TRAP    #15                     ; Trap (Perform action)
0000313C                          3193  
0000313C  103C 005E               3194      MOVE.B  #TC_REDRAW,        D0
00003140  4E4F                    3195      TRAP    #15
00003142                          3196  
00003142  103C 0009               3197      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00003146  4E4F                    3198      TRAP    #15                     ; Trap (Perform action)
00003148  FFFF FFFF               3199      SIMHALT
0000314C                          3200  
0000314C= 53 63 6F 72 65 20 ...   3201  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00003155= 4B 65 79 43 6F 64 ...   3202  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
00003160= 4A 75 6D 70 2E 2E ...   3203  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00003169                          3204  
00003169= 49 64 6C 65 2E 2E ...   3205  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00003172= 55 70 64 61 74 65 ...   3206  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
0000317D= 44 72 61 77 2E 2E ...   3207  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00003186                          3208  
00003186= 58 3A 00                3209  X_MSG           DC.B    'X:', 0             ; X Position Message
00003189= 59 3A 00                3210  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
0000318C= 56 3A 00                3211  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
0000318F= 44 52 41 57 00          3212  VARMSG           DC.B    'DRAW', 0             ; Gravity Position Message
00003194= 45 4E 45 4D 49 45 ...   3213  GND_MSG         DC.B    'ENEMIES DEFEATED:', 0           ; On Ground Position Message
000031A6                          3214  
000031A6= 45 78 69 74 69 6E ...   3215  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
000031B2= 47 61 6D 65 20 4F ...   3216  GAMEOVER_MSG    DC.B    'Game Over!', 0      ; Game Over Message
000031BD= 50 72 65 73 73 20 ...   3217  RESTART_MSG    DC.B    'Press R to play again', 0      ; Game Over Message
000031D3= 23 23 00                3218  TREET          DC.B     '##',0
000031D6                          3219  
000031D6= 45 6E 74 65 72 20 ...   3220  PRESSSTART      DC.B    'Enter 1 to start',0
000031E7= 41 4E 54 20 44 45 ...   3221  TITLEMSG        DC.B    'ANT DEFENDER',0
000031F4= 4C 69 76 65 73 20 ...   3222  LIVES_MSG       DC.B    'Lives : ',0        ; lives message
000031FD                          3223  
000031FD= 00                      3224  IN_ENEMY        DC.B      00                  ; marker for if the player is in the enemy
000031FE= 00                      3225  IN_HPACK        DC.B      00                  ; marker for if the player is in the health pack
000031FF= 00                      3226  DRAW_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are showing
00003200= 00                      3227  SPAWN_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are spawning
00003201                          3228  
00003202= 07D0                    3229  LEVEL_02        DC.W    2000
00003204= 2710                    3230  LEVEL_03        DC.W    10000
00003206                          3231  
00003206= 00001B58 00000FA0 ...   3232  LEVELS:         DC.L    7000,4000,2000,1000
00003216                          3233  
00003216                          3234  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00003218                          3235  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
0000321A                          3236  
0000321A                          3237  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
0000321E                          3238  LAST_KEY        DS.W    01  ; Reserve Space for Current Key Pressed
00003220                          3239  
00003220                          3240  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00003224                          3241  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00003228                          3242  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
0000322C                          3243  
0000322C                          3244  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00003230                          3245  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00003234                          3246  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00003238                          3247  
00003238                          3248  ; 1, = left, 0 = right
00003238                          3249  PLAYER_DIR      DS.B    01  ; Reserve Space for Player Direction
00003239                          3250  
0000323A                          3251  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
0000323E                          3252  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00003242                          3253  
00003242                          3254  HEALTH_X         DS.L    01  ; Reserve Space for Health+ X Position
00003246                          3255  HEALTH_Y         DS.L    01  ; Reserve Space for Health Y Position
0000324A                          3256  
0000324A                          3257  FLYINGENEMY_X         DS.L    01  ; Reserve Space for Flying Enemy X Position
0000324E                          3258  FLYINGENEMY_Y         DS.L    01  ; Reserve Space for Flying Enemy Y Position
00003252                          3259  
00003252= 000000FF                3260  ENEMYCOLOR        DC.L        $000000FF
00003256= 00FF0000                3261  FLYENEMYCOLOR     DC.L        $00FF0000
0000325A                          3262  
0000325A                          3263  RANDOM            DS.L        01  ; Reserve Space for Random Number
0000325E= 05                      3264  LIVES             DC.B        05  ; reserves space for player lives
0000325F                          3265   
0000325F= 02                      3266  POINTS            DC.B        02          ; Points added
00003260                          3267  
00003260= 00                      3268  CURRENTLYATTACKING   DC.B    00
00003262= 0000                    3269  ATTACK_COOLDOWN      DC.W    00
00003264= 0000                    3270  ATTACK_TIME          DC.W    00
00003266= 00000000                3271  ATTACK_X             DC.L    00
0000326A= 00000000                3272  ATTACK_Y             DC.L    00
0000326E  =00000014               3273  ATTACK_HEIGHT        EQU     20
0000326E  =00000023               3274  ATTACK_WIDTH         EQU     35 
0000326E                          3275  
0000326E= 00                      3276  CURRENTLYTHROWING   DC.B    00
00003270= 0000                    3277  THROW_COOLDOWN      DC.W    00
00003272= 0000                    3278  THROW_TIME          DC.W    00
00003274= 00000000                3279  THROW_X             DC.L    00
00003278= 00000000                3280  THROW_Y             DC.L    00
0000327C  =00000014               3281  THROW_HEIGHT        EQU     20
0000327C  =00000023               3282  THROW_WIDTH         EQU     35 
0000327C                          3283  THROW_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00003280                          3284  THROW_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00003284                          3285  
00003284= 00                      3286  ENEMIES_DEFEATED     DC.B    00
00003285= 00                      3287  ENEMY_HIT           DC.B    00
00003286= 00                      3288  FLYENEMY_HIT        DC.B    00
00003287                          3289  
00003287= 0C                      3290  PLAYER_WIDTH      DC.B        12          ; Player Width
00003288= 0C                      3291  PLAYER_HEIGHT     DC.B        12          ; Player Height
00003289                          3292  
0000328A= 000C                    3293  ENEMY_WIDTH       DC.W        12          ; Enemy Width
0000328C= 000C                    3294  ENEMY_HEIGHT      DC.W        12          ; Enemy Height
0000328E                          3295  
0000328E= 0014                    3296  FLYENEMY_WIDTH    DC.W        20 
00003290= 000C                    3297  FLYENEMY_HEIGHT   DC.W        12 
00003292                          3298  
00003292                          3299          
00003292= 6A 75 6D 70 2E 77 ...   3300  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
0000329B= 67 61 6D 65 4F 76 ...   3301  GAMEOVER_WAV         DC.B    'gameOver.wav',0         ; Run Sound
000032A8= 68 69 74 48 75 72 ...   3302  HITHURT_WAV        DC.B    'hitHurt.wav',0        ; Collision Opps
000032B4= 68 69 74 2E 77 61 ...   3303  HIT_WAV        DC.B    'hit.wav',0        ; Collision Opps
000032BC= 70 6F 77 65 72 55 ...   3304  POWERUP_WAV        DC.B    'powerUP.wav',0        ; Collision Opps
000032C8= 6C 65 76 65 6C 43 ...   3305  LEVELCHANGE_WAV        DC.B    'levelChange.wav',0        ; Collision Opps
000032D8                          3306  
000032D8= 3A0C                    3307  TRUNK   DC.W    $3A0C
000032DA= 00C8                    3308  X   DC.W    200
000032DC= 0190                    3309  Y   DC.W    400
000032DE= 00C8                    3310  Z   DC.W    200
000032E0= 0004                    3311  SCALER DC.W  4
000032E2  =00000010               3312  ROWC    EQU    16
000032E2= FFB0                    3313  WIDTH   DC.W    $FFB0
000032E4                          3314  
000032E4= 00000000                3315  timer           DC.L    0
000032E8                          3316  
000032E8                          3317  ;    END    START        ; last line of source
000032E8                          3318  
000032E8                          3319  
000032E8                          3320  
000032E8                          3321  
000032E8                          3322  -------------------- end include --------------------
000032E8                          3323  
000032E8                          3324      end start

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AKEY                41
APPLEH              10
APPLEW              10
APRESSED            1F82
ARC_DONE            28EC
ATK_LTE_TO_ENEMY_Y_PLUS_H  2E14
ATK_LTE_TO_FLYENEMY_Y_PLUS_H  2E82
ATK_PLUS_H_LTE_TO_ATTACK_Y  2E30
ATK_PLUS_H_LTE_TO_FLYENEMY_Y  2E9E
ATK_X_LTE_TO_FLYENEMY_X_PLUS_W  2E4A
ATTACKMSG1          189D
ATTACKMSG2          18B9
ATTACK_COLLISION    2F90
ATTACK_COOLDOWN     3262
ATTACK_COOLDOWN_SUB  239A
ATTACK_FLY_COLLISION  2FB8
ATTACK_HEIGHT       14
ATTACK_PLUS_W_LTE_TO_ENMY_X  2DF8
ATTACK_PLUS_W_LTE_TO_FLYENMY_X  2E66
ATTACK_TIME         3264
ATTACK_TIME_SUB     2392
ATTACK_WIDTH        23
ATTACK_X            3266
ATTACK_X_LTE_TO_ENEMY_X_PLUS_W  2DDC
ATTACK_Y            326A
BATTLE              1146
BATTLEINPUT         21C6
BLACK               0
BLUE                FF0000
BROWN               19506D
BULLETH             5
BULLETW             5
CAMERAOFFSETX       1DD0
CAMERAOFFSETY       1DD4
CAMERAX             1DD8
CAMERAY             1DDC
CAMERAZOOM          1DE0
CELLBRX             13EE
CELLBRY             13F2
CELLTLX             13E6
CELLTLY             13EA
CELLXRADIUS         1436
CELLYOFFSET         143E
CELLYRADIUS         143A
CENTERX             11EA
CENTERY             11EE
CHECKINCREMENT      1AC2
CHECK_ATTACK_COLLISIONS  2DD8
CHECK_ATTACK_COOLDOWN  2384
CHECK_ATTACK_FLY_COLLISIONS  2E46
CHECK_COLLISIONS    2C92
CHECK_FLYENEMY_COLLISIONS  2CFC
CHECK_HEALTH_COLLISIONS  2D6A
CHECK_THROW_COLLISION  2EB4
CHECK_THROW_DONE    2356
CHECK_THROW_FLY_COLLISIONS  2F22
CLEARSCREEN         1164
COLLISION           1148
COLLISION_CHECK_DONE  2FE0
COLOR1              201808
COLOR2              494320
COLOR3              56864B
COLOR4              7AC687
COLOR5              AFE5D0
COLORRED            463EBD
COMMONINPUT         1E80
CONTINUE            24E0
CRLF                1840
CURRENTHEALTH       11F6
CURRENTHPX          187E
CURRENTKEY          11D8
CURRENTLYATTACKING  3260
CURRENTLYTHROWING   326E
CURRENTPTS          11F2
CURRENTSPAWNX       1AF2
CURRENTSPAWNY       1AF6
CURRENT_KEY         321A
DELAY               21A2
DIRT                4FAD
DKEY                44
DPRESSED            1FAC
DRAW                1484
DRAWBATTLE          2560
DRAWBG              161E
DRAWCELL            16F6
DRAWDIRT            2C6C
DRAWENEMIES         1682
DRAWENEMY           16B2
DRAWHEALTH          1524
DRAWPAUSE           14BC
DRAWPLAYER          164E
DRAWRECT            17B8
DRAWTEXT            157E
DRAWUIRECT          17FA
DRAW_ATTACK         29F8
DRAW_BACKGROUND     2630
DRAW_ENEMY          2A8C
DRAW_FLOOR          2B96
DRAW_FLOOR_L1       2C62
DRAW_FLOOR_L2       2C26
DRAW_FLOOR_L3       2C14
DRAW_FLOOR_L4       2C02
DRAW_FLOOR_L5       2BF0
DRAW_FLYENEMY       2AD0
DRAW_HEALTHPACK     2B14
DRAW_HEALTHPACKS    31FF
DRAW_HEALTHPACK_DONE  2B8A
DRAW_HILL           25A0
DRAW_MSG            317D
DRAW_PLAYER         29A4
DRAW_PLYR_DATA      26D8
DRAW_THROW          2A48
END                 11B8
ENDCOLLIDE          1AAA
ENDCOLLISION        13E4
ENDDRAW             1796
ENDDRAWPAUSE        1522
ENDFOLLOW           1E06
ENDHEAL             11A6
ENDINITENEMY        1AAC
ENDINPUT            1F22
ENDLOOP             1116
ENDMOVEMENT         1FC2
ENDMSG              1854
ENDPROCESS          1AA8
ENDTOGGLEFULLSCREEN  1832
ENEMIES_DEFEATED    3284
ENEMY1OFFSET        0
ENEMY1X             1AD0
ENEMY1Y             1AD4
ENEMY2OFFSET        32
ENEMY2X             1AD8
ENEMY2Y             1ADC
ENEMY3OFFSET        64
ENEMY3X             1AE0
ENEMY3Y             1AE4
ENEMY4OFFSET        96
ENEMY4X             1AE8
ENEMY4Y             1AEC
ENEMYCOLCHECK       1960
ENEMYCOLLIDE        1AA2
ENEMYCOLLISION      3002
ENEMYCOLOR          3252
ENEMYDIR            1DCE
ENEMYH              C
ENEMYHALFH          6
ENEMYHALFW          8
ENEMYINDEX          1AF0
ENEMYLEFTCOLCHECK   1A80
ENEMYRIGHTCOLCHECK  1A8E
ENEMYSPAWNTIMER     1ABC
ENEMYTIME           1AB8
ENEMYW              10
ENEMYX              18E8
ENEMYXMOVE          2
ENEMYY              18EC
ENEMYYMOVE          1
ENEMY_HEIGHT        328C
ENEMY_HIT           3285
ENEMY_H_INIT        C
ENEMY_WIDTH         328A
ENEMY_X             323A
ENEMY_Y             323E
ENMY_H_INIT         C
ENMY_W_INIT         C
ENTERHILL           1452
ENTERKEY            D
ESCAPE              1B
ESCAPEJUSTPRESSED   1F32
ESCAPEKEY           1B
ESCAPEPRESSED       1F24
EXIT                3132
EXIT_MSG            31A6
FIRSTINIT           1004
FLYENEMYCOLOR       3256
FLYENEMY_HEIGHT     3290
FLYENEMY_HIT        3286
FLYENEMY_WIDTH      328E
FLYINGENEMY_X       324A
FLYINGENEMY_Y       324E
FLY_ENMY_H_INIT     C
FLY_ENMY_W_INIT     14
FOLLOWCAM           1DE4
GAME                2198
GAMELOOP            2198
GAMEOVER_INDEX      0
GAMEOVER_LOAD       28F0
GAMEOVER_MSG        31B2
GAMEOVER_WAV        329B
GAME_OVER           3088
GETCURRENTENEMY     1CFA
GETENEMY1           1D2C
GETENEMY2           1D3A
GETENEMY3           1D48
GETENEMY4           1D56
GND_FALSE           0
GND_MSG             3194
GND_TRUE            1
GOFULLSCREEN        1826
GREEN               566D19
HEAL                118A
HEALTHBARLOCY       1884
HEALTHBAROFFSETX    1882
HEALTHBRX           1876
HEALTHBRY           187A
HEALTHMSG           1866
HEALTHROW           1886
HEALTHTLX           186E
HEALTHTLY           1872
HEALTH_COLLISION    3048
HEALTH_PACK_H       C
HEALTH_PACK_W       C
HEALTH_X            3242
HEALTH_Y            3246
HEALTIME            1ABA
HITHURT_INDEX       2
HITHURT_LOAD        292C
HITHURT_WAV         32A8
HIT_INDEX           5
HIT_LOAD            2986
HIT_WAV             32B4
IDLE                28EE
IDLE_MSG            3169
INCREMENT           1ABE
INITALLBL           1C66
INITALLBR           1BEC
INITALLENEMIES      1AFA
INITALLTL           1B58
INITALLTR           1B9A
INITDRAW            1452
INITENEMY           18F0
INITENEMYBL         1A44
INITENEMYBR         1A0C
INITENEMYTL         1998
INITENEMYTR         19D4
INITIALIZECELL      1202
INITRUN             1FC4
INPUTKEYS           11D1
INPUTLOOP           312C
INPUTTYPE           1E7E
IN_ENEMY            31FD
IN_HPACK            31FE
ISFOLLOW            1DE2
ISFULLSCREEN        1852
ISPAUSED            11E0
IS_ATTACKING        29EC
IS_PLAYER_ON_GND    2856
IS_THROWING         2A3C
JMP_INDEX           1
JUMP                28AA
JUMP_DONE           28CC
JUMP_LOAD           290E
JUMP_MSG            3160
JUMP_WAV            3292
KEY0                30
KEY0JUSTPRESSED     1F46
KEY0PRESSED         1F38
KEY1                31
KEY1PRESSED         1F5A
KEY2                32
KEY2PRESSED         1F62
KEY3                33
KEYCODE_MSG         3155
KKEY                4B
LASTKEY             11DC
LAST_KEY            321E
LEVELCHANGE_INDEX   4
LEVELCHANGE_WAV     32C8
LEVELS              3206
LEVEL_02            3202
LEVEL_03            3204
LIFEGREEN           44FF44
LIVES               325E
LIVES_MSG           31F4
LKEY                4C
LOOKLEFT            1
LOOKRIGHT           2
LOOP                110C
LVLCHANGE_LOAD      2968
LVLTYPE             1E22
MAP                 1122
MAPINIT             10BE
MAPINPUT            1EAA
MAPMOVEINPUT        1ED0
MAXHEALTH           11FA
MENUINPUT           1E9E
MOVE_ENEMY          23F8
MOVE_ENEMY_L2       242A
MOVE_ENEMY_L3       2440
MOVE_ENEMY_L4       2456
MOVE_HEALTHPACK     23F0
MOVE_PLAYER_LEFT    23A2
MOVE_PLAYER_RIGHT   23C0
MOVE_THROW          2328
MOVE_TREE           23E8
NEXTINIT            1012
NOINPUT             1E70
PAUSED              1162
PAUSEDINPUT         1F0C
PAUSEHALFHEIGHT     188C
PAUSEHALFWIDTH      1888
PAUSEMSG            1890
PERFORM_ATTACK      24E2
PERFORM_JUMP        28BC
PERFORM_THROW       2522
PERFORM_THROW_ARC   28E0
PLAYERH             8
PLAYERTIME          1AB6
PLAYERW             8
PLAYERX             11E2
PLAYERY             11E6
PLAYER_DIR          3238
PLAYER_HEIGHT       3288
PLAYER_SCORE        3228
PLAYER_WIDTH        3287
PLAYER_X            3220
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  2C96
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  2CB2
PLAYER_Y            3224
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  2CCE
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  2CE8
PLAY_GAMEOVER       2902
PLAY_HIT            2998
PLAY_HITHURT        293E
PLAY_JUMP           2920
PLAY_LVLCHANGE      297A
PLAY_POWERUP        295C
PLX_LTE_TO_FLYENEMY_X_PLUS_W  2D00
PLX_LTE_TO_HEALTH_X_PLUS_W  2D6E
PLX_PLUS_W_LTE_TO_FLYENEMY_X  2D1C
PLX_PLUS_W_LTE_TO_HEALTH_X  2D8A
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        3230
PLYR_H_INIT         C
PLYR_JUMP_V         FFFFFFED
PLYR_ON_GND         3234
PLYR_VELOCITY       322C
PLYR_W_INIT         14
PLY_LTE_TO_FLYENEMY_Y_PLUS_H  2D38
PLY_LTE_TO_HEALTH_Y_PLUS_H  2DA6
PLY_PLUS_H_LTE_TO_FLYENEMY_Y  2D54
PLY_PLUS_H_LTE_TO_HEALTH_Y  2DC2
POINTS              325F
POINTSGAIN          1
POINTSMSG           185E
POINTSROW           1887
POWERUP_INDEX       3
POWERUP_LOAD        294A
POWERUP_WAV         32BC
PRESSSTART          31D6
PRINT               17A8
PRINTNUM            17B0
PROCESSENEMIES      1CD0
PROCESSENEMIESLOOP  1CDA
PROCESSENEMY        192E
PROCESSENEMYBL      1A58
PROCESSENEMYBR      1A1C
PROCESSENEMYTL      19B0
PROCESSENEMYTR      19E8
PROCESS_INPUT       224E
PROCESS_RESTART     227A
RANDOM              325A
RED                 FF
RESET_ENEMY_POSITION  2470
RESET_FLYENEMY_POSITION  249A
RESET_HEALTH_POSITION  24C8
RESET_THROW         2366
RESET_TREE          23DE
RESTART_MSG         31BD
RKEY                52
ROWC                10
RUNACTIONKEYS       41444C20
SAVECURRENTENEMY    1D64
SAVEENEMY1          1D96
SAVEENEMY2          1DA4
SAVEENEMY3          1DB2
SAVEENEMY4          1DC0
SCALER              32E0
SCORE_MSG           314C
SCREENH             1200
SCREENW             11FE
SCREEN_H            3218
SCREEN_W            3216
SETCURSOR           1802
SETFILLCOLOUR       17A0
SETFULLSCREEN       1838
SETPENCOLOUR        1798
SET_OFF_GROUND      289E
SET_ON_GROUND       2876
SKEY                53
SKY                 FFE2B0
SPACEBAR            20
SPACEKEY            20
SPAWN_HEALTHPACKS   3200
SPRESSED            1F96
START               1000
STILL_COLLIDED      3086
STOP_HPACK_SPAWN    307C
TAKEDMG             11A8
TCCRS               B
TCDBL               5C
TCFONT              15
TCFULLSCREEN        21
TCINP               13
TCPENCLR            50
TCPENFIL            51
TCRECT              57
TCSCREEN            21
TCSCREENSIZE        0
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_REDRAW           5E
TC_SCREEN           21
TC_S_SIZE           0
TESTINPUT           1E24
TESTMSG             11CC
THROW_ARC           28CE
THROW_COOLDOWN      3270
THROW_GRAVITY       3280
THROW_HEIGHT        14
THROW_PLUS_W_LTE_TO_ENMY_X  2ED4
THROW_PLUS_W_LTE_TO_FLYENMY_X  2F42
THROW_TIME          3272
THROW_VELOCITY      327C
THROW_WIDTH         23
THROW_X             3274
THROW_X_LTE_TO_ENEMY_X_PLUS_W  2EB8
THROW_X_LTE_TO_FLYENEMY_X_PLUS_W  2F26
THROW_Y             3278
THRW_DFLT_G         1
THRW_DFLT_V         0
THRW_H_INIT         F
THRW_JUMP_V         FFFFFFF0
THRW_W_INIT         F
TIMER               32E4
TITLE               104E
TITLE1MSG           1092
TITLE2MSG           10A4
TITLELOOP           1084
TITLEMSG            31E7
TOGGLEFOLLOW        1E08
TOGGLEFULLSCREEN    180A
TOGGLEPAUSE         117A
TREET               31D3
TREE_LEAVES_X       26AA
TREE_LEAVES_Y       269E
TREE_LOOP           2666
TRUNK               32D8
TRW_LTE_TO_ENEMY_Y_PLUS_H  2EF0
TRW_LTE_TO_FLYENEMY_Y_PLUS_H  2F5E
TRW_PLUS_H_LTE_TO_FLYENEMY_Y  2F7A
TRW_PLUS_H_LTE_TO_THROW_Y  2F0C
TURNONFOLLOW        1E1A
UPDATE              228A
UPDATE_MSG          3172
VARMSG              318F
V_MSG               318C
WASDKEYS            57415344
WASTETIME           1170
WHITE               FFFFFF
WIDTH               32E2
WKEY                57
WPRESSED            1F6E
X                   32DA
X_MSG               3186
Y                   32DC
Y_MSG               3189
Z                   32DE
ZKEY                5A
ZONE1BRX            13FE
ZONE1BRY            1402
ZONE1COLLISION      1338
ZONE1TLX            13F6
ZONE1TLY            13FA
ZONE2BRX            140E
ZONE2BRY            1412
ZONE2COLLISION      1366
ZONE2TLX            1406
ZONE2TLY            140A
ZONE3BRX            141E
ZONE3BRY            1422
ZONE3COLLISION      1390
ZONE3TLX            1416
ZONE3TLY            141A
ZONE4BRX            142E
ZONE4BRY            1432
ZONE4COLLISION      13BA
ZONE4TLX            1426
ZONE4TLY            142A
ZONEHEIGHT          1446
ZONEMSG             144A
ZONEWIDTH           1442
ZPRESSED            1F4C
_00000000           1E52
_00000001           1E60
_00000002           1E6E
_00000003           1EE8
_00000004           1EF4
_00000005           1F00
_00000006           1F0C
_00000007           21E4
_00000008           21F6
_00000009           2208
_0000000A           221A
_0000000B           222E
