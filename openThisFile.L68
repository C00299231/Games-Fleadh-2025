00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/02/2025 20:38:52

00000000                             1  ; this file starts the program.
00000000                             2  ; contains the title screen, includes all other files
00000000                             3  
00001000                             4      org $1000
00001000                             5  start:
00001000  6000 0002                  6      bra firstInit
00001004                             7  
00001004                             8  firstInit:
00001004                             9      ; Enable the screen back buffer(see easy 68k help)
00001004  103C 005C                 10      MOVE.B  #tcdbl,D0          ; 92 Enables Double Buffer
00001008  123C 0011                 11      MOVE.B  #17,        D1          ; Combine Tasks
0000100C  4E4F                      12      TRAP    #15                     ; Trap (Perform action)
0000100E                            13      
0000100E  6000 0002                 14      bra nextInit
00001012                            15      
00001012                            16  nextInit:
00001012  33FC 0000 00001C8E        17      move.w #0, lvlType
0000101A                            18      
0000101A  103C 0021                 19      MOVE.B  #tcScreen, D0           ; access screen information
0000101E  223C 00000000             20      MOVE.L  #tcScreenSize, D1       ; placing 0 in D1 triggers loading screen size information
00001024  4E4F                      21      TRAP    #15                     ; interpret D0 and D1 for screen size
00001026  33C1 00001200             22      MOVE.W  D1,         screenH     ; place screen height in memory location
0000102C  4841                      23      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000102E  33C1 000011FE             24      MOVE.W  D1,         screenW     ; place screen width in memory location
00001034                            25      
00001034  13FC 0000 000011E0        26      move.b #$00, isPaused
0000103C                            27  
0000103C                            28     
0000103C                            29      
0000103C  4282                      30      clr.l d2
0000103E  303C 0015                 31      move #tcFont, d0
00001042  223C 00AFE5D0             32      move.l #color5, d1
00001048  4E4F                      33      trap #15
0000104A                            34      
0000104A  6000 0002                 35      bra title
0000104E                            36  
0000104E                            37  title:
0000104E  4EB9 0000162C             38      jsr drawBg
00001054                            39      
00001054  323C 1F0D                 40      move.w #$1f0d, d1
00001058  4EB9 00001818             41      jsr setCursor
0000105E  43F9 00001092             42      lea title1msg, a1
00001064  4EB9 000017BE             43      jsr print
0000106A                            44      
0000106A  323C 1C0F                 45      move.w #$1c0f, d1
0000106E  4EB9 00001818             46      jsr setCursor
00001074  43F9 000010A4             47      lea title2msg, a1
0000107A  4EB9 000017BE             48      jsr print
00001080                            49      
00001080                            50      
00001080  6000 0002                 51      bra titleLoop
00001084                            52      
00001084                            53  titleLoop:
00001084                            54       ; Enable back buffer
00001084  103C 005E                 55      MOVE.B  #94,        D0
00001088  4E4F                      56      TRAP    #15
0000108A                            57      
0000108A  4EB9 00001C90             58      jsr testInput
00001090                            59      
00001090  60F2                      60      bra titleLoop
00001092                            61  
00001092                            62  
00001092= 2D 20 43 45 4C 4C ...     63  title1Msg dc.b '- CELL DEFENDER -',0
000010A4                            64  
000010A4= 50 72 65 73 73 20 ...     65  title2msg dc.b 'Press "enter" to start...',0
000010BE                            66  
000010BE                            67  ; include other files 
000010BE                            68   include "map/main.x68"
000010BE                            69  ; this file contains the main game loop
000010BE                            70  
000010BE                            71  mapInit:
000010BE  33FC 0001 00001C8E        72      move.w #1, lvlType
000010C6                            73      
000010C6                            74          ; Place the Player at the center of the screen
000010C6  4281                      75      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C8  3239 000011FE             76      MOVE.W  screenW,   D1          ; Place Screen width in D1
000010CE  82FC 0002                 77      DIVU    #02,        D1          ; divide by 2 for center on X Axis
000010D2  23C1 000011E2             78      MOVE.L  D1,         playerX    ; Players X Position
000010D8  23C1 000011EA             79      move.l d1, centerx
000010DE                            80  
000010DE  4281                      81      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E0  3239 00001200             82      MOVE.W  screenH,   D1          ; Place Screen width in D1
000010E6  82FC 0002                 83      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010EA  23C1 000011E6             84      MOVE.L  D1,         playerY    ; Players Y Position
000010F0  23C1 000011EE             85      move.l d1, centerY
000010F6                            86  
000010F6  4EB9 00001202             87      jsr initializeCell
000010FC  4EB9 00001452             88      jsr initDraw
00001102  4EB9 00001AFC             89      jsr initAllEnemies
00001108                            90  
00001108  6000 0002                 91      bra loop
0000110C                            92  
0000110C                            93  loop:
0000110C                            94      ;jsr clearscreen
0000110C  4EB9 00001122             95      jsr map ; if in map, do map stuff
00001112                            96      ; if in battle, do battle stuff
00001112                            97  
00001112  6000 0002                 98      bra endLoop
00001116                            99  endLoop:
00001116  4A79 000011F6            100      tst currentHealth
0000111C  6600 009A                101      bne end
00001120  60EA                     102      bra loop        ; loop
00001122                           103  
00001122                           104  map:
00001122  4EB9 00001484            105      jsr draw
00001128  4EB9 00001C90            106      jsr testinput
0000112E                           107      
0000112E                           108      ; test paused
0000112E  4A39 000011E0            109      tst.b isPaused
00001134  6600 002C                110      bne paused
00001138                           111  
00001138                           112      ; process
00001138  4EB9 00001AC0            113      jsr increment
0000113E  4EB9 00001B3C            114      jsr processEnemies
00001144                           115      ;jsr enemyColCheck
00001144                           116      ;jsr collision
00001144  4E75                     117      rts
00001146                           118  
00001146                           119  battle:
00001146  4E75                     120      rts
00001148                           121  
00001148                           122  collision:
00001148  4EB9 00001338            123      jsr zone1collision
0000114E  4EB9 00001366            124      jsr zone2collision
00001154  4EB9 00001390            125      jsr zone3collision
0000115A  4EB9 000013BA            126      jsr zone4collision
00001160  4E75                     127      rts
00001162                           128  
00001162                           129  paused:
00001162  60B2                     130      bra endLoop
00001164                           131      
00001164                           132  clearscreen:
00001164                           133      ; Clear the screen
00001164  103C 000B                134      MOVE.B  #tccrs,D0          ; Set Cursor Position
00001168  323C FF00                135      MOVE.W  #$FF00,     D1          ; Clear contents
0000116C  4E4F                     136      TRAP    #15
0000116E  4E75                     137      rts
00001170                           138  
00001170                           139  wasteTime:
00001170                           140      ; value put into d5, keep subtracting 1 until d5 contains 0
00001170                           141      ; takes a lot of time to process
00001170  5345                     142      sub #1, d5
00001172  BA7C 0000                143      cmp #0, d5
00001176  66F8                     144      bne wasteTime
00001178  4E75                     145      rts
0000117A                           146  
0000117A                           147  togglePause:
0000117A  1A39 000011E0            148      move.b isPaused, d5
00001180  4605                     149      not.b d5
00001182  13C5 000011E0            150      move.b d5, isPaused
00001188  4E75                     151      rts
0000118A                           152  
0000118A                           153  
0000118A                           154  ; heal up by one hp
0000118A                           155  heal:
0000118A  2439 000011F6            156      move.l currentHealth, d2
00001190  B4B9 000011FA            157      cmp.l maxHealth, d2
00001196  6700 000E                158      beq endHeal
0000119A  5282                     159      add.l #1, d2
0000119C  23C2 000011F6            160      move.l d2, currentHealth
000011A2  6000 0002                161      bra endHeal
000011A6                           162  endHeal:
000011A6  4E75                     163      rts
000011A8                           164  
000011A8                           165  takeDmg:
000011A8  2239 000011F6            166      move.l currentHealth, d1
000011AE  5381                     167      sub.l #1, d1
000011B0  23C1 000011F6            168      move.l d1, currentHealth
000011B6  4E75                     169      rts
000011B8                           170  
000011B8                           171  ; runs if game is cut short w/ ESC key
000011B8                           172  end:
000011B8  4EB8 1164                173      jsr clearscreen
000011BC                           174      
000011BC  43F9 0000186A            175      lea endmsg, a1
000011C2  4EB9 000017BE            176      jsr print
000011C8  FFFF FFFF                177      simhalt
000011CC                           178  
000011CC= 74 65 73 74 00           179  testMsg dc.b 'test',0
000011D1                           180  
000011D1                           181  
000011D1= 14 57 41 53 44 00        182  inputkeys dc.b 20,87,65,83,68,0
000011D7                           183  
000011D8                           184  currentkey ds.l 01
000011DC                           185  lastkey ds.l 01
000011E0                           186  isPaused ds.b 01
000011E1                           187  
000011E2                           188  playerX ds.l 01
000011E6                           189  playerY ds.l 01
000011EA                           190  
000011EA                           191  centerX ds.l 01
000011EE                           192  centerY ds.l 01
000011F2                           193  
000011F2= 00000000                 194  currentPts dc.l 0
000011F6                           195  
000011F6= 000000C8                 196  currentHealth dc.l 200
000011FA= 000000C8                 197  maxHealth dc.l 200
000011FE                           198  
000011FE                           199  screenW        DS.w    01  ; Reserve Space for Screen Width
00001200                           200  screenH        DS.w    01  ; Reserve Space for Screen Height
00001202                           201  
00001202                           202  
00001202                           203  -------------------- end include --------------------
00001202                           204   include "map/shapeSizes.x68"
00001202                           205  ; this file contains some const values
00001202                           206  
00001202  =00000008                207  playerW equ 08
00001202  =00000008                208  playerH equ 08
00001202                           209  
00001202  =0000000C                210  enemyH equ 12
00001202  =00000010                211  enemyW equ 16
00001202  =00000006                212  enemyHalfH equ 6
00001202  =00000008                213  enemyHalfW equ 8
00001202                           214  
00001202  =00000005                215  bulletH equ 05
00001202  =00000005                216  bulletW equ 05
00001202                           217  
00001202  =00000010                218  appleH equ 16
00001202  =00000010                219  appleW equ 16
00001202                           220  
00001202  =00000001                221  pointsGain equ 01
00001202  =00000001                222  -------------------- end include --------------------
00001202                           223   include "map/trapCodes.x68"
00001202                           224  ; traps
00001202  =0000000B                225  tccrs  EQU 11       ; Trap code cursor position
00001202  =0000005C                226  tcdbl  EQU 92       ; Double Buffer Screen Trap Code
00001202  =00000013                227  tcinp equ 19        ; get input trap code
00001202  =00000021                228  tcScreen EQU 33    ; Screen size information trap code
00001202  =00000000                229  tcScreenSize EQU 00    ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001202                           230                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001202  =00000015                231  tcFont equ 21       ; change font style/colour
00001202  =00000050                232  tcPenClr equ 80     ; change pen colour
00001202  =00000051                233  tcPenFil equ 81     ; change pen fill
00001202  =00000057                234  tcRect equ 87       ; draw rectangle
00001202                           235  
00001202  =00000021                236  tcFullScreen equ 33
00001202  =00000021                237  -------------------- end include --------------------
00001202                           238   include "map/inputKeyCodes.x68"
00001202                           239  ; this file contains relevant input keycodes
00001202                           240  
00001202  =0000001B                241  escapekey equ $1b ; pause
00001202  =00000020                242  spacekey equ $20
00001202  =0000000D                243  enterKey equ $0d
00001202                           244  
00001202  =00000057                245  wkey equ $57
00001202  =00000041                246  akey equ $41
00001202  =00000053                247  skey equ $53
00001202  =00000044                248  dkey equ $44
00001202                           249  
00001202  =0000005A                250  zkey equ $5a ; toggle follow cam
00001202                           251  
00001202  =00000030                252  key0 equ $30 ; toggle fullscreen
00001202  =00000031                253  key1 equ $31 
00001202  =00000032                254  key2 equ $32
00001202  =00000033                255  key3 equ $33
00001202                           256  
00001202  =57415344                257  wasdKeys equ $57415344 ; movement keys
00001202  =41444C20                258  runActionKeys equ $41444C20 ; run actions
00001202  =41444C20                259  -------------------- end include --------------------
00001202                           260   include "map/colours.x68"
00001202                           261  ; this file contains relevant color values
00001202                           262  
00001202                           263  ; 6ive colours: ranging from dark to light, plus one for contrast
00001202                           264  ; color1: darkest
00001202                           265  ; color5: lightest
00001202                           266  ; colorRed: contrast red colour
00001202  =00201808                267  color1 equ $00201808
00001202  =00494320                268  color2 equ $00494320
00001202  =0056864B                269  color3 equ $0056864b
00001202  =007AC687                270  color4 equ $007ac687
00001202  =00AFE5D0                271  color5 equ $00afe5d0
00001202                           272  
00001202  =00463EBD                273  colorRed equ $00463ebd
00001202  =00463EBD                274  -------------------- end include --------------------
00001202                           275   include "map/cell.x68"
00001202                           276  ; this file contains cell data
00001202                           277  
00001202                           278  ; cell contains:
00001202                           279      ; big square boundary
00001202                           280      ; 2 square attack zones - top corners
00001202                           281      ; 1 square heal zone - bottom
00001202                           282  
00001202                           283  initializeCell: ; initialize values for cell and zones
00001202                           284  
00001202                           285      ; this subroutine gathers top-left and bottom-right bounds for the cell,
00001202                           286      ; as well as each zone
00001202                           287  
00001202                           288      ; these bounds are used to draw and process
00001202                           289  
00001202                           290      ;--------RECTANGLE TRAP CODE:
00001202                           291      ; d1: top left X
00001202                           292      ; d2: top left Y
00001202                           293  
00001202                           294      ; d3: bottom right X
00001202                           295      ; d4: bottom right Y
00001202                           296      
00001202                           297  
00001202                           298      ;--------get cell bounds
00001202                           299      ; TL
00001202  2238 11EA                300      move.l centerX, d1      ; move centerX to d1
00001206  92B9 00001436            301      sub.l cellXradius, d1     ; add/sub based on cell radius
0000120C  23C1 000013E6            302      move.l d1, celltlX      ; save to relevant location
00001212                           303  
00001212  2238 11EE                304      move.l centerY, d1
00001216  D2B9 0000143E            305      add.l cellYoffset, d1
0000121C  92B9 0000143A            306      sub.l cellYradius, d1
00001222  23C1 000013EA            307      move.l d1, celltlY
00001228                           308  
00001228                           309      ; BR
00001228  2238 11EA                310      move.l centerX, d1
0000122C  D2B9 00001436            311      add.l cellXradius, d1
00001232  D2B8 0008                312      add.l playerH, d1
00001236  23C1 000013EE            313      move.l d1, cellbrX
0000123C                           314  
0000123C  2238 11EE                315      move.l centerY, d1
00001240  D2B9 0000143E            316      add.l cellYoffset, d1
00001246  D2B9 0000143A            317      add.l cellYradius, d1
0000124C  23C1 000013F2            318      move.l d1, cellbrY
00001252                           319  
00001252                           320  
00001252                           321      ;--------get zone 1 bounds
00001252                           322      ; TL
00001252  23F9 000013E6 000013F6   323      move.l celltlX, zone1tlX
0000125C                           324  
0000125C  23F9 000013EA 000013FA   325      move.l celltlY, zone1tlY
00001266                           326  
00001266                           327      ; BR
00001266  2239 000013F6            328      move.l zone1tlX, d1
0000126C  D2B9 00001442            329      add.l zoneWidth, d1
00001272  23C1 000013FE            330      move.l d1, zone1brX
00001278                           331  
00001278  2239 000013FA            332      move.l zone1tly, d1
0000127E  D2B9 00001446            333      add.l zoneHeight, d1
00001284  23C1 00001402            334      move.l d1, zone1brY
0000128A                           335  
0000128A                           336  
0000128A                           337      ;--------get zone 2 bounds
0000128A                           338      ; TL
0000128A  2239 000013EE            339      move.l cellbrX, d1
00001290  92B9 00001442            340      sub.l zoneWidth, d1
00001296  23C1 00001406            341      move.l d1, zone2tlX
0000129C                           342  
0000129C  23F9 000013EA 0000140A   343      move.l celltlY, zone2tlY
000012A6                           344  
000012A6                           345      ; BR
000012A6  23F9 000013EE 0000140E   346      move.l cellbrx, zone2brX
000012B0                           347  
000012B0  2239 000013EA            348      move.l celltlY, d1
000012B6  D2B9 00001446            349      add.l zoneHeight, d1
000012BC  23C1 00001412            350      move.l d1, zone2brY
000012C2                           351  
000012C2                           352  
000012C2                           353      ;--------get zone 3 bounds
000012C2                           354      ; TL
000012C2  2239 000013EE            355      move.l cellbrX, d1
000012C8  92B9 00001442            356      sub.l zoneWidth, d1
000012CE  23C1 00001416            357      move.l d1, zone3tlX
000012D4                           358  
000012D4  2239 000013F2            359      move.l cellbrY, d1
000012DA  92B9 00001446            360      sub.l zoneHeight, d1
000012E0  23C1 0000141A            361      move.l d1, zone3tlY
000012E6                           362  
000012E6                           363      ; BR
000012E6  23F9 000013EE 0000141E   364      move.l cellbrX, zone3brX
000012F0                           365  
000012F0  23F9 000013F2 00001422   366      move.l cellbrY, zone3brY
000012FA                           367  
000012FA                           368      ;--------get zone 4 bounds
000012FA                           369      ; TL
000012FA  2239 000013E6            370      move.l celltlX, d1
00001300  23C1 00001426            371      move.l d1, zone4tlX
00001306                           372  
00001306  2239 000013F2            373      move.l cellbrY, d1
0000130C  92B9 00001446            374      sub.l zoneHeight, d1
00001312  23C1 0000142A            375      move.l d1, zone4tlY
00001318                           376  
00001318                           377      ; BR
00001318  2239 000013E6            378      move.l celltlX, d1
0000131E  D2B9 00001442            379      add.l zoneWidth, d1
00001324  23C1 0000142E            380      move.l d1, zone4brX
0000132A                           381  
0000132A  2239 000013F2            382      move.l cellbrY, d1
00001330  23C1 00001432            383      move.l d1, zone4brY
00001336                           384  
00001336  4E75                     385      rts
00001338                           386  
00001338                           387  zone1collision:
00001338  2438 11E2                388      move.l playerX, d2
0000133C  2638 11E6                389      move.l playerY, d3
00001340                           390  
00001340                           391      ; check x
00001340  B4B9 000013FE            392      cmp.l zone1brX, d2
00001346  6E00 009C                393      bgt endCollision
0000134A                           394      ; check y
0000134A  B6B9 00001402            395      cmp.l zone1brY, d3
00001350  6E00 0092                396      bgt endCollision
00001354                           397  
00001354                           398  
00001354                           399      ; at this point, player is confirmed in zone 1
00001354  43F9 0000144A            400      lea zoneMsg, a1
0000135A  4EB9 000017BE            401      jsr print
00001360                           402  
00001360                           403      ; need to go to enemy thing
00001360  6000 0ACE                404      bra initRun
00001364                           405  
00001364  4E75                     406      rts
00001366                           407  
00001366                           408  zone2collision:
00001366  2438 11E2                409      move.l playerX, d2
0000136A  2638 11E6                410      move.l playerY, d3
0000136E                           411  
0000136E                           412      ; check x
0000136E  B4B9 00001406            413      cmp.l zone2tlX, d2
00001374  6D00 006E                414      blt endCollision
00001378                           415      ; check y
00001378  B6B9 00001402            416      cmp.l zone1brY, d3
0000137E  6E00 0064                417      bgt endCollision
00001382                           418  
00001382  43F9 0000144A            419      lea zoneMsg, a1
00001388  4EB9 000017BE            420      jsr print
0000138E                           421  
0000138E                           422      ; at this point, player is confirmed in zone 2
0000138E                           423  
0000138E  4E75                     424      rts
00001390                           425  
00001390                           426  zone3collision:
00001390  2438 11E2                427      move.l playerX, d2
00001394  2638 11E6                428      move.l playerY, d3
00001398                           429  
00001398                           430      ; check x
00001398  B4B9 00001416            431      cmp.l zone3tlX, d2
0000139E  6D00 0044                432      blt endCollision
000013A2                           433      ; check y
000013A2  B6B9 0000141A            434      cmp.l zone3tlY, d3
000013A8  6D00 003A                435      blt endCollision
000013AC                           436  
000013AC                           437      ; at this point, player is confirmed in zone 3
000013AC                           438  
000013AC  43F9 0000144A            439      lea zoneMsg, a1
000013B2  4EB9 000017BE            440      jsr print
000013B8                           441      
000013B8  4E75                     442      rts
000013BA                           443  
000013BA                           444  zone4collision:
000013BA  2438 11E2                445      move.l playerX, d2
000013BE  2638 11E6                446      move.l playerY, d3
000013C2                           447  
000013C2                           448      ; check x
000013C2  B4B9 0000142E            449      cmp.l zone4brX, d2
000013C8  6E00 001A                450      bgt endCollision
000013CC                           451      ; check y
000013CC  B6B9 0000142A            452      cmp.l zone4tlY, d3
000013D2  6D00 0010                453      blt endCollision
000013D6                           454  
000013D6                           455      ; at this point, player is confirmed in zone 4
000013D6                           456  
000013D6  43F9 0000144A            457      lea zoneMsg, a1
000013DC  4EB9 000017BE            458      jsr print
000013E2  4E75                     459      rts
000013E4                           460  
000013E4                           461  endCollision:
000013E4  4E75                     462      rts
000013E6                           463  
000013E6                           464  ;-cell top-left bounds
000013E6                           465  celltlX ds.l 01
000013EA                           466  celltlY ds.l 01
000013EE                           467  ; cell bottom-right bounds
000013EE                           468  cellbrX ds.l 01
000013F2                           469  cellbrY ds.l 01
000013F6                           470  
000013F6                           471  ;----------------------zone 1 top-left bounds
000013F6                           472  zone1tlX ds.l 01
000013FA                           473  zone1tlY ds.l 01
000013FE                           474  ; zone 1 bottom-right bounds
000013FE                           475  zone1brX ds.l 01
00001402                           476  zone1brY ds.l 01
00001406                           477  
00001406                           478  ;----------------------zone 2 top-left bounds
00001406                           479  zone2tlX ds.l 01
0000140A                           480  zone2tlY ds.l 01
0000140E                           481  ; zone 2 bottom-right bounds
0000140E                           482  zone2brX ds.l 01
00001412                           483  zone2brY ds.l 01
00001416                           484  
00001416                           485  ;----------------------zone 3 top-left bounds
00001416                           486  zone3tlX ds.l 01
0000141A                           487  zone3tlY ds.l 01
0000141E                           488  ; zone 3 bottom-right bounds
0000141E                           489  zone3brX ds.l 01
00001422                           490  zone3brY ds.l 01
00001426                           491  
00001426                           492  ;----------------------zone 4 top-left bounds
00001426                           493  zone4tlX ds.l 01
0000142A                           494  zone4tlY ds.l 01
0000142E                           495  ; zone 4 bottom-right bounds
0000142E                           496  zone4brX ds.l 01
00001432                           497  zone4brY ds.l 01
00001436                           498  
00001436                           499  ; horizontal and vertical radius of main cell (half width)
00001436= 00000064                 500  cellXradius dc.l 100
0000143A= 00000050                 501  cellYradius dc.l 80
0000143E                           502  
0000143E                           503  ; how lower from center it is
0000143E= 0000003C                 504  cellYoffset dc.l 60
00001442                           505  
00001442                           506  ; width of zone
00001442= 00000037                 507  zoneWidth dc.l 55
00001446= 0000002D                 508  zoneHeight dc.l 45
0000144A                           509  
0000144A= 49 4E 20 5A 4F 4E ...    510  zoneMsg dc.b 'IN ZONE',0
00001452                           511  
00001452                           512  enterHill:
00001452                           513  
00001452                           514  
00001452                           515  
00001452                           516  -------------------- end include --------------------
00001452                           517   include "map/draw.x68"
00001452                           518  ; this file contains all draw functions
00001452                           519  
00001452                           520  initDraw:
00001452                           521      ; get health rectangle bounds
00001452                           522  
00001452                           523      ;HEIGHT
00001452  3239 0000189A            524      move.w healthBarLocY, d1
00001458  23C1 00001888            525      move.l d1, healthTlY
0000145E  0681 0000000F            526      add.l #15, d1
00001464  23C1 00001890            527      move.l d1, healthBrY
0000146A                           528  
0000146A                           529      ;WIDTH
0000146A  4281                     530      clr.l d1
0000146C  3239 00001898            531      move.w healthBarOffsetX, d1
00001472                           532      ;move.l maxHealth, d2
00001472                           533      ;divu #2, d2
00001472                           534      ;add.l maxHealth, d1
00001472  23C1 00001884            535      move.l d1, healthTlX
00001478                           536  
00001478  D2B8 11FA                537      add.l maxhealth, d1
0000147C  23C1 0000188C            538      move.l d1, healthBrX
00001482                           539      
00001482  4E75                     540      rts
00001484                           541  
00001484                           542  
00001484                           543  draw:
00001484                           544       ; Enable back buffer
00001484  103C 005E                545      MOVE.B  #94,        D0
00001488  4E4F                     546      TRAP    #15
0000148A                           547  
0000148A  4EB9 00001C50            548      jsr followCam
00001490  4EB9 0000162C            549      jsr drawBg
00001496  4EB9 00001690            550      jsr drawEnemies
0000149C  4EB9 00001704            551      jsr drawCell
000014A2  4EB9 0000165C            552      jsr drawPlayer
000014A8  4EB9 0000158C            553      jsr drawText
000014AE  4EB9 00001532            554      jsr drawHealth
000014B4  4EB9 000014BC            555      jsr drawPause
000014BA  4E75                     556      rts
000014BC                           557  
000014BC                           558  drawPause:
000014BC  4A38 11E0                559      tst.b isPaused
000014C0  6700 006E                560      beq endDrawPause
000014C4                           561  
000014C4  223C 00AFE5D0            562      move.l #color5, d1
000014CA  4EB9 000017A6            563      jsr setPenColour
000014D0  223C 00201808            564      move.l #color1, d1
000014D6  4EB9 000017AE            565      jsr setFillColour
000014DC                           566  
000014DC                           567      ; make sure font is current
000014DC  223C 00AFE5D0            568      move.l #color5, d1
000014E2  B582                     569      eor.l d2,d2                 ;clear d2 for no font styling 
000014E4  4EB9 000017B6            570      jsr setFontColour
000014EA                           571      ; get rect bounds
000014EA                           572  
000014EA  2238 11EA                573      move.l centerX, d1
000014EE  2438 11EE                574      move.l centerY, d2
000014F2  92B9 0000189E            575      sub.l pauseHalfWidth, d1
000014F8  94B9 000018A2            576      sub.l pauseHalfHeight, d2
000014FE                           577  
000014FE  2638 11EA                578      move.l centerX, d3
00001502  2838 11EE                579      move.l centerY, d4
00001506  D6B9 0000189E            580      add.l pauseHalfWidth, d3
0000150C  D8B9 000018A2            581      add.l pauseHalfHeight, d4
00001512                           582  
00001512  4EB9 00001810            583      jsr drawUiRect
00001518                           584  
00001518                           585      ; draw text
00001518  323C 2208                586      move.w #$2208, d1
0000151C  4EB9 00001818            587      jsr setCursor
00001522  43F9 000018A6            588      lea pauseMsg, a1
00001528  4EB9 000017BE            589      jsr print
0000152E                           590  
0000152E  4E75                     591      rts
00001530                           592  endDrawPause:
00001530  4E75                     593      rts
00001532                           594  
00001532                           595  drawHealth:
00001532  223C 007AC687            596      move.l #color4, d1
00001538  4EB9 000017A6            597      jsr setPenColour
0000153E  223C 00494320            598      move.l #color2, d1
00001544  4EB9 000017AE            599      jsr setFillColour
0000154A                           600  
0000154A  2239 00001884            601      move.l healthTlX, d1
00001550  2439 00001888            602      move.l healthTlY, d2
00001556                           603  
00001556  2639 0000188C            604      move.l healthBrX, d3
0000155C  2839 00001890            605      move.l healthBrY, d4
00001562  4EB9 00001810            606      jsr drawUiRect
00001568                           607  
00001568                           608      ; DRAW FULL PART OF HP BAR
00001568  2639 00001884            609      move.l healthtlX, d3
0000156E  D6B8 11F6                610      add.l currentHealth, d3
00001572                           611  
00001572  223C 0056864B            612      move.l #color3, d1 ; change colour
00001578  4EB9 000017AE            613      jsr setFillColour
0000157E                           614  
0000157E  2239 00001884            615      move.l healthTlX, d1 ; set value in d1 back to what its supposed to be
00001584  4EB9 00001810            616      jsr drawUiRect
0000158A  4E75                     617      rts
0000158C                           618  
0000158C                           619  drawText:
0000158C                           620      ; set colours
0000158C  223C 00AFE5D0            621      move.l #color5, d1
00001592  4EB9 000017A6            622      jsr setPenColour
00001598  223C 00201808            623      move.l #color1, d1
0000159E  4EB9 000017AE            624      jsr setFillColour
000015A4                           625      ; PLAYER SCORE MSG
000015A4  323C 0200                626      move.w #$200, d1
000015A8  D239 0000189D            627      add.b pointsRow, d1
000015AE  4EB9 00001818            628      jsr setCursor
000015B4  43F9 00001874            629      lea pointsMsg, a1
000015BA  4EB9 000017BE            630      jsr print
000015C0                           631      ; PLAYER SCORE
000015C0  223C 00000A00            632      move.l #$a00, d1
000015C6  D239 0000189D            633      add.b pointsRow, d1
000015CC  4EB9 00001818            634      jsr setCursor
000015D2  2238 11F2                635      move.l currentPts, d1
000015D6  4EB9 000017C6            636      jsr printNum
000015DC                           637  
000015DC                           638      ; HEALTH
000015DC  323C 0200                639      move.w #$200, d1
000015E0  D239 0000189C            640      add.b healthRow, d1
000015E6  4EB9 00001818            641      jsr setCursor
000015EC  43F9 0000187C            642      lea healthMsg, a1
000015F2  4EB9 000017BE            643      jsr print
000015F8                           644  
000015F8                           645      ; ANTHILL
000015F8  323C 1005                646      move.w #$1005, d1
000015FC  4EB9 00001818            647      jsr setCursor
00001602  43F9 000018B3            648      lea attackMsg1, a1
00001608  4EB9 000017BE            649      jsr print
0000160E  5241                     650      add.w #1, d1
00001610  4EB9 00001818            651      jsr setCursor
00001616  43F9 000018CF            652      lea attackMsg2, a1
0000161C  4EB9 000017BE            653      jsr print
00001622                           654  
00001622                           655  
00001622                           656      ; reset cursor
00001622  7200                     657      move.l #0, d1
00001624  4EB9 00001818            658      jsr setCursor
0000162A  4E75                     659      rts
0000162C                           660  
0000162C                           661  drawBg:
0000162C                           662      ; set colours
0000162C  223C 00494320            663      move.l #color2, d1
00001632  4EB9 000017A6            664      jsr setPenColour
00001638  223C 00201808            665      move.l #color1, d1
0000163E  4EB9 000017AE            666      jsr setFillColour
00001644                           667  
00001644                           668      ; clear d3 and d4 (screen W and H are words)
00001644  4283                     669      clr.l d3
00001646  4284                     670      clr.l d4
00001648                           671  
00001648                           672      ; put the stuff in the registers, draw rect
00001648  7200                     673      move.l #0, d1
0000164A  7400                     674      move.l #0, d2
0000164C  3638 11FE                675      move.w screenW, d3
00001650  3838 1200                676      move.w screenH, d4
00001654  4EB9 00001810            677      jsr drawUiRect
0000165A  4E75                     678      rts
0000165C                           679  
0000165C                           680  drawPlayer:
0000165C                           681      ; Set white
0000165C  223C 00AFE5D0            682      MOVE.L #color5, d1
00001662  4EB9 000017A6            683      jsr setPenColour
00001668  223C 00201808            684      move.l #color1, d1
0000166E  4EB9 000017AE            685      jsr setFillColour
00001674                           686      
00001674                           687      ; Set X, Y, Width and Height
00001674  2238 11E2                688      MOVE.L  playerX,   D1          ; X
00001678  2438 11E6                689      MOVE.L  playerY,   D2          ; Y
0000167C  2638 11E2                690      MOVE.L  playerX,   D3
00001680  5083                     691      ADD.L   #playerW,   D3      ; Width
00001682  2838 11E6                692      MOVE.L  playerY,   D4 
00001686  5084                     693      ADD.L   #playerH,   D4      ; Height
00001688                           694      
00001688                           695      ; Draw Player
00001688  4EB9 000017CE            696      jsr drawRect
0000168E  4E75                     697      RTS
00001690                           698  
00001690                           699  drawEnemies:
00001690  4EB9 00001B98            700      jsr getEnemy1
00001696  4EB9 000016C0            701      jsr drawEnemy
0000169C  4EB9 00001BA6            702      jsr getEnemy2
000016A2  4EB9 000016C0            703      jsr drawEnemy
000016A8  4EB9 00001BB4            704      jsr getEnemy3
000016AE  4EB9 000016C0            705      jsr drawEnemy
000016B4  4EB9 00001BC2            706      jsr getEnemy4
000016BA  4EB9 000016C0            707      jsr drawEnemy
000016C0                           708  
000016C0                           709  drawEnemy:
000016C0                           710      ; set colour
000016C0  223C 00AFE5D0            711      move.l #color5, d1
000016C6  4EB9 000017A6            712      jsr setPenColour
000016CC  223C 00463EBD            713      move.l #colorRed, d1
000016D2  4EB9 000017AE            714      jsr setFillColour
000016D8                           715  
000016D8                           716      ; set rect values
000016D8  2239 000018FE            717      move.l enemyX, d1
000016DE  2439 00001902            718      move.l enemyY, d2
000016E4  2639 000018FE            719      move.l enemyX, d3
000016EA  2839 00001902            720      move.l enemyY, d4
000016F0  0683 00000010            721      add.l #enemyW, d3
000016F6  0684 0000000C            722      add.l #enemyH, d4
000016FC                           723  
000016FC  4EB9 000017CE            724      jsr drawRect
00001702  4E75                     725      rts
00001704                           726  
00001704                           727  drawCell:
00001704                           728      ;---------------draw main cell
00001704                           729      ; change colours
00001704  223C 007AC687            730      move.l #color4, d1
0000170A  4EB9 000017A6            731      jsr setPenColour
00001710  223C 00494320            732      move.l #color2, d1
00001716  4EB9 000017AE            733      jsr setFillColour
0000171C                           734  
0000171C  2238 13E6                735      move.l celltlX, d1
00001720  2438 13EA                736      move.l celltlY, d2
00001724  2638 13EE                737      move.l cellbrX, d3
00001728  2838 13F2                738      move.l cellbrY, d4
0000172C  4EB9 000017CE            739      jsr drawRect
00001732                           740  
00001732                           741      ; change colours
00001732  223C 007AC687            742      move.l #color4, d1
00001738  4EB9 000017A6            743      jsr setPenColour
0000173E  223C 0056864B            744      move.l #color3, d1
00001744  4EB9 000017AE            745      jsr setFillColour
0000174A                           746      ;---------------draw zone 1
0000174A  2238 13F6                747      move.l zone1tlX, d1
0000174E  2438 13FA                748      move.l zone1tlY, d2
00001752  2638 13FE                749      move.l zone1brX, d3
00001756  2838 1402                750      move.l zone1brY, d4
0000175A  4EB9 000017CE            751      jsr drawRect
00001760                           752  
00001760                           753      ;---------------draw zone 2
00001760  2238 1406                754      move.l zone2tlX, d1
00001764  2438 140A                755      move.l zone2tlY, d2
00001768  2638 140E                756      move.l zone2brX, d3
0000176C  2838 1412                757      move.l zone2brY, d4
00001770  4EB9 000017CE            758      jsr drawRect
00001776                           759      
00001776                           760      ;---------------draw zone 3
00001776  2238 1416                761      move.l zone3tlX, d1
0000177A  2438 141A                762      move.l zone3tlY, d2
0000177E  2638 141E                763      move.l zone3brX, d3
00001782  2838 1422                764      move.l zone3brY, d4
00001786  4EB9 000017CE            765      jsr drawRect
0000178C                           766  
0000178C                           767      ;---------------draw zone 4
0000178C  2238 1426                768      move.l zone4tlX, d1
00001790  2438 142A                769      move.l zone4tlY, d2
00001794  2638 142E                770      move.l zone4brX, d3
00001798  2838 1432                771      move.l zone4brY, d4
0000179C  4EB9 000017CE            772      jsr drawRect
000017A2                           773  
000017A2                           774      ; done
000017A2  4E75                     775      rts
000017A4                           776  
000017A4                           777  endDraw:
000017A4  4E75                     778      rts
000017A6                           779  
000017A6                           780  setPenColour:
000017A6  103C 0050                781      move.b #tcPenClr, d0
000017AA  4E4F                     782      trap #15
000017AC  4E75                     783      rts
000017AE                           784  
000017AE                           785  setFillColour:
000017AE  103C 0051                786      move.b #tcPenFil, d0
000017B2  4E4F                     787      trap #15
000017B4  4E75                     788      rts
000017B6                           789  
000017B6                           790  setFontColour:
000017B6  103C 0015                791      move.b #tcFont, d0
000017BA  4E4F                     792      trap #15
000017BC  4E75                     793      rts
000017BE                           794  
000017BE                           795  print:
000017BE  303C 000D                796      move #13, d0
000017C2  4E4F                     797      trap #15
000017C4  4E75                     798      rts
000017C6                           799  
000017C6                           800  printNum:
000017C6  303C 0003                801      move #3, d0
000017CA  4E4F                     802      trap #15
000017CC  4E75                     803      rts
000017CE                           804  
000017CE                           805  drawRect:
000017CE                           806      ; if not follow, draw like normal
000017CE  4A79 00001C4E            807      tst.w isFollow
000017D4  6700 003A                808      beq drawUiRect
000017D8                           809  
000017D8                           810      ; offset by camera
000017D8  92B9 00001C44            811      sub.l cameraX, d1
000017DE  94B9 00001C48            812      sub.l cameraY, d2
000017E4  96B9 00001C44            813      sub.l cameraX, d3
000017EA  98B9 00001C48            814      sub.l cameraY, d4
000017F0                           815      ; zoom by camera
000017F0  C2F9 00001C4C            816      mulu cameraZoom, d1
000017F6  C4F9 00001C4C            817      mulu cameraZoom, d2
000017FC  C6F9 00001C4C            818      mulu cameraZoom, d3
00001802  C8F9 00001C4C            819      mulu cameraZoom, d4
00001808                           820  
00001808                           821      ; draw rect function
00001808  103C 0057                822      MOVE.B  #tcRect, d0
0000180C  4E4F                     823      TRAP    #15
0000180E  4E75                     824      rts
00001810                           825  
00001810                           826  drawUiRect:
00001810  103C 0057                827      MOVE.B  #tcRect, d0
00001814  4E4F                     828      TRAP    #15
00001816  4E75                     829      rts
00001818                           830  
00001818                           831  setCursor:
00001818  103C 000B                832      MOVE.B  #tcCrs, d0
0000181C  4E4F                     833      TRAP    #15
0000181E  4E75                     834      rts
00001820                           835  
00001820                           836  toggleFullScreen:
00001820  4281                     837      clr.l d1
00001822  3239 00001868            838      move.w isFullScreen, d1
00001828  0C01 0001                839      cmpi.b #1, d1
0000182C  6700 000E                840      beq goFullScreen
00001830                           841  
00001830                           842      ; go windowed
00001830  7201                     843      move.l #1, d1
00001832  4EB9 0000184E            844      jsr setFullScreen
00001838                           845  
00001838  6000 000E                846      bra endToggleFullScreen
0000183C                           847  goFullScreen:
0000183C  5201                     848      add.b #1, d1
0000183E  4EB9 0000184E            849      jsr setFullScreen
00001844  6000 0002                850      bra endToggleFullScreen
00001848                           851  endToggleFullScreen:
00001848  33C1 00001868            852      move.w d1, isFullScreen
0000184E                           853  
0000184E                           854  setFullScreen:
0000184E  303C 0021                855      move #tcFullScreen, d0
00001852  4E4F                     856      trap #15
00001854  4E75                     857      rts
00001856                           858  
00001856                           859  ; INSTANT NEW LINE
00001856                           860  crlf:
00001856  303C 0006                861      move #6, d0
0000185A  323C 000D                862      move #13, d1
0000185E  4E4F                     863      trap #15
00001860  323C 000A                864      move #10, d1
00001864  4E4F                     865      trap #15
00001866  4E75                     866      rts
00001868                           867  
00001868= 0001                     868  isFullScreen dc.w 1
0000186A                           869  
0000186A= 47 41 4D 45 20 4F ...    870  endMsg dc.b 'GAME OVER', 0
00001874= 50 4F 49 4E 54 53 ...    871  pointsMsg dc.b 'POINTS:', 0
0000187C= 48 45 41 4C 54 48 ...    872  healthMsg dc.b 'HEALTH:', 0
00001884                           873  
00001884                           874  healthTlX ds.l 01
00001888                           875  healthTlY ds.l 01
0000188C                           876  healthBrX ds.l 01
00001890                           877  healthBrY ds.l 01
00001894                           878  
00001894                           879  currentHpX ds.l 01
00001898                           880  
00001898                           881  ; health stuff
00001898= 0050                     882  healthBarOffsetX dc.w 80
0000189A= 0010                     883  healthBarLocY dc.w 16
0000189C                           884  
0000189C= 01                       885  healthRow dc.b 01
0000189D= 03                       886  pointsRow dc.b 03
0000189E                           887  
0000189E                           888  ; pause stuff
0000189E= 0000006E                 889  pauseHalfWidth dc.l 110
000018A2= 00000082                 890  pauseHalfHeight dc.l 130
000018A6= 47 41 4D 45 20 50 ...    891  pauseMsg dc.b 'GAME PAUSED!', 0
000018B3                           892  
000018B3                           893  ; move to level stuff
000018B3= 41 4E 20 41 4E 54 ...    894  attackMsg1 dc.b 'AN ANTHILL IS UNDER ATTACK!',0
000018CF= 4D 4F 56 45 20 54 ...    895  attackMsg2 dc.b 'MOVE TOWARD IT AND PRESS "ENTER" TO DEFEND IT!',0
000018FE                           896  
000018FE                           897  -------------------- end include --------------------
000018FE                           898   include "map/enemies.x68"
000018FE                           899  ; this file contains enemy data
000018FE                           900  
000018FE                           901  ; variable data for current enemy
000018FE                           902  enemyX ds.l 01
00001902                           903  enemyY ds.l 01
00001906                           904  
00001906                           905  ; enemy initialization: set position, health
00001906                           906  ; 3 longs require 3 mem locations
00001906                           907  ; call srts, then take values outside them
00001906                           908  
00001906                           909  ; GENERAL INIT/PROCESS
00001906                           910  ; before these srts are called, enemyDir is given a value
00001906                           911  ; 0: tl
00001906                           912  ; 1: tr
00001906                           913  ; 2: br
00001906                           914  ; 3: bl
00001906                           915  
00001906                           916  initEnemy:
00001906                           917      ; init based on which direction
00001906  4A79 00001C3A            918      tst enemyDir
0000190C  6700 0094                919      beq initEnemytl
00001910                           920  
00001910  0C79 0001 00001C3A       921      cmpi #1, enemyDir
00001918  6700 00C0                922      beq initEnemytr
0000191C                           923  
0000191C  0C79 0002 00001C3A       924      cmpi #2, enemyDir
00001924  6700 00EA                925      beq initEnemybr
00001928                           926  
00001928  0C79 0003 00001C3A       927      cmpi #3, enemyDir
00001930  6700 0116                928      beq initEnemyBl
00001934                           929  
00001934                           930      ; no valid direction placed. just put enemy at the top
00001934  6000 006C                931      bra initEnemyTl
00001938                           932  
00001938                           933  processEnemy:
00001938                           934  
00001938                           935      ; process based on direction
00001938  4A79 00001C3A            936      tst enemyDir
0000193E  6700 007A                937      beq processEnemyTl
00001942  0C79 0001 00001C3A       938      cmpi #1, enemyDir
0000194A  6700 00A4                939      beq processEnemytr
0000194E  0C79 0002 00001C3A       940      cmpi #2, enemyDir
00001956  6700 00D0                941      beq processEnemybr
0000195A  0C79 0003 00001C3A       942      cmpi #3, enemyDir
00001962  6700 00FE                943      beq processEnemyBl
00001966                           944  
00001966                           945      ; no valid direction placed. just put enemy at the top
00001966  6000 0052                946      bra processEnemyTl
0000196A                           947  
0000196A                           948  enemyColCheck:
0000196A  3439 00001C3A            949      move.w enemyDir, d2
00001970                           950      ; colCheck based on direction
00001970  0C79 0000 00001C3A       951      cmpi #0, enemyDir
00001978  6700 0108                952      beq enemyLeftColCheck
0000197C                           953  
0000197C  0C79 0001 00001C3A       954      cmpi #1, enemyDir
00001984  6700 00FC                955      beq enemyLeftColCheck
00001988                           956  
00001988  0C79 0002 00001C3A       957      cmpi #2, enemyDir
00001990  6700 00FE                958      beq enemyRightColCheck
00001994                           959  
00001994  0C79 0003 00001C3A       960      cmpi #3, enemyDir
0000199C  6700 00F2                961      beq enemyRightColCheck
000019A0                           962  
000019A0                           963      ; no valid direction. nothing we can do atp
000019A0  4E75                     964      rts
000019A2                           965  
000019A2                           966  ;-------------------------------ENEMY TOP
000019A2                           967  initEnemytl:
000019A2  21FC 00000000 1902       968      move.l #0, enemyY
000019AA  21FC 00000000 18FE       969      move.l #0, enemyX
000019B2  4EB9 00001AAE            970      jsr endInitEnemy
000019B8  4E75                     971      rts
000019BA                           972  processEnemyTl:
000019BA  3A39 00001ABA            973      move.w enemyTime, d5
000019C0  4EB9 00001AC4            974      jsr checkIncrement
000019C6  6600 00E2                975      bne endProcess
000019CA                           976  
000019CA  52B8 1902                977      add.l #1, enemyY
000019CE  52B8 18FE                978      add.l #1, enemyX
000019D2                           979  
000019D2  4EB8 196A                980      jsr enemyColCheck
000019D6                           981  
000019D6  6000 00D2                982      bra endProcess
000019DA                           983  
000019DA                           984  ;-------------------------------ENEMY LEFT
000019DA                           985  initEnemytr:
000019DA  21F8 11FE 18FE           986      move.l screenW, enemyX
000019E0  21FC 00000000 1902       987      move.l #0, enemyY
000019E8  4EB9 00001AAE            988      jsr endInitEnemy
000019EE  4E75                     989      rts
000019F0                           990  processEnemytr:
000019F0  3A39 00001ABA            991      move.w enemyTime, d5
000019F6  4EB9 00001AC4            992      jsr checkIncrement
000019FC  6600 00AC                993      bne endProcess
00001A00                           994  
00001A00  52B8 1902                995      add.l #1, enemyY
00001A04  53B8 18FE                996      sub.l #1, enemyX
00001A08                           997  
00001A08  4EB8 196A                998      jsr enemyColCheck
00001A0C                           999  
00001A0C  6000 009C               1000      bra endProcess
00001A10                          1001  
00001A10                          1002  
00001A10                          1003  
00001A10                          1004  ;-------------------------------ENEMY RIGHT
00001A10                          1005  initEnemybr:
00001A10  4282                    1006      clr.l d2
00001A12  3438 11FE               1007      move.w screenW, d2
00001A16  21C2 18FE               1008      move.l d2, enemyX
00001A1A                          1009  
00001A1A  21F8 1200 1902          1010      move.l screenH, enemyY
00001A20                          1011  
00001A20  4EB9 00001AAE           1012      jsr endInitEnemy
00001A26  4E75                    1013      rts
00001A28                          1014  processEnemybr:
00001A28  3A39 00001ABA           1015      move.w enemyTime, d5
00001A2E  4EB9 00001AC4           1016      jsr checkIncrement
00001A34  6600 0074               1017      bne endProcess
00001A38                          1018  
00001A38  53B8 1902               1019      sub.l #1, enemyY
00001A3C  53B8 18FE               1020      sub.l #1, enemyX
00001A40                          1021  
00001A40  4EB8 196A               1022      jsr enemyColCheck
00001A44                          1023  
00001A44  6000 0064               1024      bra endProcess
00001A48                          1025  
00001A48                          1026  ;-------------------------------ENEMY BOTTOM
00001A48                          1027  initEnemyBl:
00001A48  4282                    1028      clr.l d2
00001A4A  3438 1200               1029      move.w screenH, d2
00001A4E  21C2 1902               1030      move.l d2, enemyY
00001A52                          1031  
00001A52  21FC 00000000 18FE      1032      move.l #0, enemyX
00001A5A                          1033  
00001A5A  4EB9 00001AAE           1034      jsr endInitEnemy
00001A60  4E75                    1035      rts
00001A62                          1036  processEnemyBl:
00001A62  3A39 00001ABA           1037      move.w enemyTime, d5
00001A68  4EB9 00001AC4           1038      jsr checkIncrement
00001A6E  6600 003A               1039      bne endProcess
00001A72                          1040  
00001A72  53B8 1902               1041      sub.l #1, enemyY
00001A76  52B8 18FE               1042      add.l #1, enemyX
00001A7A                          1043  
00001A7A  4EB8 196A               1044      jsr enemyColCheck
00001A7E                          1045  
00001A7E  6000 002A               1046      bra endProcess
00001A82                          1047  
00001A82                          1048  ;----------COLLISION
00001A82                          1049  enemyLeftColCheck:
00001A82  2438 13E6               1050      move.l celltlX, d2
00001A86                          1051      ;sub.l #enemyW, d2
00001A86  B4B8 18FE               1052      cmp.l enemyX, d2
00001A8A  6700 0018               1053      beq enemyCollide
00001A8E  4E75                    1054      rts
00001A90                          1055  
00001A90                          1056  enemyRightColCheck:
00001A90  2438 13EE               1057      move.l cellbrx, d2
00001A94  0482 00000010           1058      sub.l #enemyw, d2
00001A9A  B4B8 18FE               1059      cmp.l enemyX, d2
00001A9E  6700 0004               1060      beq enemyCollide
00001AA2  4E75                    1061      rts
00001AA4                          1062  
00001AA4                          1063  ;---------------OTHER STUFF
00001AA4                          1064  enemyCollide: ; enemy successfully reached the base
00001AA4  4EB8 1906               1065      jsr initEnemy
00001AA8  4E75                    1066      rts
00001AAA                          1067  
00001AAA                          1068  endProcess:
00001AAA  4E75                    1069      rts
00001AAC                          1070  endCollide:
00001AAC  4E75                    1071      rts
00001AAE                          1072  endInitEnemy:
00001AAE  5DB8 1902               1073      sub.l #enemyHalfH, enemyY
00001AB2  51B8 18FE               1074      sub.l #enemyHalfW, enemyX
00001AB6  4E75                    1075      rts
00001AB8                          1076  
00001AB8                          1077  -------------------- end include --------------------
00001AB8                          1078   include "map/timings.x68"
00001AB8                          1079  ; this file contains timing stuff
00001AB8                          1080  
00001AB8= 000A                    1081  playerTime dc.w 10
00001ABA= 001E                    1082  enemyTime dc.w 30
00001ABC= 0028                    1083  healTime dc.w 40
00001ABE= 07D0                    1084  enemySpawnTimer dc.w 2000
00001AC0                          1085  
00001AC0                          1086  increment: ; D6 permanently used up
00001AC0  5246                    1087      add.w #1, d6
00001AC2  4E75                    1088      rts
00001AC4                          1089  
00001AC4                          1090  checkIncrement: ; d5 has been given check value
00001AC4  3806                    1091      move.w d6, d4 ; dont wanna mess up d6
00001AC6  88C5                    1092      divu d5, d4
00001AC8  383C 0000               1093      move.w #0, d4
00001ACC  4844                    1094      swap d4
00001ACE                          1095      ; d4 low word contains modulo
00001ACE                          1096      ; compare w/ 0
00001ACE  4A44                    1097      tst d4
00001AD0                          1098      ; thingy contains whether they were equal
00001AD0  4E75                    1099      rts
00001AD0  4E75                    1100  -------------------- end include --------------------
00001AD2                          1101   include "map/enemyManager.x68"
00001AD2                          1102  ;ENEMY 1
00001AD2= 00000000                1103  enemy1x dc.l 00
00001AD6= 00000000                1104  enemy1y dc.l 00
00001ADA                          1105  
00001ADA                          1106  ;ENEMY 2
00001ADA= 00000032                1107  enemy2x dc.l 50
00001ADE= 00000032                1108  enemy2y dc.l 50
00001AE2                          1109  
00001AE2                          1110  ;ENEMY 3
00001AE2= 00000064                1111  enemy3x dc.l 100
00001AE6= 00000064                1112  enemy3y dc.l 100
00001AEA                          1113  
00001AEA                          1114  ;ENEMY 4
00001AEA= 00000096                1115  enemy4x dc.l 150
00001AEE= 00000096                1116  enemy4y dc.l 150
00001AF2                          1117  
00001AF2= 01                      1118  enemyIndex dc.b 1
00001AF3                          1119  
00001AF3                          1120  ; current enemy spawn
00001AF4                          1121  currentSpawnX ds.l 01
00001AF8                          1122  currentSpawnY ds.l 01
00001AFC                          1123  
00001AFC                          1124  initAllEnemies:
00001AFC  21FC 00000000 1AD2      1125      move.l #0, enemy1x
00001B04  21FC 00000000 1AD6      1126      move.l #0, enemy1y
00001B0C                          1127  
00001B0C  21FC 00000032 1ADA      1128      move.l #50, enemy2x
00001B14  21FC 00000032 1ADE      1129      move.l #50, enemy2y
00001B1C                          1130  
00001B1C  21FC 00000064 1AE2      1131      move.l #100, enemy3x
00001B24  21FC 00000064 1AE6      1132      move.l #100, enemy3y
00001B2C                          1133  
00001B2C  21FC 00000096 1AEA      1134      move.l #150, enemy4x
00001B34  21FC 00000096 1AEE      1135      move.l #150, enemy4y
00001B3C                          1136  
00001B3C                          1137  processEnemies:
00001B3C  31FC 0001 1AF2          1138      move.w #1, enemyIndex
00001B42  6000 0002               1139      bra processEnemiesLoop
00001B46                          1140  processEnemiesLoop:
00001B46  4EB9 00001B66           1141      jsr getCurrentEnemy
00001B4C  4EB8 1938               1142      jsr processEnemy
00001B50  4EB9 00001BD0           1143      jsr saveCurrentEnemy
00001B56  5278 1AF2               1144      add.w #1, enemyIndex
00001B5A                          1145  
00001B5A  3438 1AF2               1146      move.w enemyIndex, d2
00001B5E  0C42 0005               1147      cmpi.w #5, d2
00001B62  66E2                    1148      bne processEnemiesLoop
00001B64  4E75                    1149      rts
00001B66                          1150  
00001B66                          1151  
00001B66                          1152  getCurrentEnemy:
00001B66  3438 1AF2               1153      move.w enemyIndex, d2
00001B6A  0C42 0001               1154      cmpi.w #1, d2
00001B6E  6700 0028               1155      beq getEnemy1
00001B72                          1156  
00001B72  3438 1AF2               1157      move.w enemyIndex, d2
00001B76  0C42 0002               1158      cmpi.w #2, d2
00001B7A  6700 002A               1159      beq getEnemy2
00001B7E                          1160  
00001B7E  3438 1AF2               1161      move.w enemyIndex, d2
00001B82  0C42 0003               1162      cmpi.w #3, d2
00001B86  6700 002C               1163      beq getEnemy3
00001B8A                          1164  
00001B8A  3438 1AF2               1165      move.w enemyIndex, d2
00001B8E  0C42 0004               1166      cmpi.w #4, d2
00001B92  6700 002E               1167      beq getEnemy4
00001B96  4E75                    1168      rts
00001B98                          1169  getEnemy1:
00001B98  21F8 1AD2 18FE          1170      move.l enemy1x, enemyX
00001B9E  21F8 1AD6 1902          1171      move.l enemy1y, enemyY
00001BA4  4E75                    1172      rts
00001BA6                          1173  getEnemy2:
00001BA6  21F8 1ADA 18FE          1174      move.l enemy2x, enemyX
00001BAC  21F8 1ADE 1902          1175      move.l enemy2y, enemyY
00001BB2  4E75                    1176      rts
00001BB4                          1177  getEnemy3:
00001BB4  21F8 1AE2 18FE          1178      move.l enemy3x, enemyX
00001BBA  21F8 1AE6 1902          1179      move.l enemy3y, enemyY
00001BC0  4E75                    1180      rts
00001BC2                          1181  getEnemy4:
00001BC2  21F8 1AEA 18FE          1182      move.l enemy4x, enemyX
00001BC8  21F8 1AEE 1902          1183      move.l enemy4y, enemyY
00001BCE  4E75                    1184      rts
00001BD0                          1185  
00001BD0                          1186  saveCurrentEnemy:
00001BD0  3438 1AF2               1187      move.w enemyIndex, d2
00001BD4  0C42 0001               1188      cmpi.w #1, d2
00001BD8  6700 0028               1189      beq saveEnemy1
00001BDC                          1190  
00001BDC  3438 1AF2               1191      move.w enemyIndex, d2
00001BE0  0C42 0002               1192      cmpi.w #2, d2
00001BE4  6700 002A               1193      beq saveEnemy2
00001BE8                          1194  
00001BE8  3438 1AF2               1195      move.w enemyIndex, d2
00001BEC  0C42 0003               1196      cmpi.w #3, d2
00001BF0  6700 002C               1197      beq saveEnemy3
00001BF4                          1198  
00001BF4  3438 1AF2               1199      move.w enemyIndex, d2
00001BF8  0C42 0004               1200      cmpi.w #4, d2
00001BFC  6700 002E               1201      beq saveEnemy4
00001C00  4E75                    1202      rts
00001C02                          1203  
00001C02                          1204  saveEnemy1:
00001C02  21F8 18FE 1AD2          1205      move.l enemyx, enemy1X
00001C08  21F8 1902 1AD6          1206      move.l enemyy, enemy1Y
00001C0E  4E75                    1207      rts
00001C10                          1208  saveEnemy2:
00001C10  21F8 18FE 1ADA          1209      move.l enemyx, enemy2X
00001C16  21F8 1902 1ADE          1210      move.l enemyy, enemy2Y
00001C1C  4E75                    1211      rts
00001C1E                          1212  saveEnemy3:
00001C1E  21F8 18FE 1AE2          1213      move.l enemyx, enemy3X
00001C24  21F8 1902 1AE6          1214      move.l enemyy, enemy3Y
00001C2A  4E75                    1215      rts
00001C2C                          1216  saveEnemy4:
00001C2C  21F8 18FE 1AEA          1217      move.l enemyx, enemy4X
00001C32  21F8 1902 1AEE          1218      move.l enemyy, enemy4Y
00001C38  4E75                    1219      rts
00001C3A                          1220  
00001C3A                          1221  ; current enemy dir
00001C3A= 0000                    1222  enemyDir dc.w 0000
00001C3A= 0000                    1223  -------------------- end include --------------------
00001C3C                          1224   include "map/camera.x68"
00001C3C                          1225  ; this file contains camera information
00001C3C                          1226  
00001C3C= 000000A0                1227  cameraOffsetX dc.l 160
00001C40= 00000078                1228  cameraOffsetY dc.l 120
00001C44= 00000000                1229  cameraX dc.l 0
00001C48= 00000000                1230  cameraY dc.l 0
00001C4C= 0002                    1231  cameraZoom dc.w 02
00001C4E                          1232  
00001C4E= 0000                    1233  isFollow dc.w 0
00001C50                          1234  
00001C50                          1235  followCam:
00001C50  4A78 1C4E               1236      tst isFollow
00001C54  6700 001C               1237      beq endFollow
00001C58                          1238  
00001C58  2438 11E2               1239      move.l playerX, d2
00001C5C  2638 11E6               1240      move.l playerY, d3
00001C60  94B8 1C3C               1241      sub.l cameraOffsetX, d2
00001C64  96B8 1C40               1242      sub.l cameraOffsetY, d3
00001C68                          1243  
00001C68  21C2 1C44               1244      move.l d2, cameraX
00001C6C  21C3 1C48               1245      move.l d3, cameraY
00001C70  4E75                    1246      RTS
00001C72                          1247  endFollow:
00001C72  4E75                    1248      rts
00001C74                          1249  
00001C74                          1250  toggleFollow:
00001C74  3438 1C4E               1251      move.w isFollow, d2
00001C78  4A42                    1252      tst.w d2
00001C7A  6700 000A               1253      beq turnOnFollow
00001C7E  31FC 0000 1C4E          1254      move.w #0, isFollow
00001C84  4E75                    1255      rts
00001C86                          1256  
00001C86                          1257  turnOnFollow:
00001C86  31FC 0001 1C4E          1258      move.w #1, isFollow
00001C8C  4E75                    1259      rts
00001C8C  4E75                    1260  -------------------- end include --------------------
00001C8E                          1261   include "map/input.x68"
00001C8E= 0000                    1262  lvlType dc.w 0
00001C90                          1263  
00001C90                          1264  ; types:
00001C90                          1265  ; 0: menu
00001C90                          1266  ; 1: map
00001C90                          1267  ; 2: run
00001C90                          1268  
00001C90                          1269  testinput:
00001C90                          1270      ; getting previous key
00001C90  11F8 11D8 11DC          1271      move.b currentkey, lastkey
00001C96                          1272  
00001C96                          1273      ; set d1 to $0000 0000
00001C96  7200                    1274      move.l #0, d1
00001C98                          1275  
00001C98                          1276      ; put "get input" code into d0
00001C98  103C 0013               1277      move.b #tcinp, d0
00001C9C  4E4F                    1278      trap #15
00001C9E  11C1 11D8               1279      move.b d1, currentkey
00001CA2  4E4F                    1280      trap #15
00001CA4                          1281      
00001CA4                          1282      ; AT THIS POINT, CURRENT KEY CONTAINS THE CURRENT/LAST KEY PRESSED,
00001CA4                          1283      ; AND D1 CONTAINS WHETHER OR NOT IT IS STILL PRESSED
00001CA4                          1284      
00001CA4                          1285      ; test if no input
00001CA4  0C01 0000               1286      cmpi.b #0, d1
00001CA8  6700 0032               1287      beq noinput     ; if no input, move to noinput
00001CAC                          1288      
00001CAC  4EB9 00001CEC           1289      jsr commonInput ; happens in any level
00001CB2                          1290  
00001CB2                          1291  
00001CB2  4A78 1C8E               1292      TST.w lvlType
00001CB6                          1293      IF <EQ> THEN
00001CBA  6100 004E               1294          BSR menuInput ; happens in menu
00001CBE                          1295      endi
00001CBE  0C78 0001 1C8E          1296      cmp.w #1, lvlType
00001CC4                          1297      IF <EQ> THEN
00001CC8  6100 004C               1298          BSR mapInput ; happens in map
00001CCC                          1299      endi
00001CCC  0C78 0002 1C8E          1300      cmp.w #2, lvlType
00001CD2                          1301      IF <EQ> THEN
00001CD6  6100 035E               1302          BSR battleInput ; happens in run
00001CDA                          1303      ENDI
00001CDA                          1304      
00001CDA  4E75                    1305      rts             ; return to loop
00001CDC                          1306  
00001CDC                          1307  noinput:
00001CDC                          1308      ; go back to loop
00001CDC  11FC 0000 11D8          1309      move.b #0, currentKey
00001CE2  11FC 0000 11DC          1310      move.b #0, lastkey
00001CE8  4E75                    1311      rts
00001CEA                          1312  
00001CEA= 0001                    1313  inputType dc.w 1
00001CEC                          1314  
00001CEC                          1315  commonInput:
00001CEC                          1316      ; at this point, keycode in currentkey is pressed
00001CEC                          1317  
00001CEC                          1318      ; OPTIONS
00001CEC  0C38 001B 11D8          1319      cmpi.b #escapeKey, currentkey ; pause
00001CF2  6700 009C               1320      beq escapepressed
00001CF6  0C38 0030 11D8          1321      cmpi.b #key0, currentKey ; fullscreen
00001CFC  6700 00A6               1322      beq key0pressed
00001D00                          1323  
00001D00  4A38 11E0               1324      tst.b isPaused
00001D04  6600 0072               1325      bne pausedInput
00001D08  4E75                    1326      RTS
00001D0A                          1327  
00001D0A                          1328  menuInput:
00001D0A  0C38 000D 11D8          1329      cmpi.b #enterKey, currentKey
00001D10  6700 F3AC               1330      beq mapInit
00001D14  4E75                    1331      rts
00001D16                          1332  
00001D16                          1333  mapinput:
00001D16                          1334      ; at this point, keycode in currentkey is pressed
00001D16                          1335  
00001D16                          1336      ; map buttons
00001D16  0C38 005A 11D8          1337      cmpi.b #zKey, currentKey
00001D1C  6700 009A               1338      beq zPressed
00001D20                          1339  
00001D20                          1340      ; only move player if correct time
00001D20  3A38 1AB8               1341      move.w playerTime, d5
00001D24  4EB8 1AC4               1342      jsr checkIncrement
00001D28  6600 0064               1343      bne endInput
00001D2C                          1344  
00001D2C                          1345      ; only when not paused
00001D2C                          1346  
00001D2C  0C38 000D 11D8          1347      cmpi.b #enterKey, currentKey
00001D32  6700 F414               1348      beq collision
00001D36                          1349  
00001D36  6000 0004               1350      bra mapMoveInput
00001D3A                          1351  
00001D3A                          1352      ;cmpi.b #wkey, currentkey ; W:UP
00001D3A                          1353      ;beq wpressed
00001D3A                          1354      ;cmpi.b #akey, currentkey ; A:LEFT
00001D3A                          1355      ;beq apressed
00001D3A                          1356      ;cmpi.b #skey, currentkey ; S:DOWN
00001D3A                          1357      ;beq spressed
00001D3A                          1358      ;cmpi.b #dkey, currentkey ; D:RIGHT
00001D3A                          1359      ;beq dpressed
00001D3A  4E75                    1360      RTS
00001D3C                          1361  
00001D3C                          1362  mapMoveInput:
00001D3C  223C 57415344           1363      move.l #wasdKeys, d1
00001D42  103C 0013               1364      move.b #tcinp, d0
00001D46  4E4F                    1365      trap #15
00001D48                          1366  
00001D48  0801 0018               1367      BTST.L  #24,D1
00001D4C                          1368      IF <NE> THEN
00001D50  6100 0088               1369          BSR    wPressed
00001D54                          1370      ENDI
00001D54                          1371  
00001D54                          1372      ;MOVE.L  CURRENT_KEY, D1
00001D54  0801 0010               1373      BTST.L  #16,D1
00001D58                          1374      IF <NE> THEN
00001D5C  6100 0090               1375          BSR    aPressed
00001D60                          1376      ENDI
00001D60                          1377  
00001D60                          1378      ;MOVE.L  CURRENT_KEY, D1
00001D60  0801 0008               1379      BTST.L  #8,D1
00001D64                          1380      IF <NE> THEN
00001D68  6100 0098               1381          BSR    sPressed
00001D6C                          1382      ENDI
00001D6C                          1383  
00001D6C                          1384      ;MOVE.L  CURRENT_KEY, D1
00001D6C  0801 0000               1385      BTST.L  #0,D1
00001D70                          1386      IF <NE> THEN
00001D74  6100 00A2               1387          BSR    dPressed
00001D78                          1388      ENDI
00001D78                          1389  
00001D78                          1390  pausedInput:
00001D78  0C38 0031 11D8          1391      cmpi.b #key1, currentkey
00001D7E  6700 0046               1392      beq key1pressed
00001D82                          1393  
00001D82  0C38 0032 11D8          1394      cmpi.b #key2, currentkey
00001D88  6700 0044               1395      beq key2pressed
00001D8C                          1396  
00001D8C                          1397      ;cmpi.b #key3, currentkey
00001D8C                          1398      ;beq key3pressed
00001D8C                          1399  
00001D8C  4E75                    1400      rts
00001D8E                          1401  
00001D8E                          1402  endInput:
00001D8E  4E75                    1403      rts
00001D90                          1404  
00001D90                          1405  ; INPUTS
00001D90                          1406  escapePressed:
00001D90  1A38 11DC               1407      move.b lastkey, d5
00001D94  BA38 11D8               1408      cmp.b currentKey, d5
00001D98  6600 0004               1409      bne escapeJustPressed
00001D9C  4E75                    1410      rts
00001D9E                          1411  escapeJustPressed:
00001D9E  4EB8 117A               1412      jsr togglePause
00001DA2  4E75                    1413      rts
00001DA4                          1414  
00001DA4                          1415  key0pressed:
00001DA4  1A38 11DC               1416      move.b lastkey, d5
00001DA8  BA38 11D8               1417      cmp.b currentKey, d5
00001DAC  6600 0004               1418      bne key0justPressed
00001DB0  4E75                    1419      rts
00001DB2                          1420  key0justPressed:
00001DB2  4EB8 1820               1421      jsr toggleFullScreen
00001DB6  4E75                    1422      rts
00001DB8                          1423  
00001DB8                          1424  zPressed:
00001DB8  1A38 11DC               1425      move.b lastkey, d5
00001DBC  BA38 11D8               1426      cmp.b currentKey, d5
00001DC0  6600 FEB2               1427      bne toggleFollow ; z just pressed
00001DC4  4E75                    1428      rts
00001DC6                          1429  
00001DC6                          1430  key1pressed: ; quit
00001DC6  4EB8 117A               1431      jsr togglePause
00001DCA  6000 F3EC               1432      bra end
00001DCE                          1433  key2pressed: ; main menu
00001DCE  4EB8 117A               1434      jsr togglePause
00001DD2  4EB8 1164               1435      jsr clearscreen
00001DD6  6000 F228               1436      bra start
00001DDA                          1437  
00001DDA                          1438  ; MOVEMENT INPUT: MUST STAY WITHIN CELL BOUNDARIES
00001DDA                          1439  wpressed:
00001DDA  2638 11E6               1440      move.l playerY, d3 ; check boundary with proposed movement
00001DDE  5383                    1441      sub.l #1, D3
00001DE0  B6B8 13EA               1442      cmp.l celltlY, d3
00001DE4  6700 0048               1443      beq endMovement
00001DE8                          1444  
00001DE8  53B8 11E6               1445      sub.l #1, playerY
00001DEC  4E75                    1446      rts
00001DEE                          1447  apressed:
00001DEE  2638 11E2               1448      move.l playerX, d3 ; check boundary with proposed movement
00001DF2  5383                    1449      sub.l #1, D3
00001DF4  B6B8 13E6               1450      cmp.l celltlX, d3
00001DF8  6700 0034               1451      beq endMovement
00001DFC                          1452  
00001DFC  53B8 11E2               1453      sub.l #1, playerX
00001E00  4E75                    1454      rts
00001E02                          1455  spressed:
00001E02  2638 11E6               1456      move.l playerY, d3 ; check boundary with proposed movement
00001E06  5283                    1457      add.l #1, D3
00001E08  5083                    1458      add.l #playerH, d3 ; player size taken into consideration
00001E0A  B6B8 13F2               1459      cmp.l cellBrY, d3
00001E0E  6700 001E               1460      beq endMovement
00001E12                          1461  
00001E12  52B8 11E6               1462      add.l #1, playerY
00001E16  4E75                    1463      rts
00001E18                          1464  dpressed:
00001E18  2638 11E2               1465      move.l playerX, d3 ; check boundary with proposed movement
00001E1C  5283                    1466      add.l #1, D3
00001E1E  5083                    1467      add.l #playerW, d3 ; player size taken into consideration
00001E20  B6B8 13EE               1468      cmp.l cellBrX, d3
00001E24  6700 0008               1469      beq endMovement
00001E28                          1470  
00001E28  52B8 11E2               1471      add.l #1, playerX
00001E2C  4E75                    1472      rts
00001E2E                          1473  
00001E2E                          1474  endMovement:
00001E2E  4E75                    1475      rts
00001E2E  4E75                    1476  -------------------- end include --------------------
00001E30                          1477  
00001E30                          1478   include "battle/battleView.x68"
00001E30                          1479  
00001E30                          1480  
00001E30  =00000021               1481  TC_SCREEN   EQU         33          ; Screen size information trap code
00001E30  =00000000               1482  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001E30                          1483                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001E30  =00000013               1484  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001E30  =0000005C               1485  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001E30  =0000000B               1486  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001E30                          1487  
00001E30  =0000005E               1488  TC_REDRAW   EQU         94          ; Redraw Screen
00001E30  =00000009               1489  TC_EXIT     EQU         09          ; Exit Trapcode
00001E30                          1490  
00001E30  =00000014               1491  PLYR_W_INIT EQU         20          ; Players initial Width
00001E30  =0000000C               1492  PLYR_H_INIT EQU         12          ; Players initial Height
00001E30                          1493  
00001E30  =00000000               1494  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001E30  =FFFFFFED               1495  PLYR_JUMP_V EQU         -19          ; Player Jump Velocity
00001E30  =00000001               1496  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001E30                          1497  
00001E30  =0000000F               1498  THRW_W_INIT EQU         15          ; Players initial Width
00001E30  =0000000F               1499  THRW_H_INIT EQU         15          ; Players initial Height
00001E30                          1500  
00001E30  =00000000               1501  THRW_DFLT_V EQU         00          ; Default Player Velocity
00001E30  =FFFFFFF0               1502  THRW_JUMP_V EQU         -16          ; Player Jump Velocity
00001E30  =00000001               1503  THRW_DFLT_G EQU         01          ; Player Default Gravity
00001E30                          1504  
00001E30  =00000001               1505  GND_TRUE    EQU         01          ; Player on Ground True
00001E30  =00000000               1506  GND_FALSE   EQU         00          ; Player on Ground False
00001E30                          1507  
00001E30  =00000000               1508  GAMEOVER_INDEX   EQU             00          ; Player Run Sound Index  
00001E30  =00000001               1509  JMP_INDEX   EQU             01          ; Player Jump Sound Index  
00001E30  =00000002               1510  HITHURT_INDEX  EQU          02          ; Player Opps Sound Index
00001E30  =00000003               1511  POWERUP_INDEX  EQU          03          ; Player Opps Sound Index
00001E30  =00000004               1512  LEVELCHANGE_INDEX  EQU      04          ; Player Opps Sound Index
00001E30  =00000005               1513  HIT_INDEX  EQU              05  
00001E30                          1514  
00001E30  =0000000C               1515  ENMY_W_INIT EQU         12          ; Enemy initial Width
00001E30  =0000000C               1516  ENMY_H_INIT EQU         12          ; Enemy initial Height
00001E30  =0000000C               1517  ENEMY_H_INIT EQU         12          ; Enemy initial Height
00001E30                          1518  
00001E30  =00000014               1519  FLY_ENMY_W_INIT  EQU         20          ; Enemy initial Width
00001E30  =0000000C               1520  FLY_ENMY_H_INIT  EQU         12          ; Enemy initial Height
00001E30                          1521  
00001E30  =0000000C               1522  HEALTH_PACK_W    EQU         12          ; Enemy initial Width
00001E30  =0000000C               1523  HEALTH_PACK_H    EQU         12          ; Enemy initial Height
00001E30                          1524  
00001E30  =00000002               1525  LOOKRIGHT   EQU         02          ; Look Right
00001E30  =00000001               1526  LOOKLEFT    EQU         01          ; Look Left
00001E30  =00FFFFFF               1527  WHITE           EQU     $00FFFFFF
00001E30  =00000000               1528  BLACK           EQU     $00000000
00001E30  =000000FF               1529  RED             EQU     $000000FF
00001E30  =00FF0000               1530  BLUE            EQU     $00FF0000
00001E30  =00566D19               1531  GREEN           EQU     $00566D19
00001E30  =0044FF44               1532  LIFEGREEN       EQU     $0044FF44
00001E30  =0019506D               1533  BROWN           EQU     $0019506D         ; Brown   
00001E30  =00004FAD               1534  DIRT           EQU      $00004FAD         ; Brown   
00001E30  =00FFE2B0               1535  SKY             EQU     $00FFE2B0         ; Sky Blue
00001E30                          1536  ;ad4f00
00001E30  =00000020               1537  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001E30  =0000001B               1538  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001E30  =00000052               1539  Rkey           EQU         $52         ; R ASCII Keycode
00001E30  =00000041               1540  Akey           EQU         $41         ; A ASCII Keycode
00001E30  =00000053               1541  Skey           EQU         $53         ; S ASCII Keycode
00001E30  =00000044               1542  Dkey           EQU         $44         ; D ASCII Keycode
00001E30  =0000004C               1543  Lkey           EQU         $4C         ; L ASCII Keycode
00001E30  =0000004B               1544  Kkey           EQU         $4B         ; K ASCII Keycode
00001E30                          1545  
00001E30                          1546  INITRUN:
00001E30  31FC 0002 1C8E          1547      move.w #2, lvlType
00001E36                          1548      ; Initialise Sounds
00001E36  6100 09A4               1549      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001E3A  6100 0982               1550      BSR     GAMEOVER_LOAD                ; Load Run Sound into Memory
00001E3E  6100 09BA               1551      BSR     HITHURT_LOAD               ; Load Opps (Collision) Sound into Memory
00001E42  6100 09D4               1552      BSR     POWERUP_LOAD               ; Load Opps (Collision) Sound into Memory
00001E46  6100 09EE               1553      BSR     LVLCHANGE_LOAD               ; Load Opps (Collision) Sound into Memory
00001E4A  6100 0A08               1554      BSR     HIT_LOAD
00001E4E                          1555  
00001E4E                          1556      ; Screen Size
00001E4E  103C 0021               1557      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001E52  7200                    1558      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001E54  4E4F                    1559      TRAP    #15                     ; interpret D0 and D1 for screen size
00001E56  33C1 000030E6           1560      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001E5C  4841                    1561      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001E5E  33C1 000030E4           1562      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001E64                          1563  
00001E64                          1564      ; Place the Player at the center of the screen
00001E64  B381                    1565      EOR.L    D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E66  3239 000030E4           1566      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001E6C  82FC 0002               1567      DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001E70  23C1 000030EE           1568      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001E76                          1569  
00001E76  B381                    1570      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E78  3239 000030E6           1571      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001E7E  82FC 0002               1572      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001E82  23C1 000030F2           1573      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001E88                          1574  
00001E88                          1575      ; Set the player starting width and height
00001E88  13FC 0014 00003155      1576      MOVE.B  #PLYR_W_INIT,        PLAYER_WIDTH ; Players Width
00001E90  13FC 000C 00003156      1577      MOVE.B  #PLYR_H_INIT,        PLAYER_HEIGHT ; Players Width
00001E98                          1578  
00001E98  B381                    1579      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E9A  3239 000030E6           1580      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001EA0  82FC 0002               1581      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001EA4  23C1 000030F2           1582      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001EAA                          1583  
00001EAA                          1584      ; Initialise Player Score
00001EAA  B381                    1585      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EAC  7200                    1586      MOVE.L  #00,        D1          ; Init Score
00001EAE  23C1 000030F6           1587      MOVE.L  D1,         PLAYER_SCORE
00001EB4                          1588  
00001EB4                          1589      ; Initialise Player Velocity
00001EB4  B381                    1590      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EB6  123C 0000               1591      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001EBA  23C1 000030FA           1592      MOVE.L  D1,         PLYR_VELOCITY
00001EC0                          1593  
00001EC0                          1594      ; Initialise Player Gravity
00001EC0  B381                    1595      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EC2  7201                    1596      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001EC4  23C1 000030FE           1597      MOVE.L  D1,         PLYR_GRAVITY
00001ECA                          1598      
00001ECA                          1599      ; Initialise Player Velocity
00001ECA  B381                    1600      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001ECC  123C 0000               1601      MOVE.B  #THRW_DFLT_V,D1         ; Init Player Velocity
00001ED0  23C1 0000314A           1602      MOVE.L  D1,         THROW_VELOCITY
00001ED6                          1603  
00001ED6                          1604      ; Initialise Player Gravity
00001ED6  B381                    1605      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001ED8  7201                    1606      MOVE.L  #THRW_DFLT_G,D1         ; Init Player Gravity
00001EDA  23C1 0000314E           1607      MOVE.L  D1,         THROW_GRAVITY
00001EE0                          1608  
00001EE0                          1609      ; Initialize Player on Ground
00001EE0  23FC 00000001 00003102  1610      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001EEA                          1611  
00001EEA                          1612      ; Initial Position for Enemy
00001EEA  B381                    1613      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EEC  3239 000030E4           1614      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001EF2  23C1 00003108           1615      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001EF8                          1616  
00001EF8  B381                    1617      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EFA  3239 000030E6           1618      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001F00  82FC 0002               1619      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001F04  23C1 0000310C           1620      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001F0A                          1621  
00001F0A                          1622      ; Initialise the starting enemy width and height
00001F0A  33FC 000C 00003158      1623      MOVE.W  #12,        ENEMY_WIDTH ; Enemy Width
00001F12  33FC 000C 0000315A      1624      MOVE.W  #12,        ENEMY_HEIGHT ; Enemy Height
00001F1A                          1625  
00001F1A                          1626      ; Initial Position for Flying Enemy
00001F1A  B381                    1627      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F1C  3239 000030E4           1628      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001F22  23C1 00003118           1629      MOVE.L  D1,         FLYINGENEMY_X     ; Enemy X Position
00001F28                          1630  
00001F28  B381                    1631      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F2A  3239 000030E6           1632      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001F30  82FC 0002               1633      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001F34  0441 003C               1634      SUB.W   #60,        D1
00001F38  23C1 0000311C           1635      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
00001F3E                          1636      
00001F3E                          1637      ; Initial Flying enemy width and height
00001F3E  33FC 0014 0000315C      1638      MOVE.W  #20,        FLYENEMY_WIDTH ; Enemy Width
00001F46  33FC 000C 0000315E      1639      MOVE.W  #12,        FLYENEMY_HEIGHT ; Enemy Height
00001F4E                          1640      ; Initial Position for Health pack
00001F4E  B381                    1641      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F50  3239 000030E4           1642      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001F56  0481 FFFFFFFF           1643      SUB.L   #-1,        D1
00001F5C  23C1 00003110           1644      MOVE.L  D1,         HEALTH_X     ; Enemy X Position
00001F62                          1645  
00001F62  B381                    1646      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F64  3239 000030E6           1647      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001F6A  82FC 0002               1648      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001F6E  23C1 00003114           1649      MOVE.L  D1,         HEALTH_Y     ; Enemy Y Position
00001F74                          1650  
00001F74                          1651  
00001F74  45F9 000030D4           1652      LEA    LEVELS,      A2
00001F7A  13FC 0005 0000312C      1653      MOVE.B  #05,        LIVES
00001F82  13FC 0002 0000312D      1654      MOVE.B  #02,        POINTS
00001F8A  13FC 0000 000030CD      1655      MOVE.B  #00,        DRAW_HEALTHPACKS
00001F92  13FC 0000 000030CE      1656      MOVE.B  #00,        SPAWN_HEALTHPACKS
00001F9A  33FC 0140 000031AC      1657      MOVE.W  #320,       Z
00001FA2  33FC 0004 000031AE      1658      MOVE.W  #4,         SCALER   
00001FAA  33FC FFB0 000031B0      1659      MOVE.W  #-80,       WIDTH     
00001FB2                          1660  
00001FB2  23FC 00000000 00003134  1661      MOVE.L  #0,         ATTACK_X
00001FBC  23FC 00000000 00003138  1662      MOVE.L  #0,         ATTACK_Y
00001FC6  23FC FFFFFFFF 00003142  1663      MOVE.L  #-1,        THROW_X
00001FD0  23FC FFFFFFFF 00003146  1664      MOVE.L  #-1,        THROW_Y
00001FDA                          1665      
00001FDA  13FC 0000 0000312E      1666      MOVE.B  #00,        CURRENTLYATTACKING
00001FE2  13FC 0000 0000313C      1667      MOVE.B  #00,        CURRENTLYTHROWING
00001FEA                          1668  
00001FEA  4281                    1669      CLR.L   D1
00001FEC                          1670   
00001FEC                          1671  
00001FEC                          1672      ; Enable the screen back buffer(see easy 68k help)
00001FEC  103C 005C               1673      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001FF0  123C 0011               1674      MOVE.B  #17,        D1          ; Combine Tasks
00001FF4  4E4F                    1675      TRAP    #15                     ; Trap (Perform action)
00001FF6                          1676          
00001FF6                          1677      ; Clear the screen (see easy 68k help)
00001FF6  103C 000B               1678      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001FFA  323C FF00               1679      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001FFE  4E4F                    1680      TRAP    #15                     ; Trap (Perform action)
00002000                          1681  
00002000  6000 0002               1682      bra gameloop
00002004                          1683  
00002004                          1684  GAME:
00002004                          1685  
00002004                          1686      
00002004                          1687  GAMELOOP:
00002004                          1688      ; Main Gameloop
00002004  23FC 00000BB8 000031B2  1689      MOVE.L      #3000,timer
0000200E                          1690  DELAY:     
0000200E  53B9 000031B2           1691      SUBI.L      #1,timer            ; decrement timer by 1 to simulate a delay
00002014  4AB9 000031B2           1692      TST.L       timer            ; compare 0 to the value of timer
0000201A  66F2                    1693      BNE         DELAY               ; branch back to DELAY if the previous compare was not equal
0000201C                          1694  
0000201C  6100 0018               1695      BSR     BATTLEINPUT                   ; Check Keyboard Input
00002020  6100 00F2               1696      BSR     checkPaused
00002024  6100 0100               1697      BSR     UPDATE                  ; Update positions and points
00002028  6100 06F0               1698      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
0000202C  6100 0B32               1699      BSR     CHECK_COLLISIONS        ; Check for Collisions
00002030  6100 03F2               1700      BSR     DRAWBATTLE                  ; Draw the Scene
00002034                          1701                  ; Loop back to GameLoop
00002034  60CE                    1702      BRA     GAMELOOP    
00002036                          1703      
00002036                          1704  BATTLEINPUT:
00002036  2039 000030E8           1705      move.l CURRENT_KEY, D0
0000203C  11C0 11DC               1706      move.b D0,lastkey 
00002040                          1707  
00002040  103C 0013               1708      MOVE.B  #TC_KEYCODE, D0          ; Check for pressed keys
00002044                          1709      ;MOVE.L  #$41444C20, D1          
00002044  223C 41444C20           1710      MOVE.L  #runActionKeys, D1          ; Check for A, D, L, and Spacebar
0000204A  4E4F                    1711      TRAP    #15                         ; Trap (Perform action)
0000204C  23C1 000030E8           1712      MOVE.L  D1,         CURRENT_KEY     ; Put Current Key in Memory
00002052                          1713  
00002052  0801 0018               1714      BTST.L  #24,D1
00002056                          1715      IF <NE> THEN
0000205A  6100 01E2               1716          BSR    MOVE_PLAYER_LEFT
0000205E                          1717      ENDI
0000205E                          1718  
0000205E  2239 000030E8           1719      MOVE.L  CURRENT_KEY, D1
00002064  0801 0010               1720      BTST.L  #16,D1
00002068                          1721      IF <NE> THEN
0000206C  6100 01F8               1722          BSR    MOVE_PLAYER_RIGHT
00002070                          1723      ENDI
00002070                          1724  
00002070  2239 000030E8           1725      MOVE.L  CURRENT_KEY, D1
00002076  0801 0008               1726      BTST.L  #8,D1
0000207A                          1727      IF <NE> THEN
0000207E  6100 0312               1728          BSR    PERFORM_ATTACK
00002082                          1729      ENDI
00002082                          1730  
00002082  2239 000030E8           1731      MOVE.L  CURRENT_KEY, D1
00002088  0801 0000               1732      BTST.L  #0,D1
0000208C                          1733      IF <NE> THEN
00002090  6100 06DC               1734          BSR    JUMP
00002094                          1735      ENDI
00002094                          1736  
00002094  103C 0013               1737      MOVE.B  #TC_KEYCODE, D0          ; Check for pressed keys
00002098  223C 00001B4B           1738      MOVE.L  #$1B4B, D1                 ; check K and escape
0000209E  4E4F                    1739      TRAP    #15                     ; Trap (Perform action)
000020A0  23C1 000030E8           1740      MOVE.L  D1,         CURRENT_KEY     ; Put Current Key in Memory
000020A6                          1741  
000020A6  2239 000030E8           1742      MOVE.L  CURRENT_KEY, D1
000020AC  0801 0000               1743      BTST.L  #0,D1
000020B0                          1744      IF <NE> THEN
000020B4  6100 0326               1745          BSR    PERFORM_THROW
000020B8                          1746      ENDI
000020B8                          1747  
000020B8                          1748  
000020B8                          1749  
000020B8                          1750      ; Process Input
000020B8  4281                    1751      CLR.L   D1                      ; Clear Data Register
000020BA  4282                    1752      CLR.L   D2
000020BC  103C 0013               1753      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000020C0  4E4F                    1754      TRAP    #15                     ; Trap (Perform action)
000020C2  1401                    1755      MOVE.B  D1,         D2          ; Move last key D1 to D2
000020C4  B43C 0000               1756      CMP.B   #00,        D2          ; Key is pressed
000020C8  6700 000E               1757      BEQ     PROCESS_INPUT           ; Process Key
000020CC  4E4F                    1758      TRAP    #15                     ; Trap for Last Key
000020CE                          1759      ; Check if key still pressed
000020CE  B23C 00FF               1760      CMP.B   #$FF,       D1          ; Is it still pressed
000020D2  6700 0004               1761      BEQ     PROCESS_INPUT           ; Process Last Key
000020D6  4E75                    1762      RTS                             ; Return to subroutine
000020D8                          1763  PROCESS_INPUT:
000020D8  23C2 000030E8           1764      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000020DE                          1765  
000020DE                          1766  ; pause
000020DE  11C2 11D8               1767      move.b  d2,         currentKey
000020E2  0C38 001B 11D8          1768      CMP.b   #escapekey,    currentKey ; Is Current Key Escape
000020E8  6700 FCA6               1769      BEQ     escapePressed
000020EC                          1770  
000020EC  4A38 11E0               1771      tst.b isPaused
000020F0  6600 FC86               1772      bne pausedInput
000020F4                          1773  
000020F4  4A39 0000312C           1774      TST.B   LIVES
000020FA  6700 0008               1775      BEQ     PROCESS_RESTART
000020FE  6000 06BC               1776      BRA     IDLE                    ; Or Idle
00002102  4E75                    1777      RTS                             ; Return to subroutine
00002104                          1778  
00002104                          1779  PROCESS_RESTART:
00002104  0CB9 00000052 000030E8  1780      CMP.L   #Rkey,  CURRENT_KEY ; Is Current Key R
0000210E  6700 FD20               1781      BEQ     INITrun
00002112  4E75                    1782      RTS                             ; Return to subroutine
00002114                          1783  
00002114                          1784  checkPaused:
00002114  4A38 11E0               1785      TST.B  isPaused
00002118  6600 0004               1786      BNE    stillPaused
0000211C  4E75                    1787      RTS
0000211E                          1788  
0000211E                          1789  stillPaused:
0000211E  6100 0304               1790      BSR    DRAWBATTLE
00002122  6000 FEE0               1791      BRA    GAMELOOP
00002126                          1792  UPDATE:
00002126                          1793      ; Update the Players Positon based on Velocity and Gravity
00002126  4281                    1794      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002128  2239 000030FA           1795      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
0000212E  2439 000030FE           1796      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00002134  D282                    1797      ADD.L   D2,         D1          ; Add Gravity to Velocity
00002136  23C1 000030FA           1798      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
0000213C  D2B9 000030F2           1799      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00002142  23C1 000030F2           1800      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position
00002148  23C1 00003138           1801      MOVE.L  D1,         ATTACK_Y 
0000214E                          1802  
0000214E  6100 0074               1803      BSR     MOVE_THROW
00002152                          1804  
00002152                          1805      ; Move the Enemy
00002152  4281                    1806      CLR.L   D1                      ; Clear the contents of D0
00002154  2239 00003108           1807      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
0000215A  B2BC 00000000           1808      CMP.L   #00,        D1
00002160  6F00 01BE               1809      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
00002164  6100 0142               1810      BSR     MOVE_ENEMY              ; Move the Enemy
00002168                          1811  
00002168                          1812      ; Move flying enemy
00002168  4281                    1813      CLR.L   D1                      ; Clear the contents of D0
0000216A  2239 00003118           1814      MOVE.L  FLYINGENEMY_X,    D1          ; Move the Enemy X Position to D0
00002170  B2BC 00000000           1815      CMP.L   #00,        D1
00002176  6F00 01D2               1816      BLE     RESET_FLYENEMY_POSITION    ; Reset Enemy if off Screen
0000217A                          1817  
0000217A  0CB9 00000000 00003110  1818      CMP.L   #00,        HEALTH_X
00002184  6F00 01F2               1819      BLE     RESET_HEALTH_POSITION
00002188  6100 0116               1820      BSR     MOVE_HEALTHPACK
0000218C                          1821  
0000218C  B381                    1822      EOR.L   D1,D1
0000218E  3239 000031B0           1823      MOVE.W  WIDTH,D1
00002194  B279 000031AC           1824      CMP.W   Z,D1
0000219A  6C00 00F2               1825      BGE     RESET_TREE
0000219E  6100 00F8               1826      BSR     MOVE_TREE
000021A2                          1827  
000021A2  6100 007C               1828      BSR     CHECK_ATTACK_COOLDOWN
000021A6                          1829  
000021A6  4A79 00003132           1830      TST.W   ATTACK_TIME
000021AC  6600 0080               1831      BNE     ATTACK_TIME_SUB
000021B0  13FC 0000 0000312E      1832      MOVE.B  #00,        CURRENTLYATTACKING
000021B8  23FC 000001E0 00003138  1833      MOVE.L  #480,        ATTACK_Y
000021C2                          1834  
000021C2  4E75                    1835      RTS                             ; Return to subroutine  
000021C4                          1836  
000021C4                          1837  MOVE_THROW:
000021C4                          1838         ; Update the Players Positon based on Velocity and Gravity
000021C4  B381                    1839      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
000021C6  2239 0000314A           1840      MOVE.L  THROW_VELOCITY, D1       ; Fetch Player Velocity
000021CC  2439 0000314E           1841      MOVE.L  THROW_GRAVITY, D2        ; Fetch Player Gravity
000021D2  D282                    1842      ADD.L   D2,         D1          ; Add Gravity to Velocity
000021D4  23C1 0000314A           1843      MOVE.L  D1,         THROW_VELOCITY ; Update Player Velocity
000021DA  D2B9 00003146           1844      ADD.L   THROW_Y,   D1          ; Add Velocity to Player
000021E0  23C1 00003146           1845      MOVE.L  D1,         THROW_Y    ; Update Players Y Position
000021E6                          1846  
000021E6  58B9 00003142           1847      ADDI.L   #4,        THROW_X
000021EC  6100 0004               1848      BSR     CHECK_THROW_DONE
000021F0                          1849      
000021F0  4E75                    1850      RTS
000021F2                          1851  
000021F2                          1852  CHECK_THROW_DONE:
000021F2  0CB9 0000012C 00003146  1853      CMP.L    #300, THROW_Y
000021FC  6E00 0004               1854      BGT      RESET_THROW
00002200  4E75                    1855      RTS
00002202                          1856  
00002202                          1857  RESET_THROW:
00002202  13FC 0000 0000313C      1858      MOVE.B   #00, CURRENTLYTHROWING
0000220A  23FC FFFFFFFF 00003142  1859      MOVE.L   #-1, THROW_X
00002214  23FC FFFFFFFF 00003146  1860      MOVE.L   #-1, THROW_Y
0000221E  4E75                    1861      RTS
00002220                          1862  
00002220                          1863  CHECK_ATTACK_COOLDOWN:
00002220  0C79 0000 00003130      1864      CMP.W   #0, ATTACK_COOLDOWN
00002228  6E00 000C               1865      BGT     ATTACK_COOLDOWN_SUB
0000222C  4E75                    1866      RTS
0000222E                          1867  
0000222E                          1868  ATTACK_TIME_SUB:
0000222E  5579 00003132           1869      SUB.W   #02,        ATTACK_TIME
00002234  4E75                    1870      RTS   
00002236                          1871  ATTACK_COOLDOWN_SUB:
00002236  5579 00003130           1872      SUB.W   #02,        ATTACK_COOLDOWN
0000223C  4E75                    1873      RTS                            
0000223E                          1874  
0000223E                          1875  MOVE_PLAYER_LEFT:
0000223E  4A38 11E0               1876      TST.B  isPaused
00002242                          1877      IF <NE> THEN
00002246  4E75                    1878          RTS
00002248                          1879      ENDI
00002248                          1880  
00002248  13FC 0001 00003106      1881      MOVE.B  #LOOKLEFT,        PLAYER_DIR
00002250  2239 000030EE           1882      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
00002256  5581                    1883      SUB.L   #02,        D1          ; Move Player Left
00002258  23C1 000030EE           1884      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
0000225E  55B9 00003134           1885      SUB.L   #02,        ATTACK_X
00002264  4E75                    1886      RTS                             ; Return to subroutine    
00002266                          1887  
00002266                          1888  MOVE_PLAYER_RIGHT:
00002266  4A38 11E0               1889      TST.B  isPaused
0000226A                          1890      IF <NE> THEN
0000226E  4E75                    1891          RTS
00002270                          1892      ENDI
00002270  13FC 0002 00003106      1893      MOVE.B  #LOOKRIGHT,        PLAYER_DIR
00002278  2239 000030EE           1894      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
0000227E  5481                    1895      ADD.L   #02,        D1          ; Move Player Right
00002280  23C1 000030EE           1896      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
00002286  54B9 00003134           1897      ADD.L   #02,        ATTACK_X
0000228C  4E75                    1898      RTS                             ; Return to subroutine
0000228E                          1899  
0000228E                          1900  RESET_TREE:
0000228E  33FC 0280 000031AC      1901      MOVE.W  #640,Z
00002296  4E75                    1902      RTS
00002298                          1903  
00002298                          1904  MOVE_TREE:
00002298  5379 000031AC           1905      SUB.W  #01,Z
0000229E  4E75                    1906      RTS
000022A0                          1907  
000022A0                          1908  MOVE_HEALTHPACK:
000022A0  55B9 00003110           1909      SUB.L   #02,        HEALTH_X
000022A6  4E75                    1910      RTS
000022A8                          1911  
000022A8                          1912  MOVE_ENEMY:
000022A8  45F9 000030D4           1913      LEA     LEVELS,      A2
000022AE  2A39 000030F6           1914      MOVE.L  PLAYER_SCORE,   D5
000022B4  2C1A                    1915      MOVE.L  (A2)+,       D6
000022B6  BA86                    1916      CMP.L   D6,   D5
000022B8  6E00 004C               1917      BGT     MOVE_ENEMY_L4
000022BC  2C1A                    1918      MOVE.L  (A2)+,       D6
000022BE  BA86                    1919      CMP.L   D6,   D5
000022C0  6E00 002E               1920      BGT     MOVE_ENEMY_L3
000022C4  2C1A                    1921      MOVE.L  (A2)+,       D6
000022C6  BA86                    1922      CMP.L   D6,   D5
000022C8  6E00 0010               1923      BGT     MOVE_ENEMY_L2
000022CC  57B9 00003118           1924      SUB.L   #03,        FLYINGENEMY_X
000022D2  55B9 00003108           1925      SUB.L   #02,        ENEMY_X     ; Move enemy by X Value
000022D8  4E75                    1926      RTS
000022DA                          1927  
000022DA                          1928  MOVE_ENEMY_L2:
000022DA  57B9 00003118           1929      SUB.L   #03,        FLYINGENEMY_X
000022E0  59B9 00003108           1930      SUB.L   #04,        ENEMY_X     ; Move enemy by X Value
000022E6  13FC 0003 0000312D      1931      MOVE.B  #03,        POINTS
000022EE  4E75                    1932      RTS
000022F0                          1933  
000022F0                          1934  MOVE_ENEMY_L3:
000022F0  5FB9 00003118           1935      SUB.L   #07,        FLYINGENEMY_X
000022F6  5BB9 00003108           1936      SUB.L   #05,        ENEMY_X     ; Move enemy by X Value
000022FC  13FC 0005 0000312D      1937      MOVE.B  #05,        POINTS
00002304  4E75                    1938      RTS
00002306                          1939  
00002306                          1940  MOVE_ENEMY_L4:
00002306  04B9 0000000A 00003118  1941      SUB.L   #10,        FLYINGENEMY_X
00002310  51B9 00003108           1942      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
00002316  13FC 000A 0000312D      1943      MOVE.B  #10,        POINTS
0000231E  4E75                    1944      RTS
00002320                          1945  RESET_ENEMY_POSITION:
00002320  4281                    1946      CLR.L   D1       
00002322  3239 000030E6           1947      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002328  82FC 0002               1948      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000232C  23C1 0000310C           1949      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00002332  13FC 0000 00003153      1950      MOVE.B  #0,         ENEMY_HIT
0000233A                          1951  
0000233A  B381                    1952      EOR.L  D1,D1                      ; Clear contents of D1 (XOR is faster)
0000233C  3239 000030E4           1953      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002342  23C1 00003108           1954      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00002348  4E75                    1955      RTS
0000234A                          1956  
0000234A                          1957  RESET_FLYENEMY_POSITION:
0000234A  B381                    1958      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000234C  3239 000030E6           1959      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002352  82FC 0002               1960      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002356  0441 003C               1961      SUB.W   #60,        D1
0000235A  23C1 0000311C           1962      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
00002360  13FC 0000 00003154      1963      MOVE.B  #0,         FLYENEMY_HIT
00002368                          1964  
00002368  4281                    1965      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000236A  3239 000030E4           1966      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002370  23C1 00003118           1967      MOVE.L  D1,         FLYINGENEMY_X     ; FLY Enemy X Position
00002376  4E75                    1968      RTS
00002378                          1969      
00002378                          1970  RESET_HEALTH_POSITION:
00002378  13FC 0001 000030CD      1971      MOVE.B  #01,        DRAW_HEALTHPACKS
00002380  4281                    1972      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002382  3239 000030E4           1973      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002388  23C1 00003110           1974      MOVE.L  D1,         HEALTH_X     ; healthpack X Position
0000238E  4E75                    1975      RTS
00002390                          1976  
00002390                          1977  CONTINUE:
00002390  4E75                    1978      RTS
00002392                          1979  
00002392                          1980  PERFORM_ATTACK:
00002392  4A38 11E0               1981      TST.B  isPaused
00002396                          1982      IF <NE> THEN
0000239A  4E75                    1983          RTS
0000239C                          1984      ENDI
0000239C  4A79 00003130           1985      TST.W    ATTACK_COOLDOWN
000023A2  66EC                    1986      BNE      CONTINUE
000023A4                          1987      
000023A4  13FC 0001 0000312E      1988      MOVE.B   #01, CURRENTLYATTACKING
000023AC  33FC 0032 00003132      1989      MOVE.W   #50, ATTACK_TIME
000023B4  33FC 004C 00003130      1990      MOVE.W   #76, ATTACK_COOLDOWN
000023BC                          1991  
000023BC  23F9 000030EE 00003134  1992      MOVE.L   PLAYER_X,ATTACK_X
000023C6  06B9 00000014 00003134  1993      ADDI.L   #PLYR_W_INIT,ATTACK_X
000023D0  23F9 000030F2 00003138  1994      MOVE.L   PLAYER_Y,ATTACK_Y
000023DA  4E75                    1995      RTS
000023DC                          1996  
000023DC                          1997  PERFORM_THROW:
000023DC  4A38 11E0               1998      TST.B  isPaused
000023E0                          1999      IF <NE> THEN
000023E4  4E75                    2000          RTS
000023E6                          2001      ENDI
000023E6  4A39 0000313C           2002      TST.B    CURRENTLYTHROWING
000023EC  66A2                    2003      BNE      CONTINUE
000023EE                          2004      
000023EE  13FC 0001 0000313C      2005      MOVE.B   #01,CURRENTLYTHROWING
000023F6  23F9 000030EE 00003142  2006      MOVE.L   PLAYER_X,THROW_X
00002400  06B9 00000014 00003142  2007      ADDI.L   #PLYR_W_INIT,THROW_X
0000240A  23F9 000030F2 00003146  2008      MOVE.L   PLAYER_Y,THROW_Y
00002414  04B9 0000000C 00003146  2009      SUBI.L   #PLYR_H_INIT,THROW_Y
0000241E                          2010  
0000241E  6100 038E               2011      BSR     PERFORM_THROW_ARC
00002422  4E75                    2012      RTS
00002424                          2013  
00002424                          2014  DRAWBATTLE: 
00002424                          2015      ; Enable back buffer
00002424  103C 005E               2016      MOVE.B  #TC_REDRAW,        D0
00002428  4E4F                    2017      TRAP    #15
0000242A                          2018  
0000242A                          2019      ; Clear the screen
0000242A  103C 000B               2020      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000242E  323C FF00               2021      MOVE.W  #$FF00,     D1          ; Clear contents
00002432  4E4F                    2022      TRAP    #15                     ; Trap (Perform action)
00002434                          2023  
00002434  123C 0001               2024      MOVE.B  #1,D1
00002438  103C 005D               2025      MOVE.B  #93,D0
0000243C  4E4F                    2026      TRAP    #15
0000243E                          2027  
0000243E  6100 00B4               2028      BSR     DRAW_BACKGROUND        
00002442  6100 0020               2029      BSR     DRAW_HILL 
00002446  6100 0154               2030      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000244A  6100 0426               2031      BSR     DRAW_PLAYER             ; Draw Player
0000244E  6100 050A               2032      BSR     DRAW_ENEMY              ; Draw Enemy
00002452  6100 054A               2033      BSR     DRAW_FLYENEMY
00002456  6100 058A               2034      BSR     DRAW_HEALTHPACK
0000245A  6100 0608               2035      BSR     DRAW_FLOOR              ; Draw Floor
0000245E  6100 F05C               2036      BSR     drawPause
00002462  4E75                    2037      RTS                             ; Return to subroutine
00002464                          2038  
00002464                          2039  
00002464                          2040  DRAW_HILL:
00002464                          2041  
00002464                          2042  ; Set Pixel Colors
00002464  223C 00004FAD           2043      MOVE.L  #DIRT,     D1          ; Set Background color
0000246A  103C 0050               2044      MOVE.B  #80,        D0          ; Task for Background Color
0000246E  4E4F                    2045      TRAP    #15                     ; Trap (Perform action)
00002470                          2046  
00002470  223C 00004FAD           2047      MOVE.L  #DIRT,     D1
00002476  103C 0051               2048      MOVE.B  #81,        D0
0000247A  4E4F                    2049      TRAP    #15
0000247C                          2050  
0000247C                          2051      ; Set X, Y, X2, and Y2
0000247C  7200                    2052      MOVE.L  #0,   D1          ; X
0000247E  243C 000000F1           2053      MOVE.L  #241,  D2          ; Y
00002484  761E                    2054      MOVE.L  #30,   D3           
00002486  7878                    2055      MOVE.L  #120,   D4     
00002488                          2056      
00002488  103C 0057               2057      MOVE.B  #87,        D0          ; Draw Line
0000248C  4E4F                    2058      TRAP    #15                     ; Trap (Perform action)
0000248E                          2059      
0000248E                          2060       ; Set X, Y, X2, and Y2
0000248E  7200                    2061      MOVE.L  #0,   D1          ; X
00002490  243C 000000F1           2062      MOVE.L  #241,  D2          ; Y
00002496  763C                    2063      MOVE.L  #60,   D3           
00002498  283C 00000087           2064      MOVE.L  #135,   D4 
0000249E                          2065      
0000249E                          2066      
0000249E  103C 0057               2067      MOVE.B  #87,        D0          ; Draw Line
000024A2  4E4F                    2068      TRAP    #15                     ; Trap (Perform action)
000024A4                          2069  
000024A4                          2070       ; Set X, Y, X2, and Y2
000024A4  7200                    2071      MOVE.L  #0,   D1          ; X
000024A6  243C 000000F1           2072      MOVE.L  #241,  D2          ; Y
000024AC  7650                    2073      MOVE.L  #80,   D3           
000024AE  283C 00000096           2074      MOVE.L  #150,   D4 
000024B4                          2075      
000024B4                          2076      
000024B4  103C 0057               2077      MOVE.B  #87,        D0          ; Draw Line
000024B8  4E4F                    2078      TRAP    #15                     ; Trap (Perform action)
000024BA                          2079  
000024BA                          2080       ; Set X, Y, X2, and Y2
000024BA  7200                    2081      MOVE.L  #0,   D1          ; X
000024BC  243C 000000F1           2082      MOVE.L  #241,  D2          ; Y
000024C2  7664                    2083      MOVE.L  #100,   D3           
000024C4  283C 000000C8           2084      MOVE.L  #200,   D4 
000024CA                          2085      
000024CA                          2086      
000024CA  103C 0057               2087      MOVE.B  #87,        D0          ; Draw Line
000024CE  4E4F                    2088      TRAP    #15                     ; Trap (Perform action)
000024D0                          2089  
000024D0  7200                    2090      MOVE.L  #BLACK,     D1
000024D2  103C 0051               2091      MOVE.B  #81,        D0
000024D6  4E4F                    2092      TRAP    #15
000024D8  7200                    2093      MOVE.L  #BLACK,     D1
000024DA  103C 0050               2094      MOVE.B  #80,        D0
000024DE  4E4F                    2095      TRAP    #15
000024E0                          2096  
000024E0                          2097      ; Set X, Y, X2, and Y2
000024E0  7205                    2098      MOVE.L  #5,   D1          ; X
000024E2  243C 00000082           2099      MOVE.L  #130,  D2          ; Y
000024E8  7619                    2100      MOVE.L  #25,   D3           
000024EA  7878                    2101      MOVE.L  #120,   D4     
000024EC                          2102  
000024EC                          2103      
000024EC  103C 0057               2104      MOVE.B  #87,        D0          ; Draw Line
000024F0  4E4F                    2105      TRAP    #15                     ; Trap (Perform action)
000024F2                          2106  
000024F2  4E75                    2107      RTS
000024F4                          2108  
000024F4                          2109  DRAW_BACKGROUND:
000024F4  4281                    2110      CLR.L       D1
000024F6  223C 00FFE2B0           2111      MOVE.L      #SKY,D1
000024FC  103C 0051               2112      MOVE.B      #81,D0
00002500  4E4F                    2113      TRAP        #15
00002502                          2114  
00002502  7200                    2115      MOVE.L      #00, D1
00002504  7400                    2116      MOVE.L      #00, D2
00002506  7059                    2117      MOVE.L      #89, D0
00002508  4E4F                    2118      TRAP        #15
0000250A                          2119      
0000250A  223C 0019506D           2120      MOVE.L     #BROWN,D1
00002510  243C 01110000           2121      MOVE.L     #$01110000,D2
00002516  103C 0015               2122      MOVE.B     #21,D0
0000251A  4E4F                    2123      TRAP       #15
0000251C                          2124      
0000251C                          2125  
0000251C  B381                    2126      EOR.L      D1,D1
0000251E  143C 0005               2127      MOVE.B     #5,D2
00002522  33FC 300B 000031A6      2128      MOVE.W     #$300B,TRUNK
0000252A                          2129  TREE_LOOP:
0000252A  700B                    2130      MOVE.L     #TC_CURSR_P,D0
0000252C  3239 000031A6           2131      MOVE.W     TRUNK,D1
00002532  5379 000031A6           2132      SUBQ.W      #01,TRUNK
00002538  4E4F                    2133      TRAP       #15
0000253A                          2134     
0000253A  43F9 000030A1           2135      LEA         TREET, A1
00002540  700E                    2136      MOVE.L      #14, D0
00002542  4E4F                    2137      TRAP        #15
00002544                          2138  
00002544  5302                    2139      SUBQ.B      #01,D2
00002546  B43C 0000               2140      CMP.B       #00,D2
0000254A  66DE                    2141      BNE         TREE_LOOP
0000254C                          2142  
0000254C  223C 00566D19           2143      MOVE.L     #GREEN,D1
00002552  243C 01110000           2144      MOVE.L     #$01110000,D2
00002558  103C 0015               2145      MOVE.B     #21,D0
0000255C  4E4F                    2146      TRAP       #15
0000255E                          2147  
0000255E  163C 0005               2148      MOVE.B     #5,D3
00002562                          2149  TREE_LEAVES_Y:
00002562  13FC 002D 000031A6      2150      MOVE.B     #$2D,TRUNK
0000256A  143C 0008               2151      MOVE.B     #8,D2
0000256E                          2152  TREE_LEAVES_X:
0000256E  700B                    2153      MOVE.L     #TC_CURSR_P,D0
00002570  3239 000031A6           2154      MOVE.W     TRUNK,D1
00002576  5239 000031A6           2155      ADDQ.B     #01,TRUNK
0000257C  4E4F                    2156      TRAP       #15
0000257E                          2157     
0000257E  7240                    2158      MOVE.L      #$40, D1
00002580  7006                    2159      MOVE.L      #6, D0
00002582  4E4F                    2160      TRAP        #15
00002584                          2161  
00002584  5302                    2162      SUBQ.B      #01,D2
00002586  B43C 0000               2163      CMP.B       #00,D2
0000258A  66E2                    2164      BNE         TREE_LEAVES_X
0000258C  5303                    2165      SUB.B       #01,D3
0000258E  5379 000031A6           2166      SUB.W       #01,TRUNK
00002594  B63C 0000               2167      CMP.B       #00,D3
00002598  66C8                    2168      BNE         TREE_LEAVES_Y
0000259A  4E75                    2169      RTS
0000259C                          2170  DRAW_PLYR_DATA:
0000259C  B381                    2171      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
0000259E  B582                    2172      EOR.L    D2,D2
000025A0                          2173  
000025A0                          2174  
000025A0  7200                    2175      MOVE.L  #BLACK,     D1
000025A2  103C 0015               2176      MOVE.B  #21,        D0          ; Set Text Color
000025A6  4E4F                    2177      TRAP    #15                     ; Trap (Perform action)
000025A8                          2178  
000025A8  223C 00FFE2B0           2179      MOVE.L  #SKY,       D1          ; Set Text Color
000025AE  7051                    2180      MOVE.L  #81,        D0          ; Set Text Color
000025B0  4E4F                    2181      TRAP    #15                     ; Trap (Perform action)
000025B2                          2182  
000025B2                          2183      ; Player Score Message
000025B2  103C 000B               2184      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025B6  323C 0201               2185      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000025BA  4E4F                    2186      TRAP    #15                     ; Trap (Perform action)
000025BC  43F9 0000301A           2187      LEA     SCORE_MSG,  A1          ; Score Message
000025C2  303C 000D               2188      MOVE    #13,        D0          ; No Line feed
000025C6  4E4F                    2189      TRAP    #15                     ; Trap (Perform action)
000025C8                          2190  
000025C8                          2191      ; Player Score Value
000025C8  103C 000B               2192      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025CC  323C 0901               2193      MOVE.W  #$0901,     D1          ; Col 09, Row 01
000025D0  4E4F                    2194      TRAP    #15                     ; Trap (Perform action)
000025D2  103C 0003               2195      MOVE.B  #03,        D0          ; Display number at D1.L
000025D6  2239 000030F6           2196      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000025DC  4E4F                    2197      TRAP    #15                     ; Trap (Perform action)
000025DE                          2198      
000025DE                          2199      ; Player X Message
000025DE  103C 000B               2200      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025E2  323C 0202               2201      MOVE.W  #$0202,     D1          ; Col 02, Row 02
000025E6  4E4F                    2202      TRAP    #15                     ; Trap (Perform action)
000025E8  43F9 00003054           2203      LEA     X_MSG,      A1          ; X Message
000025EE  303C 000D               2204      MOVE    #13,        D0          ; No Line feed
000025F2  4E4F                    2205      TRAP    #15                     ; Trap (Perform action)
000025F4                          2206      
000025F4                          2207      ; Player X
000025F4  103C 000B               2208      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
000025F8  323C 0502               2209      MOVE.W  #$0502,     D1          ; Col 05, Row 02
000025FC  4E4F                    2210      TRAP    #15                     ; Trap (Perform action)
000025FE  103C 0003               2211      MOVE.B  #03,        D0          ; Display number at D1.L
00002602  2239 00003110           2212      MOVE.L  HEALTH_X,   D1          ; Move X to D1.L
00002608  4E4F                    2213      TRAP    #15                     ; Trap (Perform action)
0000260A                          2214      
0000260A                          2215      ; Player Y Message
0000260A  103C 000B               2216      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000260E  323C 1002               2217      MOVE.W  #$1002,     D1          ; Col 10, Row 02
00002612  4E4F                    2218      TRAP    #15                     ; Trap (Perform action)
00002614  43F9 00003057           2219      LEA     Y_MSG,      A1          ; Y Message
0000261A  303C 000D               2220      MOVE    #13,        D0          ; No Line feed
0000261E  4E4F                    2221      TRAP    #15                     ; Trap (Perform action)
00002620                          2222      
00002620                          2223      ; Player Y
00002620  103C 000B               2224      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002624  323C 1202               2225      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00002628  4E4F                    2226      TRAP    #15                     ; Trap (Perform action)
0000262A  103C 0003               2227      MOVE.B  #03,        D0          ; Display number at D1.L
0000262E  2239 0000311C           2228      MOVE.L  FLYINGENEMY_Y,   D1          ; Move X to D1.L
00002634  4E4F                    2229      TRAP    #15                     ; Trap (Perform action) 
00002636                          2230  
00002636                          2231      ; Player Velocity Message
00002636  103C 000B               2232      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000263A  323C 0203               2233      MOVE.W  #$0203,     D1          ; Col 02, Row 03
0000263E  4E4F                    2234      TRAP    #15                     ; Trap (Perform action)
00002640  43F9 0000305A           2235      LEA     V_MSG,      A1          ; Velocity Message
00002646  303C 000D               2236      MOVE    #13,        D0          ; No Line feed
0000264A  4E4F                    2237      TRAP    #15                     ; Trap (Perform action)
0000264C                          2238      
0000264C                          2239      ; Player Velocity
0000264C  103C 000B               2240      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002650  323C 0503               2241      MOVE.W  #$0503,     D1          ; Col 05, Row 03
00002654  4E4F                    2242      TRAP    #15                     ; Trap (Perform action)
00002656  103C 0003               2243      MOVE.B  #03,        D0          ; Display number at D1.L
0000265A  2239 000030FA           2244      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
00002660  4E4F                    2245      TRAP    #15                     ; Trap (Perform action)
00002662                          2246      
00002662                          2247      ; Player Gravity Message
00002662  103C 000B               2248      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002666  323C 1003               2249      MOVE.W  #$1003,     D1          ; Col 10, Row 03
0000266A  4E4F                    2250      TRAP    #15                     ; Trap (Perform action)
0000266C  43F9 0000305D           2251      LEA     VARMSG,      A1          ; G Message
00002672  303C 000D               2252      MOVE    #13,        D0          ; No Line feed
00002676  4E4F                    2253      TRAP    #15                     ; Trap (Perform action)
00002678                          2254      
00002678                          2255      ; Player Gravity
00002678  103C 000B               2256      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000267C  323C 1903               2257      MOVE.W  #$1903,     D1          ; Col 12, Row 03
00002680  4E4F                    2258      TRAP    #15                     ; Trap (Perform action)
00002682  103C 0003               2259      MOVE.B  #03,        D0          ; Display number at D1.L
00002686  4281                    2260      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002688  1239 00003130           2261      MOVE.B  ATTACK_COOLDOWN,D1         ; Move Gravity to D1.L
0000268E  4E4F                    2262      TRAP    #15                     ; Trap (Perform action)
00002690                          2263  
00002690                          2264      ; Player On Ground Message
00002690  103C 000B               2265      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002694  323C 0204               2266      MOVE.W  #$0204,     D1          ; Col 10, Row 03
00002698  4E4F                    2267      TRAP    #15                     ; Trap (Perform action)
0000269A  43F9 00003062           2268      LEA     GND_MSG,    A1          ; On Ground Message
000026A0  303C 000D               2269      MOVE    #13,        D0          ; No Line feed
000026A4  4E4F                    2270      TRAP    #15                     ; Trap (Perform action)
000026A6                          2271      
000026A6                          2272      ; Player On Ground
000026A6  103C 000B               2273      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000026AA  323C 1504               2274      MOVE.W  #$1504,     D1          ; Col 06, Row 04
000026AE  4E4F                    2275      TRAP    #15                     ; Trap (Perform action)
000026B0  103C 0003               2276      MOVE.B  #03,        D0          ; Display number at D1.L
000026B4  4281                    2277      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000026B6  1239 00003152           2278      MOVE.B  ENEMIES_DEFEATED,     D1          ; Move Play on Ground ? to D1.L
000026BC  4E4F                    2279      TRAP    #15                     ; Trap (Perform action)
000026BE                          2280  
000026BE                          2281      ; Show Keys Pressed
000026BE  103C 000B               2282      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000026C2  323C 2001               2283      MOVE.W  #$2001,     D1          ; Col 20, Row 1
000026C6  4E4F                    2284      TRAP    #15                     ; Trap (Perform action)
000026C8  43F9 00003023           2285      LEA     KEYCODE_MSG, A1         ; Keycode
000026CE  303C 000D               2286      MOVE    #13,        D0          ; No Line feed
000026D2  4E4F                    2287      TRAP    #15                     ; Trap (Perform action)
000026D4                          2288  
000026D4                          2289      ; Show KeyCode
000026D4  103C 000B               2290      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000026D8  323C 3001               2291      MOVE.W  #$3001,     D1          ; Col 30, Row 1
000026DC  4E4F                    2292      TRAP    #15                     ; Trap (Perform action)    
000026DE  2239 000030E8           2293      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
000026E4  103C 0003               2294      MOVE.B  #03,        D0          ; Display the contents of D1
000026E8  4E4F                    2295      TRAP    #15                     ; Trap (Perform action)
000026EA                          2296  
000026EA                          2297      ; Show Lives msg
000026EA  103C 000B               2298      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000026EE  323C 0207               2299      MOVE.W  #$0207,     D1          ; Col 02, Row 06
000026F2  4E4F                    2300      TRAP    #15                     ; Trap (Perform action)
000026F4  43F9 000030C2           2301      LEA     LIVES_MSG,   A1          ; Draw
000026FA  303C 000D               2302      MOVE    #13,        D0          ; No Line feed
000026FE  4E4F                    2303      TRAP    #15                     ; Trap (Perform action)  
00002700                          2304      
00002700                          2305      ; Show Lives msg
00002700  103C 000B               2306      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002704  323C 0A07               2307      MOVE.W  #$0A07,     D1          ; Col 30, Row 1
00002708  4E4F                    2308      TRAP    #15                     ; Trap (Perform action)   
0000270A  B381                    2309      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
0000270C  1239 0000312C           2310      MOVE.B  LIVES,      D1          ; Move Key Pressed to D1
00002712  103C 0003               2311      MOVE.B  #03,        D0          ; Display the contents of D1
00002716  4E4F                    2312      TRAP    #15                     ; Trap (Perform action)
00002718                          2313  
00002718  4E75                    2314      RTS
0000271A                          2315  IS_PLAYER_ON_GND:
0000271A                          2316      ; Check if Player is on Ground
0000271A  4281                    2317      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000271C  4282                    2318      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
0000271E  3239 000030E6           2319      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1  
00002724  82FC 0002               2320      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002728  2439 000030F2           2321      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
0000272E  B441                    2322      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00002730  6C00 0008               2323      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00002734  6D00 002C               2324      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00002738  4E75                    2325      RTS                             ; Return to subroutine
0000273A                          2326  
0000273A                          2327  
0000273A                          2328  SET_ON_GROUND:
0000273A  4281                    2329      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000273C  3239 000030E6           2330      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002742  82FC 0002               2331      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002746  23C1 000030F2           2332      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
0000274C  4281                    2333      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000274E  7200                    2334      MOVE.L  #00,        D1          ; Player Velocity
00002750  23C1 000030FA           2335      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
00002756  23FC 00000001 00003102  2336      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00002760  4E75                    2337      RTS
00002762                          2338  
00002762                          2339  SET_OFF_GROUND:
00002762  23FC 00000000 00003102  2340      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
0000276C  4E75                    2341      RTS                             ; Return to subroutine
0000276E                          2342  JUMP:
0000276E  4A38 11E0               2343      TST.B  isPaused
00002772                          2344      IF <NE> THEN
00002776  4E75                    2345          RTS
00002778                          2346      ENDI
00002778  0CB9 00000001 00003102  2347      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
00002782  6700 0006               2348      BEQ     PERFORM_JUMP            ; Do Jump
00002786  6000 0012               2349      BRA     JUMP_DONE               ;
0000278A                          2350  PERFORM_JUMP:
0000278A  6100 0062               2351      BSR     PLAY_JUMP               ; Play jump sound
0000278E  23FC FFFFFFED 000030FA  2352      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
00002798  4E75                    2353      RTS                             ; Return to subroutine
0000279A                          2354  JUMP_DONE:
0000279A  4E75                    2355      RTS                             ; Return to subroutine
0000279C                          2356  
0000279C                          2357  THROW_ARC:
0000279C  0CB9 00000001 00003102  2358      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000027A6  6700 0006               2359      BEQ     PERFORM_THROW_ARC    ; Do Jump
000027AA  6000 000E               2360      BRA     ARC_DONE               ;
000027AE                          2361  PERFORM_THROW_ARC:
000027AE                          2362      ;BSR     PLAY_JUMP               ; Play jump sound
000027AE  23FC FFFFFFF0 0000314A  2363      MOVE.L  #THRW_JUMP_V,THROW_VELOCITY ; Set the players velocity to true
000027B8  4E75                    2364      RTS                             ; Return to subroutine
000027BA                          2365  ARC_DONE:
000027BA  4E75                    2366      RTS                             ; Return to subroutine
000027BC                          2367  
000027BC                          2368  IDLE:
000027BC  4E75                    2369      RTS                             ; Return to subroutine
000027BE                          2370  
000027BE                          2371  GAMEOVER_LOAD:
000027BE  43F9 00003169           2372      LEA     GAMEOVER_WAV,    A1          ; Load Wav File into A1
000027C4  323C 0000               2373      MOVE    #GAMEOVER_INDEX, D1          ; Assign it INDEX
000027C8  303C 004A               2374      MOVE    #74,        D0          ; Load into memory
000027CC  4E4F                    2375      TRAP    #15                     ; Trap (Perform action)
000027CE  4E75                    2376      RTS                             ; Return to subroutine
000027D0                          2377  
000027D0                          2378  PLAY_GAMEOVER:
000027D0  323C 0000               2379      MOVE    #GAMEOVER_INDEX, D1          ; Load Sound INDEX
000027D4  303C 004B               2380      MOVE    #75,        D0          ; Play Sound
000027D8  4E4F                    2381      TRAP    #15                     ; Trap (Perform action)
000027DA  4E75                    2382      RTS                             ; Return to subroutine
000027DC                          2383  
000027DC                          2384  JUMP_LOAD:
000027DC  43F9 00003160           2385      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000027E2  323C 0001               2386      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000027E6  303C 004A               2387      MOVE    #74,        D0          ; Load into memory
000027EA  4E4F                    2388      TRAP    #15                     ; Trap (Perform action)
000027EC  4E75                    2389      RTS                             ; Return to subroutine
000027EE                          2390  
000027EE                          2391  PLAY_JUMP:
000027EE  323C 0001               2392      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000027F2  303C 004B               2393      MOVE    #75,        D0          ; Play Sound
000027F6  4E4F                    2394      TRAP    #15                     ; Trap (Perform action)
000027F8  4E75                    2395      RTS                             ; Return to subroutine
000027FA                          2396  
000027FA                          2397  HITHURT_LOAD:
000027FA  43F9 00003176           2398      LEA     HITHURT_WAV,   A1          ; Load Wav File into A1
00002800  323C 0002               2399      MOVE    #HITHURT_INDEX,D1          ; Assign it INDEX
00002804  303C 004A               2400      MOVE    #74,        D0          ; Load into memory
00002808  4E4F                    2401      TRAP    #15                     ; Trap (Perform action)
0000280A  4E75                    2402      RTS                             ; Return to subroutine
0000280C                          2403  
0000280C                          2404  PLAY_HITHURT:
0000280C  323C 0002               2405      MOVE    #HITHURT_INDEX,D1          ; Load Sound INDEX
00002810  303C 004B               2406      MOVE    #75,        D0          ; Play Sound
00002814  4E4F                    2407      TRAP    #15                     ; Trap (Perform action)
00002816  4E75                    2408      RTS                             ; Return to subroutine
00002818                          2409  
00002818                          2410  POWERUP_LOAD:
00002818  43F9 0000318A           2411      LEA     POWERUP_WAV,   A1          ; Load Wav File into A1
0000281E  323C 0003               2412      MOVE    #POWERUP_INDEX,D1          ; Assign it INDEX
00002822  303C 004A               2413      MOVE    #74,        D0          ; Load into memory
00002826  4E4F                    2414      TRAP    #15                     ; Trap (Perform action)
00002828  4E75                    2415      RTS                             ; Return to subroutine
0000282A                          2416  
0000282A                          2417  PLAY_POWERUP:
0000282A  323C 0003               2418      MOVE    #POWERUP_INDEX,D1          ; Load Sound INDEX
0000282E  303C 004B               2419      MOVE    #75,        D0          ; Play Sound
00002832  4E4F                    2420      TRAP    #15                     ; Trap (Perform action)
00002834  4E75                    2421      RTS                             ; Return to subroutine
00002836                          2422  
00002836                          2423  LVLCHANGE_LOAD:
00002836  43F9 00003196           2424      LEA     LEVELCHANGE_WAV,   A1          ; Load Wav File into A1
0000283C  323C 0004               2425      MOVE    #LEVELCHANGE_INDEX,D1          ; Assign it INDEX
00002840  303C 004A               2426      MOVE    #74,        D0          ; Load into memory
00002844  4E4F                    2427      TRAP    #15                     ; Trap (Perform action)
00002846  4E75                    2428      RTS                             ; Return to subroutine
00002848                          2429  
00002848                          2430  PLAY_LVLCHANGE:
00002848  323C 0004               2431      MOVE    #LEVELCHANGE_INDEX,D1          ; Load Sound INDEX
0000284C  303C 004B               2432      MOVE    #75,        D0          ; Play Sound
00002850  4E4F                    2433      TRAP    #15                     ; Trap (Perform action)
00002852  4E75                    2434      RTS                             ; Return to subroutine
00002854                          2435  
00002854                          2436  HIT_LOAD:
00002854  43F9 00003182           2437      LEA     HIT_WAV,   A1          ; Load Wav File into A1
0000285A  323C 0005               2438      MOVE    #HIT_INDEX,D1          ; Assign it INDEX
0000285E  303C 004A               2439      MOVE    #74,        D0          ; Load into memory
00002862  4E4F                    2440      TRAP    #15                     ; Trap (Perform action)
00002864  4E75                    2441      RTS                             ; Return to subroutine
00002866                          2442  
00002866                          2443  PLAY_HIT:
00002866  323C 0005               2444      MOVE    #HIT_INDEX,D1          ; Load Sound INDEX
0000286A  303C 004B               2445      MOVE    #75,        D0          ; Play Sound
0000286E  4E4F                    2446      TRAP    #15                     ; Trap (Perform action)
00002870  4E75                    2447      RTS                             ; Return to subroutine
00002872                          2448  
00002872                          2449  DRAW_PLAYER:
00002872                          2450      ; Set Pixel Colors
00002872  7200                    2451      MOVE.L  #BLACK,     D1          ; Set Background color
00002874  103C 0050               2452      MOVE.B  #80,        D0          ; Task for Background Color
00002878  4E4F                    2453      TRAP    #15                     ; Trap (Perform action)
0000287A                          2454      ; Reset Pixel Colors
0000287A  7200                    2455      MOVE.L  #BLACK,     D1          ; Set Background color
0000287C  103C 0051               2456      MOVE.B  #81,        D0          ; Task for Background Color
00002880  4E4F                    2457      TRAP    #15                     ; Trap (Perform action)
00002882                          2458  
00002882                          2459      ; Set X, Y, Width and Height
00002882  2239 000030EE           2460      MOVE.L  PLAYER_X,   D1          ; X
00002888  2439 000030F2           2461      MOVE.L  PLAYER_Y,   D2
0000288E                          2462      
0000288E  2639 000030EE           2463      MOVE.L  PLAYER_X,   D3
00002894  B984                    2464      EOR.L   D4,D4
00002896  1839 00003155           2465      MOVE.B   PLAYER_WIDTH,   D4      ; Width
0000289C  D684                    2466      ADD.L   D4,D3
0000289E  2839 000030F2           2467      MOVE.L  PLAYER_Y,   D4 
000028A4  9839 00003156           2468      SUB.B   PLAYER_HEIGHT,   D4      ; Height          ; Y
000028AA                          2469      
000028AA                          2470      ; Draw Player
000028AA  103C 0057               2471      MOVE.B  #87,        D0          ; Draw Player
000028AE  4E4F                    2472      TRAP    #15                     ; Trap (Perform action)
000028B0  6100 0008               2473      BSR     IS_ATTACKING
000028B4  6100 0054               2474      BSR     IS_THROWING
000028B8                          2475  
000028B8  4E75                    2476      RTS                             ; Return to subroutine
000028BA                          2477  
000028BA                          2478  IS_ATTACKING:
000028BA  4A39 0000312E           2479      TST.B   CURRENTLYATTACKING
000028C0  6600 0004               2480      BNE     DRAW_ATTACK
000028C4  4E75                    2481      RTS
000028C6                          2482  DRAW_ATTACK:
000028C6                          2483  
000028C6                          2484      ; Set Pixel Colors
000028C6  223C 00FFFFFF           2485      MOVE.L  #WHITE,     D1          ; Set Background color
000028CC  103C 0050               2486      MOVE.B  #80,        D0          ; Task for Background Color
000028D0  4E4F                    2487      TRAP    #15                     ; Trap (Perform action)
000028D2                          2488      ; Reset Pixel Colors
000028D2  223C 00FFFFFF           2489      MOVE.L  #WHITE,     D1          ; Set Background color
000028D8  103C 0051               2490      MOVE.B  #81,        D0          ; Task for Background Color
000028DC  4E4F                    2491      TRAP    #15                     ; Trap (Perform action)
000028DE                          2492  
000028DE  2239 00003134           2493      MOVE.L  ATTACK_X,   D1          ; X
000028E4  2439 00003138           2494      MOVE.L  ATTACK_Y,   D2
000028EA                          2495      
000028EA  2639 00003134           2496      MOVE.L  ATTACK_X,   D3
000028F0  0683 00000023           2497      ADD.L   #ATTACK_WIDTH,   D3      ; Width
000028F6  2839 00003138           2498      MOVE.L  ATTACK_Y,   D4 
000028FC  0484 00000014           2499      SUB.L   #ATTACK_HEIGHT,   D4      ; Height          ; Y
00002902                          2500      
00002902                          2501      ; Draw Player
00002902  103C 0057               2502      MOVE.B  #87,        D0          ; Draw Player
00002906  4E4F                    2503      TRAP    #15                     ; Trap (Perform action)
00002908  4E75                    2504      RTS                             ; Return to subroutine
0000290A                          2505  
0000290A                          2506  IS_THROWING:
0000290A  4A39 0000313C           2507      TST.B   CURRENTLYTHROWING
00002910  6600 0004               2508      BNE     DRAW_THROW
00002914  4E75                    2509      RTS
00002916                          2510  DRAW_THROW:
00002916                          2511  
00002916                          2512      ; Set Pixel Colors
00002916  223C 0019506D           2513      MOVE.L  #BROWN,     D1          ; Set Background color
0000291C  103C 0050               2514      MOVE.B  #80,        D0          ; Task for Background Color
00002920  4E4F                    2515      TRAP    #15                     ; Trap (Perform action)
00002922                          2516      ; Reset Pixel Colors
00002922  223C 0019506D           2517      MOVE.L  #BROWN,     D1          ; Set Background color
00002928  103C 0051               2518      MOVE.B  #81,        D0          ; Task for Background Color
0000292C  4E4F                    2519      TRAP    #15                     ; Trap (Perform action)
0000292E                          2520  
0000292E  2239 00003142           2521      MOVE.L  THROW_X,   D1          ; X
00002934  2439 00003146           2522      MOVE.L  THROW_Y,   D2
0000293A                          2523      
0000293A  2639 00003142           2524      MOVE.L  THROW_X,   D3
00002940  0683 0000000F           2525      ADD.L   #THRW_W_INIT,   D3      ; Width
00002946  2839 00003146           2526      MOVE.L  THROW_Y,   D4 
0000294C  0484 0000000F           2527      SUB.L   #THRW_H_INIT,   D4      ; Height          ; Y
00002952                          2528      
00002952                          2529      ; Draw Acorn
00002952  103C 0057               2530      MOVE.B  #87,        D0          ; Draw Player
00002956  4E4F                    2531      TRAP    #15                     ; Trap (Perform action)
00002958  4E75                    2532      RTS                             ; Return to subroutine
0000295A                          2533  
0000295A                          2534  DRAW_ENEMY:
0000295A                          2535      ; Set Pixel Colors
0000295A  2239 00003120           2536      MOVE.L  ENEMYCOLOR,       D1          ; Set Background color
00002960  103C 0050               2537      MOVE.B  #80,        D0          ; Task for Background Color
00002964  4E4F                    2538      TRAP    #15                     ; Trap (Perform action)
00002966                          2539  
00002966                          2540      ; Reset Pixel Colors
00002966  2239 00003120           2541      MOVE.L  ENEMYCOLOR,     D1          ; Set Background color
0000296C  103C 0051               2542      MOVE.B  #81,        D0          ; Task for Background Color
00002970  4E4F                    2543      TRAP    #15                     ; Trap (Perform action)
00002972                          2544  
00002972                          2545      ; Set X, Y, Width and Height
00002972  2239 00003108           2546      MOVE.L  ENEMY_X,    D1          ; X
00002978  2439 0000310C           2547      MOVE.L  ENEMY_Y,    D2          ; Y
0000297E  2639 00003108           2548      MOVE.L  ENEMY_X,    D3
00002984  D679 00003158           2549      ADD.W   ENEMY_WIDTH,   D3      ; Width
0000298A  2839 0000310C           2550      MOVE.L  ENEMY_Y,    D4 
00002990  9879 0000315A           2551      SUB.W   ENEMY_HEIGHT,   D4      ; Height
00002996                          2552      
00002996                          2553      ; Draw Enemy    
00002996  103C 0057               2554      MOVE.B  #87,        D0          ; Draw Enemy
0000299A  4E4F                    2555      TRAP    #15                     ; Trap (Perform action)
0000299C  4E75                    2556      RTS                             ; Return to subroutine
0000299E                          2557  
0000299E                          2558  DRAW_FLYENEMY:
0000299E                          2559      ; Set Pixel Colors
0000299E  2239 00003124           2560      MOVE.L  FLYENEMYCOLOR,       D1          ; Set Background color
000029A4  103C 0050               2561      MOVE.B  #80,        D0          ; Task for Background Color
000029A8  4E4F                    2562      TRAP    #15                     ; Trap (Perform action)
000029AA                          2563  
000029AA                          2564      ; Reset Pixel Colors
000029AA  2239 00003124           2565      MOVE.L  FLYENEMYCOLOR,     D1          ; Set Background color
000029B0  103C 0051               2566      MOVE.B  #81,        D0          ; Task for Background Color
000029B4  4E4F                    2567      TRAP    #15                     ; Trap (Perform action)
000029B6                          2568  
000029B6                          2569      ; Set X, Y, Width and Height
000029B6  2239 00003118           2570      MOVE.L  FLYINGENEMY_X,    D1          ; X
000029BC  2439 0000311C           2571      MOVE.L  FLYINGENEMY_Y,    D2          ; Y
000029C2  2639 00003118           2572      MOVE.L  FLYINGENEMY_X,    D3
000029C8  D679 0000315C           2573      ADD.W   FLYENEMY_WIDTH,   D3      ; Width
000029CE  2839 0000311C           2574      MOVE.L  FLYINGENEMY_Y,    D4 
000029D4  9879 0000315E           2575      SUB.W   FLYENEMY_HEIGHT,   D4      ; Height
000029DA                          2576      
000029DA                          2577      ; Draw Enemy    
000029DA  103C 0057               2578      MOVE.B  #87,        D0          ; Draw Enemy
000029DE  4E4F                    2579      TRAP    #15                     ; Trap (Perform action)
000029E0  4E75                    2580      RTS  
000029E2                          2581  
000029E2                          2582  DRAW_HEALTHPACK:
000029E2                          2583  
000029E2  0C39 0000 000030CE      2584      CMP.B   #00,     SPAWN_HEALTHPACKS
000029EA  6700 006C               2585      BEQ     DRAW_HEALTHPACK_DONE
000029EE  0C39 0000 000030CD      2586      CMP.B   #00,     DRAW_HEALTHPACKS
000029F6  6700 0060               2587      BEQ     DRAW_HEALTHPACK_DONE
000029FA                          2588      
000029FA                          2589      ;BSR     RANDOM_NUMBER
000029FA                          2590      ;CMP.L   #$80,  D1
000029FA                          2591      ;BGT     DRAW_HEALTHPACK_DONE
000029FA                          2592  
000029FA  13FC 0001 000030CD      2593      MOVE.B  #01,        DRAW_HEALTHPACKS
00002A02  3239 000030E6           2594      MOVE.W  SCREEN_H,     D1
00002A08  82FC 0002               2595      DIVU.W    #02,        D1
00002A0C  C2BC 0000FFFF           2596      AND.L   #$0000FFFF,   D1
00002A12  23C1 00003114           2597      MOVE.L  D1,         HEALTH_Y
00002A18                          2598      ; Set Pixel Colors
00002A18  7200                    2599      MOVE.L  #BLACK,       D1          ; Set Background color
00002A1A  103C 0050               2600      MOVE.B  #80,        D0          ; Task for Background Color
00002A1E  4E4F                    2601      TRAP    #15                     ; Trap (Perform action)
00002A20                          2602  
00002A20                          2603      ; Reset Pixel Colors
00002A20  223C 0044FF44           2604      MOVE.L  #LIFEGREEN,     D1          ; Set Background color
00002A26  103C 0051               2605      MOVE.B  #81,        D0          ; Task for Background Color
00002A2A  4E4F                    2606      TRAP    #15                     ; Trap (Perform action)
00002A2C                          2607  
00002A2C                          2608      ; Set X, Y, Width and Height
00002A2C  2239 00003110           2609      MOVE.L  HEALTH_X,    D1          ; X
00002A32  2439 00003114           2610      MOVE.L  HEALTH_Y,    D2          ; Y
00002A38  2639 00003110           2611      MOVE.L  HEALTH_X,    D3
00002A3E  0683 0000000C           2612      ADD.L   #HEALTH_PACK_W,   D3      ; Width
00002A44  2839 00003114           2613      MOVE.L  HEALTH_Y,    D4 
00002A4A  0484 0000000C           2614      SUB.L   #HEALTH_PACK_H,   D4      ; Height
00002A50                          2615      
00002A50                          2616      ; Draw Enemy    
00002A50  103C 0057               2617      MOVE.B  #87,        D0          ; Draw Enemy
00002A54  4E4F                    2618      TRAP    #15                     ; Trap (Perform action)
00002A56  4E75                    2619      RTS                             ; Return to subroutine
00002A58                          2620  
00002A58                          2621  DRAW_HEALTHPACK_DONE:
00002A58  23FC FFFFFFFF 00003114  2622      MOVE.L  #-1, HEALTH_Y
00002A62  4E75                    2623      RTS
00002A64                          2624  
00002A64                          2625  DRAW_FLOOR:
00002A64                          2626      ; Set Pixel Colors
00002A64  223C 00566D19           2627      MOVE.L  #GREEN,     D1          ; Set Background color
00002A6A  103C 0050               2628      MOVE.B  #80,        D0          ; Task for Background Color
00002A6E  4E4F                    2629      TRAP    #15                     ; Trap (Perform action)
00002A70                          2630  
00002A70  223C 00566D19           2631      MOVE.L  #GREEN,     D1
00002A76  103C 0051               2632      MOVE.B  #81,        D0
00002A7A  4E4F                    2633      TRAP    #15
00002A7C                          2634  
00002A7C                          2635      
00002A7C                          2636      ; Set X, Y, X2, and Y2
00002A7C  7200                    2637      MOVE.L  #0,   D1          ; X
00002A7E  243C 000000F1           2638      MOVE.L  #241,  D2          ; Y
00002A84  263C 00000280           2639      MOVE.L  #640,   D3           
00002A8A  283C 000001E0           2640      MOVE.L  #480,   D4 
00002A90                          2641      
00002A90                          2642      ; Draw grass
00002A90  103C 0057               2643      MOVE.B  #87,        D0          ; Draw Line
00002A94  4E4F                    2644      TRAP    #15                     ; Trap (Perform action)
00002A96                          2645  
00002A96                          2646      ; Set Pixel Colors
00002A96  223C 0019506D           2647      MOVE.L  #BROWN,     D1          ; Set Background color
00002A9C  103C 0050               2648      MOVE.B  #80,        D0          ; Task for Background Color
00002AA0  4E4F                    2649      TRAP    #15                     ; Trap (Perform action)
00002AA2                          2650  
00002AA2  223C 0019506D           2651      MOVE.L  #BROWN,     D1
00002AA8  103C 0051               2652      MOVE.B  #81,        D0
00002AAC  4E4F                    2653      TRAP    #15
00002AAE                          2654  
00002AAE  45F9 000030D4           2655      LEA     LEVELS,      A2
00002AB4  2A39 000030F6           2656      MOVE.L  PLAYER_SCORE,   D5
00002ABA                          2657      ;CMP.L   (A2)+,       D5
00002ABA                          2658      ;BGT     DRAW_FLOOR_L5
00002ABA                          2659      ;CMP.L   (A2)+,       D5
00002ABA                          2660      ;BGT     DRAW_FLOOR_L4
00002ABA                          2661      ;CMP.L   (A2)+,       D5
00002ABA                          2662      ;BGT     DRAW_FLOOR_L3
00002ABA                          2663      ;CMP.L   (A2)+,       D5
00002ABA                          2664      ;BGT     DRAW_FLOOR_L2
00002ABA  6000 0074               2665      BRA     DRAW_FLOOR_L1
00002ABE                          2666  
00002ABE                          2667  DRAW_FLOOR_L5:
00002ABE  33FC 000C 000031AE      2668      MOVE.W  #12,SCALER
00002AC6  243C 000001E0           2669      MOVE.L  #480,   D2          ; Y
00002ACC                          2670      ;MOVE.L  #135, FLYINGENEMY_Y
00002ACC                          2671      ;MOVE.W  #40, FLYENEMY_HEIGHT
00002ACC                          2672      ;MOVE.W  #65, FLYENEMY_WIDTH
00002ACC                          2673      ;MOVE.W  #40, ENEMY_HEIGHT
00002ACC                          2674      ;MOVE.W  #40, ENEMY_WIDTH
00002ACC  6000 006C               2675      BRA     DRAWDIRT
00002AD0                          2676      
00002AD0                          2677  DRAW_FLOOR_L4:
00002AD0  33FC 000A 000031AE      2678      MOVE.W  #10,SCALER
00002AD8  243C 000001E0           2679      MOVE.L  #480,   D2          ; Y
00002ADE                          2680      ;MOVE.L  #140, FLYINGENEMY_Y
00002ADE                          2681      ;MOVE.W  #45, FLYENEMY_HEIGHT
00002ADE                          2682      ;MOVE.W  #55, FLYENEMY_WIDTH
00002ADE                          2683      ;MOVE.W  #30, ENEMY_HEIGHT
00002ADE                          2684      ;MOVE.W  #30, ENEMY_WIDTH
00002ADE  6000 005A               2685      BRA     DRAWDIRT
00002AE2                          2686  DRAW_FLOOR_L3:
00002AE2  33FC 0008 000031AE      2687      MOVE.W  #8,SCALER
00002AEA  243C 000001AE           2688      MOVE.L  #430,   D2          ; Y
00002AF0                          2689      ;MOVE.L  #160, FLYINGENEMY_Y
00002AF0                          2690      ;MOVE.W  #25, FLYENEMY_HEIGHT
00002AF0                          2691      ;MOVE.W  #35, FLYENEMY_WIDTH
00002AF0                          2692      ;MOVE.W  #25, ENEMY_HEIGHT
00002AF0                          2693      ;MOVE.W  #25, ENEMY_WIDTH
00002AF0  6000 0048               2694      BRA     DRAWDIRT
00002AF4                          2695  DRAW_FLOOR_L2:
00002AF4  33FC 0006 000031AE      2696      MOVE.W  #6,SCALER
00002AFC  243C 0000014A           2697      MOVE.L  #330,   D2          ; Y
00002B02  23FC 000000AA 0000311C  2698      MOVE.L  #170, FLYINGENEMY_Y
00002B0C  33FC 000F 0000315E      2699      MOVE.W  #15, FLYENEMY_HEIGHT
00002B14  33FC 0019 0000315C      2700      MOVE.W  #25, FLYENEMY_WIDTH
00002B1C  33FC 000F 0000315A      2701      MOVE.W  #15, ENEMY_HEIGHT
00002B24  33FC 000F 00003158      2702      MOVE.W  #15, ENEMY_WIDTH
00002B2C                          2703  
00002B2C  6000 000C               2704      BRA     DRAWDIRT
00002B30                          2705  DRAW_FLOOR_L1:
00002B30  243C 00000115           2706      MOVE.L  #277,   D2          ; Y
00002B36  6000 0002               2707      BRA     DRAWDIRT
00002B3A                          2708  DRAWDIRT:
00002B3A                          2709      ; Set X, Y, X2, and Y2
00002B3A  7200                    2710      MOVE.L  #0,   D1          ; X
00002B3C  263C 00000280           2711      MOVE.L  #640,   D3           
00002B42  283C 000001E0           2712      MOVE.L  #480,   D4 
00002B48                          2713      
00002B48                          2714      ; Draw Dirt
00002B48  103C 0057               2715      MOVE.B  #87,        D0          ; Draw Line
00002B4C  4E4F                    2716      TRAP    #15                     ; Trap (Perform action)
00002B4E                          2717  
00002B4E                          2718  
00002B4E                          2719      ; Reset Pixel Colors
00002B4E  7200                    2720      MOVE.L  #$00000000,     D1          ; Set Background color
00002B50  103C 0050               2721      MOVE.B  #80,        D0          ; Task for Background Color
00002B54  4E4F                    2722      TRAP    #15                     ; Trap (Perform action)
00002B56                          2723  
00002B56                          2724      ; Reset Pixel Colors
00002B56  7200                    2725      MOVE.L  #$00000000,     D1          ; Set Background color
00002B58  103C 0051               2726      MOVE.B  #81,        D0          ; Task for Background Color
00002B5C  4E4F                    2727      TRAP    #15                     ; Trap (Perform action)
00002B5E                          2728  
00002B5E  4E75                    2729      RTS                             ; Return to subroutine
00002B60                          2730  
00002B60                          2731  CHECK_COLLISIONS:
00002B60                          2732  
00002B60  4281                    2733      CLR.L   D1                      ; Clear D1
00002B62  4282                    2734      CLR.L   D2                      ; Clear D2
00002B64                          2735  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
00002B64  2239 000030EE           2736      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00002B6A  D239 00003155           2737      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002B70  2439 00003108           2738      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00002B76  B481                    2739      CMP.L   D1,         D2          ; Do the Overlap ?
00002B78  6F00 0006               2740      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00002B7C  6000 004C               2741      BRA     CHECK_FLYENEMY_COLLISIONS
00002B80                          2742  
00002B80                          2743  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00002B80  2239 000030EE           2744      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00002B86  2439 00003108           2745      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00002B8C  D479 00003158           2746      ADD.W   ENEMY_WIDTH,D2          ; Set Enemy width X + Width
00002B92  B481                    2747      CMP.L   D1,         D2          ; Do they OverLap ?
00002B94  6C00 0006               2748      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002B98  6000 0030               2749      BRA     CHECK_FLYENEMY_COLLISIONS  
00002B9C                          2750  
00002B9C                          2751  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00002B9C  2239 000030F2           2752      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002BA2  2439 0000310C           2753      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002BA8  D478 000C               2754      ADD.W   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00002BAC  B481                    2755      CMP.L   D1,         D2          ; Do they Overlap ?
00002BAE  6F00 0006               2756      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00002BB2  6000 0016               2757      BRA     CHECK_FLYENEMY_COLLISIONS
00002BB6                          2758  
00002BB6                          2759  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00002BB6  D238 000C               2760      ADD.B   PLYR_H_INIT,D1          ; Add Player Height to D1
00002BBA  2439 0000310C           2761      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002BC0  B481                    2762      CMP.L   D1,         D2          ; Do they OverLap ?
00002BC2  6C00 030C               2763      BGE     ENEMYCOLLISION               ; Collision !
00002BC6  6000 0002               2764      BRA     CHECK_FLYENEMY_COLLISIONS
00002BCA                          2765  
00002BCA                          2766  CHECK_FLYENEMY_COLLISIONS:
00002BCA  4281                    2767      CLR.L   D1                      ; Clear D1
00002BCC  4282                    2768      CLR.L   D2                      ; Clear D2
00002BCE                          2769  PLX_LTE_TO_FLYENEMY_X_PLUS_W:
00002BCE  2239 000030EE           2770      MOVE.L  PLAYER_X,   D1
00002BD4  D239 00003155           2771      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002BDA  2439 00003118           2772      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002BE0  B481                    2773      CMP.L   D1,         D2                          ; Do the Overlap ?
00002BE2  6F00 0006               2774      BLE     PLX_PLUS_W_LTE_TO_FLYENEMY_X      ; Less than or Equal ?
00002BE6  6000 0050               2775      BRA     CHECK_HEALTH_COLLISIONS
00002BEA                          2776  
00002BEA                          2777  PLX_PLUS_W_LTE_TO_FLYENEMY_X:           ; Check player is not  
00002BEA  2239 000030EE           2778      MOVE.L  PLAYER_X,   D1
00002BF0  2439 00003118           2779      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002BF6  D479 0000315C           2780      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002BFC  B481                    2781      CMP.L   D1,         D2                  ; Do they OverLap ?
00002BFE  6C00 0006               2782      BGE     PLY_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002C02  6000 0034               2783      BRA     CHECK_HEALTH_COLLISIONS
00002C06                          2784  
00002C06                          2785  PLY_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002C06  2239 000030F2           2786      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002C0C  2439 0000311C           2787      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002C12  D479 0000315E           2788      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002C18  B481                    2789      CMP.L   D1,         D2          ; Do they Overlap ?
00002C1A  6C00 0006               2790      BGE     PLY_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002C1E  6000 0018               2791      BRA     CHECK_HEALTH_COLLISIONS
00002C22                          2792  
00002C22                          2793  PLY_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002C22  D239 00003156           2794      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00002C28  2439 0000311C           2795      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002C2E  B481                    2796      CMP.L   D1,         D2          ; Do they OverLap ?
00002C30  6F00 029E               2797      BLE     ENEMYCOLLISION               ; Collision !
00002C34  6000 0002               2798      BRA     CHECK_HEALTH_COLLISIONS
00002C38                          2799  
00002C38                          2800  CHECK_HEALTH_COLLISIONS:
00002C38  4281                    2801      CLR.L   D1                      ; Clear D1
00002C3A  4282                    2802      CLR.L   D2                      ; Clear D2
00002C3C                          2803  PLX_LTE_TO_HEALTH_X_PLUS_W:
00002C3C  2239 000030EE           2804      MOVE.L  PLAYER_X,   D1
00002C42  D239 00003155           2805      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002C48  2439 00003110           2806      MOVE.L  HEALTH_X,    D2                    ; Move Enemy X to D2
00002C4E  B481                    2807      CMP.L   D1,         D2                          ; Do the Overlap ?
00002C50  6F00 0006               2808      BLE     PLX_PLUS_W_LTE_TO_HEALTH_X      ; Less than or Equal ?
00002C54  6000 0050               2809      BRA     CHECK_ATTACK_COLLISIONS
00002C58                          2810  
00002C58                          2811  PLX_PLUS_W_LTE_TO_HEALTH_X:           ; Check player is not  
00002C58  2239 000030EE           2812      MOVE.L  PLAYER_X,   D1
00002C5E  2439 00003110           2813      MOVE.L  HEALTH_X,    D2            ; Move Enemy X to D2
00002C64  0682 0000000C           2814      ADD.L   #HEALTH_PACK_W,  D2                    ; Set Enemy width X + Width
00002C6A  B481                    2815      CMP.L   D1,         D2                  ; Do they OverLap ?
00002C6C  6C00 0006               2816      BGE     PLY_LTE_TO_HEALTH_Y_PLUS_H  ; Less than or Equal
00002C70  6000 0034               2817      BRA     CHECK_ATTACK_COLLISIONS
00002C74                          2818  PLY_LTE_TO_HEALTH_Y_PLUS_H:     
00002C74  2239 000030F2           2819      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002C7A  2439 00003114           2820      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Y to D2
00002C80  0682 0000000C           2821      ADD.L   #HEALTH_PACK_H,D2          ; Set Enemy Height to D2
00002C86  B481                    2822      CMP.L   D1,         D2          ; Do they Overlap ?
00002C88  6C00 0006               2823      BGE     PLY_PLUS_H_LTE_TO_HEALTH_Y  ; Less than or Equal
00002C8C  6000 0018               2824      BRA     CHECK_ATTACK_COLLISIONS
00002C90                          2825  
00002C90                          2826  PLY_PLUS_H_LTE_TO_HEALTH_Y:     ; Less than or Equal ?
00002C90  D239 00003156           2827      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00002C96  2439 00003114           2828      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Height to D2  
00002C9C  B481                    2829      CMP.L   D1,         D2          ; Do they OverLap ?
00002C9E  6F00 0276               2830      BLE     HEALTH_COLLISION               ; Collision !
00002CA2  6000 0002               2831      BRA     CHECK_ATTACK_COLLISIONS
00002CA6                          2832  
00002CA6                          2833  CHECK_ATTACK_COLLISIONS:
00002CA6  4281                    2834      CLR.L   D1                      ; Clear D1
00002CA8  4282                    2835      CLR.L   D2                      ; Clear D2
00002CAA                          2836  ATTACK_X_LTE_TO_ENEMY_X_PLUS_W:
00002CAA  2239 00003134           2837      MOVE.L  ATTACK_X,   D1
00002CB0  0681 00000023           2838      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002CB6  2439 00003108           2839      MOVE.L  ENEMY_X,    D2                    ; Move Enemy X to D2
00002CBC  B481                    2840      CMP.L   D1,         D2                          ; Do the Overlap ?
00002CBE  6F00 0006               2841      BLE     ATTACK_PLUS_W_LTE_TO_ENMY_X      ; Less than or Equal ?
00002CC2  6000 0050               2842      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002CC6                          2843  
00002CC6                          2844  ATTACK_PLUS_W_LTE_TO_ENMY_X:           ; Check player is not  
00002CC6  2239 00003134           2845      MOVE.L  ATTACK_X,   D1
00002CCC  2439 00003108           2846      MOVE.L  ENEMY_X,    D2            ; Move Enemy X to D2
00002CD2  D479 00003158           2847      ADD.W   ENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002CD8  B481                    2848      CMP.L   D1,         D2                  ; Do they OverLap ?
00002CDA  6C00 0006               2849      BGE     ATK_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002CDE  6000 0034               2850      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002CE2                          2851  
00002CE2                          2852  ATK_LTE_TO_ENEMY_Y_PLUS_H:     
00002CE2  2239 00003138           2853      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002CE8  2439 0000310C           2854      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002CEE  D479 0000315A           2855      ADD.W   ENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002CF4  B481                    2856      CMP.L   D1,         D2          ; Do they Overlap ?
00002CF6  6C00 0006               2857      BGE     ATK_PLUS_H_LTE_TO_ATTACK_Y  ; Less than or Equal
00002CFA  6000 0018               2858      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002CFE                          2859  
00002CFE                          2860  ATK_PLUS_H_LTE_TO_ATTACK_Y:     ; Less than or Equal ?
00002CFE  0681 00000014           2861      ADD.L   #ATTACK_HEIGHT,D1          ; Add Player Height to D1
00002D04  2439 0000310C           2862      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002D0A  B481                    2863      CMP.L   D1,         D2          ; Do they OverLap ?
00002D0C  6F00 0150               2864      BLE     ATTACK_COLLISION               ; Collision !
00002D10  6000 0002               2865      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002D14                          2866  
00002D14                          2867  CHECK_ATTACK_FLY_COLLISIONS:
00002D14  4281                    2868      CLR.L   D1                      ; Clear D1
00002D16  4282                    2869      CLR.L   D2                      ; Clear D2
00002D18                          2870  ATK_X_LTE_TO_FLYENEMY_X_PLUS_W:
00002D18  2239 00003134           2871      MOVE.L  ATTACK_X,   D1
00002D1E  0681 00000023           2872      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002D24  2439 00003118           2873      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002D2A  B481                    2874      CMP.L   D1,         D2                          ; Do the Overlap ?
00002D2C  6F00 0006               2875      BLE     ATTACK_PLUS_W_LTE_TO_FLYENMY_X     ; Less than or Equal ?
00002D30  6000 0050               2876      BRA     CHECK_THROW_COLLISION
00002D34                          2877  
00002D34                          2878  ATTACK_PLUS_W_LTE_TO_FLYENMY_X:           ; Check player is not  
00002D34  2239 00003134           2879      MOVE.L  ATTACK_X,   D1
00002D3A  2439 00003118           2880      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002D40  D479 0000315C           2881      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002D46  B481                    2882      CMP.L   D1,         D2                  ; Do they OverLap ?
00002D48  6C00 0006               2883      BGE     ATK_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002D4C  6000 0034               2884      BRA     CHECK_THROW_COLLISION
00002D50                          2885  
00002D50                          2886  ATK_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002D50  2239 00003138           2887      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002D56  2439 0000311C           2888      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002D5C  D479 0000315E           2889      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002D62  B481                    2890      CMP.L   D1,         D2          ; Do they Overlap ?
00002D64  6C00 0006               2891      BGE     ATK_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002D68  6000 0018               2892      BRA     CHECK_THROW_COLLISION
00002D6C                          2893  
00002D6C                          2894  ATK_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002D6C  0681 00000014           2895      ADD.L   #ATTACK_HEIGHT,D1          ; Add Player Height to D1
00002D72  2439 0000311C           2896      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002D78  B481                    2897      CMP.L   D1,         D2          ; Do they OverLap ?
00002D7A  6F00 010A               2898      BLE     ATTACK_FLY_COLLISION               ; Collision !
00002D7E  6000 0002               2899      BRA     CHECK_THROW_COLLISION
00002D82                          2900  
00002D82                          2901  CHECK_THROW_COLLISION:
00002D82  4281                    2902      CLR.L   D1                      ; Clear D1
00002D84  4282                    2903      CLR.L   D2                      ; Clear D2
00002D86                          2904  THROW_X_LTE_TO_ENEMY_X_PLUS_W:
00002D86  2239 00003142           2905      MOVE.L  THROW_X,   D1
00002D8C  0681 00000023           2906      ADD.L   #THROW_WIDTH,D1          ; Move Player Width to D1
00002D92  2439 00003108           2907      MOVE.L  ENEMY_X,    D2                    ; Move Enemy X to D2
00002D98  B481                    2908      CMP.L   D1,         D2                          ; Do the Overlap ?
00002D9A  6F00 0006               2909      BLE     THROW_PLUS_W_LTE_TO_ENMY_X      ; Less than or Equal ?
00002D9E  6000 0050               2910      BRA     CHECK_THROW_FLY_COLLISIONS
00002DA2                          2911  
00002DA2                          2912  THROW_PLUS_W_LTE_TO_ENMY_X:           ; Check player is not  
00002DA2  2239 00003142           2913      MOVE.L  THROW_X,   D1
00002DA8  2439 00003108           2914      MOVE.L  ENEMY_X,    D2            ; Move Enemy X to D2
00002DAE  D479 00003158           2915      ADD.W   ENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002DB4  B481                    2916      CMP.L   D1,         D2                  ; Do they OverLap ?
00002DB6  6C00 0006               2917      BGE     TRW_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002DBA  6000 0034               2918      BRA     CHECK_THROW_FLY_COLLISIONS
00002DBE                          2919  
00002DBE                          2920  TRW_LTE_TO_ENEMY_Y_PLUS_H:     
00002DBE  2239 00003146           2921      MOVE.L  THROW_Y,   D1          ; Move Player Y to D1
00002DC4  2439 0000310C           2922      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002DCA  D479 0000315A           2923      ADD.W   ENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002DD0  B481                    2924      CMP.L   D1,         D2          ; Do they Overlap ?
00002DD2  6C00 0006               2925      BGE     TRW_PLUS_H_LTE_TO_THROW_Y  ; Less than or Equal
00002DD6  6000 0018               2926      BRA     CHECK_THROW_FLY_COLLISIONS
00002DDA                          2927  
00002DDA                          2928  TRW_PLUS_H_LTE_TO_THROW_Y:     ; Less than or Equal ?
00002DDA  0681 0000000F           2929      ADD.L   #THRW_H_INIT,D1          ; Add Player Height to D1
00002DE0  2439 0000310C           2930      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002DE6  B481                    2931      CMP.L   D1,         D2          ; Do they OverLap ?
00002DE8  6F00 0074               2932      BLE     ATTACK_COLLISION               ; Collision !
00002DEC  6000 0002               2933      BRA     CHECK_THROW_FLY_COLLISIONS
00002DF0                          2934  
00002DF0                          2935  CHECK_THROW_FLY_COLLISIONS:
00002DF0  4281                    2936      CLR.L   D1                      ; Clear D1
00002DF2  4282                    2937      CLR.L   D2                      ; Clear D2
00002DF4                          2938  THROW_X_LTE_TO_FLYENEMY_X_PLUS_W:
00002DF4  2239 00003142           2939      MOVE.L  THROW_X,   D1
00002DFA  0681 0000000F           2940      ADD.L   #THRW_W_INIT,D1          ; Move Player Width to D1
00002E00  2439 00003118           2941      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002E06  B481                    2942      CMP.L   D1,         D2                          ; Do the Overlap ?
00002E08  6F00 0006               2943      BLE     THROW_PLUS_W_LTE_TO_FLYENMY_X     ; Less than or Equal ?
00002E0C  6000 00A0               2944      BRA     COLLISION_CHECK_DONE
00002E10                          2945  
00002E10                          2946  THROW_PLUS_W_LTE_TO_FLYENMY_X:           ; Check player is not  
00002E10  2239 00003142           2947      MOVE.L  THROW_X,   D1
00002E16  2439 00003118           2948      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002E1C  D479 0000315C           2949      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002E22  B481                    2950      CMP.L   D1,         D2                  ; Do they OverLap ?
00002E24  6C00 0006               2951      BGE     TRW_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002E28  6000 0084               2952      BRA     COLLISION_CHECK_DONE
00002E2C                          2953  
00002E2C                          2954  TRW_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002E2C  2239 00003146           2955      MOVE.L  THROW_Y,   D1          ; Move Player Y to D1
00002E32  2439 0000311C           2956      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002E38  D479 0000315E           2957      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002E3E  B481                    2958      CMP.L   D1,         D2          ; Do they Overlap ?
00002E40  6C00 0006               2959      BGE     TRW_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002E44  6000 0068               2960      BRA     COLLISION_CHECK_DONE
00002E48                          2961  
00002E48                          2962  TRW_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002E48  0681 0000000F           2963      ADD.L   #THRW_H_INIT,D1          ; Add Player Height to D1
00002E4E  2439 0000311C           2964      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002E54  B481                    2965      CMP.L   D1,         D2          ; Do they OverLap ?
00002E56  6F00 002E               2966      BLE     ATTACK_FLY_COLLISION               ; Collision !
00002E5A  6000 0052               2967      BRA     COLLISION_CHECK_DONE
00002E5E                          2968  
00002E5E                          2969  
00002E5E                          2970  ;---
00002E5E                          2971  
00002E5E                          2972  ATTACK_COLLISION:
00002E5E  4A39 00003153           2973      TST.B   ENEMY_HIT
00002E64  6600 00EE               2974      BNE     STILL_COLLIDED
00002E68  6100 F9FC               2975      BSR     PLAY_HIT
00002E6C  23FC 00000190 0000310C  2976      MOVE.L  #400, ENEMY_Y
00002E76  13FC 0001 00003153      2977      MOVE.B  #01,  ENEMY_HIT
00002E7E  5239 00003152           2978      ADDI.B  #1,   ENEMIES_DEFEATED
00002E84  4E75                    2979      RTS
00002E86                          2980  
00002E86                          2981  ATTACK_FLY_COLLISION:
00002E86  4A39 00003154           2982      TST.B   FLYENEMY_HIT
00002E8C  6600 00C6               2983      BNE     STILL_COLLIDED
00002E90  6100 F9D4               2984      BSR     PLAY_HIT
00002E94  23FC 00000190 0000311C  2985      MOVE.L  #400, FLYINGENEMY_Y
00002E9E  13FC 0001 00003154      2986      MOVE.B  #01,  FLYENEMY_HIT
00002EA6  5239 00003152           2987      ADDI.B  #1,   ENEMIES_DEFEATED
00002EAC  4E75                    2988      RTS
00002EAE                          2989  
00002EAE                          2990  COLLISION_CHECK_DONE:               ; No Collision Update points
00002EAE  4239 000030CB           2991      CLR.B   IN_ENEMY
00002EB4  4239 000030CC           2992      CLR.B   IN_HPACK
00002EBA  4281                    2993      CLR.L   D1
00002EBC  1239 0000312D           2994      MOVE.B  POINTS,    D1          ; Move points upgrade to D1
00002EC2  D2B9 000030F6           2995      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00002EC8  23C1 000030F6           2996      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00002ECE  4E75                    2997      RTS                             ; Return to subroutine
00002ED0                          2998  
00002ED0                          2999  
00002ED0                          3000  ENEMYCOLLISION:
00002ED0  0C39 0001 000030CB      3001      CMP.B     #$01, IN_ENEMY
00002ED8  6700 007A               3002      BEQ     STILL_COLLIDED
00002EDC  0C39 0001 000030CD      3003      CMP.B   #01, DRAW_HEALTHPACKS
00002EE4  6600 F492               3004      BNE     RESET_HEALTH_POSITION
00002EE8  13FC 0001 000030CD      3005      MOVE.B  #01, DRAW_HEALTHPACKS 
00002EF0  13FC 0001 000030CE      3006      MOVE.B  #01, SPAWN_HEALTHPACKS 
00002EF8  5339 0000312C           3007      SUB.B   #1, LIVES
00002EFE  13FC 0001 000030CB      3008      MOVE.B  #$01, IN_ENEMY
00002F06  4A39 0000312C           3009      TST.B   LIVES
00002F0C  6700 0048               3010      BEQ     GAME_OVER
00002F10  6100 F8FA               3011      BSR     PLAY_HITHURT               ; Play Opps Wav
00002F14  4E75                    3012      RTS                             ; Return to subroutine
00002F16                          3013  
00002F16                          3014  HEALTH_COLLISION:
00002F16  0C39 0001 000030CC      3015      CMP.B     #$01, IN_HPACK
00002F1E  6700 0034               3016      BEQ     STILL_COLLIDED
00002F22  13FC 0000 000030CD      3017      MOVE.B  #00, DRAW_HEALTHPACKS
00002F2A  6100 F8FE               3018      BSR     PLAY_POWERUP               ; Play Opps Wav
00002F2E  5239 0000312C           3019      ADD.B   #1, LIVES
00002F34  0C39 0005 0000312C      3020      CMP.B   #05, LIVES
00002F3C  6C00 000C               3021      BGE     STOP_HPACK_SPAWN
00002F40  13FC 0001 000030CC      3022      MOVE.B  #$01, IN_HPACK
00002F48  4E75                    3023      RTS
00002F4A                          3024  
00002F4A                          3025  STOP_HPACK_SPAWN:
00002F4A  13FC 0000 000030CE      3026      MOVE.B  #00, SPAWN_HEALTHPACKS
00002F52  4E75                    3027      RTS
00002F54                          3028  
00002F54                          3029  STILL_COLLIDED:
00002F54  4E75                    3030      RTS
00002F56                          3031  
00002F56                          3032  GAME_OVER:
00002F56  6100 E52C               3033      BSR     DRAW                    ; Redraw the Scene
00002F5A  103C 005E               3034      MOVE.B  #TC_REDRAW,        D0
00002F5E  4E4F                    3035      TRAP    #15
00002F60  6100 F86E               3036      BSR     PLAY_GAMEOVER
00002F64  4281                    3037      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002F66                          3038  
00002F66  223C 00FFFFFF           3039      MOVE.L  #WHITE,     D1
00002F6C  103C 0015               3040      MOVE.B  #21,        D0          ; Set Text Color
00002F70  243C 01130005           3041      MOVE.L  #$01130005, D2
00002F76  4E4F                    3042      TRAP    #15                     ; Trap (Perform action)
00002F78                          3043  
00002F78  7200                    3044      MOVE.L  #BLACK,     D1
00002F7A  103C 0051               3045      MOVE.B  #81,        D0          ; Set Text Color
00002F7E  4E4F                    3046      TRAP    #15                     ; Trap (Perform action)
00002F80                          3047  
00002F80  103C 000B               3048      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F84  323C FF00               3049      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00002F88  4E4F                    3050      TRAP    #15                     ; Trap (Perform action)
00002F8A                          3051  
00002F8A  103C 000B               3052      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F8E  323C 1005               3053      MOVE.W  #$1005,     D1          ; Col 10, Row 03
00002F92  4E4F                    3054      TRAP    #15                     ; Trap (Perform action)
00002F94  43F9 00003080           3055      LEA     GAMEOVER_MSG,A1        ; Game Over Message
00002F9A  303C 000D               3056      MOVE    #13,        D0          ; No Line feed
00002F9E  4E4F                    3057      TRAP    #15                     ; Trap (Perform action)
00002FA0                          3058  
00002FA0                          3059      ; Player Score Message
00002FA0  103C 000B               3060      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002FA4  323C 0F06               3061      MOVE.W  #$0F06,     D1          ; Col 02, Row 01
00002FA8  4E4F                    3062      TRAP    #15                     ; Trap (Perform action)
00002FAA  43F9 0000301A           3063      LEA     SCORE_MSG,  A1          ; Score Message
00002FB0  303C 000D               3064      MOVE    #13,        D0          ; No Line feed
00002FB4  4E4F                    3065      TRAP    #15                     ; Trap (Perform action)
00002FB6                          3066  
00002FB6                          3067      ; Player Score Value
00002FB6  103C 000B               3068      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002FBA  323C 1706               3069      MOVE.W  #$1706,     D1          ; Col 09, Row 01
00002FBE  4E4F                    3070      TRAP    #15                     ; Trap (Perform action)
00002FC0  103C 0003               3071      MOVE.B  #03,        D0          ; Display number at D1.L
00002FC4  2239 000030F6           3072      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00002FCA  4E4F                    3073      TRAP    #15                     ; Trap (Perform action)
00002FCC                          3074      
00002FCC                          3075  
00002FCC  223C 00FFFFFF           3076      MOVE.L  #WHITE,     D1
00002FD2  103C 0015               3077      MOVE.B  #21,        D0          ; Set Text Color
00002FD6  243C 03140000           3078      MOVE.L  #$03140000, D2
00002FDC  4E4F                    3079      TRAP    #15                     ; Trap (Perform action)
00002FDE                          3080  
00002FDE                          3081  
00002FDE                          3082      ; Restart
00002FDE  103C 000B               3083      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002FE2  323C 0B08               3084      MOVE.W  #$0B08,     D1          ; Col 09, Row 01
00002FE6  4E4F                    3085      TRAP    #15                     ; Trap (Perform action)
00002FE8  43F9 0000308B           3086      LEA     RESTART_MSG,  A1          ; Score Message
00002FEE  303C 000D               3087      MOVE    #13,        D0          ; No Line feed
00002FF2  4E4F                    3088      TRAP    #15                     ; Trap (Perform action)
00002FF4                          3089  
00002FF4                          3090      
00002FF4  103C 005E               3091      MOVE.B  #TC_REDRAW,        D0
00002FF8  4E4F                    3092      TRAP    #15
00002FFA                          3093  
00002FFA                          3094  INPUTLOOP:
00002FFA  6100 F03A               3095      BSR     BATTLEINPUT
00002FFE  60FA                    3096      BRA     INPUTLOOP
00003000                          3097  
00003000                          3098  EXIT:
00003000                          3099      
00003000  103C 000B               3100      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00003004  323C FF00               3101      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00003008  4E4F                    3102      TRAP    #15                     ; Trap (Perform action)
0000300A                          3103  
0000300A  103C 005E               3104      MOVE.B  #TC_REDRAW,        D0
0000300E  4E4F                    3105      TRAP    #15
00003010                          3106  
00003010  103C 0009               3107      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00003014  4E4F                    3108      TRAP    #15                     ; Trap (Perform action)
00003016  FFFF FFFF               3109      SIMHALT
0000301A                          3110  
0000301A= 53 63 6F 72 65 20 ...   3111  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00003023= 4B 65 79 43 6F 64 ...   3112  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
0000302E= 4A 75 6D 70 2E 2E ...   3113  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00003037                          3114  
00003037= 49 64 6C 65 2E 2E ...   3115  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00003040= 55 70 64 61 74 65 ...   3116  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
0000304B= 44 72 61 77 2E 2E ...   3117  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00003054                          3118  
00003054= 58 3A 00                3119  X_MSG           DC.B    'X:', 0             ; X Position Message
00003057= 59 3A 00                3120  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
0000305A= 56 3A 00                3121  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
0000305D= 44 52 41 57 00          3122  VARMSG           DC.B    'DRAW', 0             ; Gravity Position Message
00003062= 45 4E 45 4D 49 45 ...   3123  GND_MSG         DC.B    'ENEMIES DEFEATED:', 0           ; On Ground Position Message
00003074                          3124  
00003074= 45 78 69 74 69 6E ...   3125  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00003080= 47 61 6D 65 20 4F ...   3126  GAMEOVER_MSG    DC.B    'Game Over!', 0      ; Game Over Message
0000308B= 50 72 65 73 73 20 ...   3127  RESTART_MSG    DC.B    'Press R to play again', 0      ; Game Over Message
000030A1= 23 23 00                3128  TREET          DC.B     '##',0
000030A4                          3129  
000030A4= 45 6E 74 65 72 20 ...   3130  PRESSSTART      DC.B    'Enter 1 to start',0
000030B5= 41 4E 54 20 44 45 ...   3131  TITLEMSG        DC.B    'ANT DEFENDER',0
000030C2= 4C 69 76 65 73 20 ...   3132  LIVES_MSG       DC.B    'Lives : ',0        ; lives message
000030CB                          3133  
000030CB= 00                      3134  IN_ENEMY        DC.B      00                  ; marker for if the player is in the enemy
000030CC= 00                      3135  IN_HPACK        DC.B      00                  ; marker for if the player is in the health pack
000030CD= 00                      3136  DRAW_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are showing
000030CE= 00                      3137  SPAWN_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are spawning
000030CF                          3138  
000030D0= 07D0                    3139  LEVEL_02        DC.W    2000
000030D2= 2710                    3140  LEVEL_03        DC.W    10000
000030D4                          3141  
000030D4= 00001B58 00000FA0 ...   3142  LEVELS:         DC.L    7000,4000,2000,1000
000030E4                          3143  
000030E4                          3144  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000030E6                          3145  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000030E8                          3146  
000030E8                          3147  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000030EC                          3148  LAST_KEY        DS.W    01  ; Reserve Space for Current Key Pressed
000030EE                          3149  
000030EE                          3150  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000030F2                          3151  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000030F6                          3152  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000030FA                          3153  
000030FA                          3154  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000030FE                          3155  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00003102                          3156  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00003106                          3157  
00003106                          3158  ; 1, = left, 0 = right
00003106                          3159  PLAYER_DIR      DS.B    01  ; Reserve Space for Player Direction
00003107                          3160  
00003108                          3161  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
0000310C                          3162  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00003110                          3163  
00003110                          3164  HEALTH_X         DS.L    01  ; Reserve Space for Health+ X Position
00003114                          3165  HEALTH_Y         DS.L    01  ; Reserve Space for Health Y Position
00003118                          3166  
00003118                          3167  FLYINGENEMY_X         DS.L    01  ; Reserve Space for Flying Enemy X Position
0000311C                          3168  FLYINGENEMY_Y         DS.L    01  ; Reserve Space for Flying Enemy Y Position
00003120                          3169  
00003120= 000000FF                3170  ENEMYCOLOR        DC.L        $000000FF
00003124= 00FF0000                3171  FLYENEMYCOLOR     DC.L        $00FF0000
00003128                          3172  
00003128                          3173  RANDOM            DS.L        01  ; Reserve Space for Random Number
0000312C= 05                      3174  LIVES             DC.B        05  ; reserves space for player lives
0000312D                          3175   
0000312D= 02                      3176  POINTS            DC.B        02          ; Points added
0000312E                          3177  
0000312E= 00                      3178  CURRENTLYATTACKING   DC.B    00
00003130= 0000                    3179  ATTACK_COOLDOWN      DC.W    00
00003132= 0000                    3180  ATTACK_TIME          DC.W    00
00003134= 00000000                3181  ATTACK_X             DC.L    00
00003138= 00000000                3182  ATTACK_Y             DC.L    00
0000313C  =00000014               3183  ATTACK_HEIGHT        EQU     20
0000313C  =00000023               3184  ATTACK_WIDTH         EQU     35 
0000313C                          3185  
0000313C= 00                      3186  CURRENTLYTHROWING   DC.B    00
0000313E= 0000                    3187  THROW_COOLDOWN      DC.W    00
00003140= 0000                    3188  THROW_TIME          DC.W    00
00003142= 00000000                3189  THROW_X             DC.L    00
00003146= 00000000                3190  THROW_Y             DC.L    00
0000314A  =00000014               3191  THROW_HEIGHT        EQU     20
0000314A  =00000023               3192  THROW_WIDTH         EQU     35 
0000314A                          3193  THROW_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
0000314E                          3194  THROW_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00003152                          3195  
00003152= 00                      3196  ENEMIES_DEFEATED     DC.B    00
00003153= 00                      3197  ENEMY_HIT           DC.B    00
00003154= 00                      3198  FLYENEMY_HIT        DC.B    00
00003155                          3199  
00003155= 0C                      3200  PLAYER_WIDTH      DC.B        12          ; Player Width
00003156= 0C                      3201  PLAYER_HEIGHT     DC.B        12          ; Player Height
00003157                          3202  
00003158= 000C                    3203  ENEMY_WIDTH       DC.W        12          ; Enemy Width
0000315A= 000C                    3204  ENEMY_HEIGHT      DC.W        12          ; Enemy Height
0000315C                          3205  
0000315C= 0014                    3206  FLYENEMY_WIDTH    DC.W        20 
0000315E= 000C                    3207  FLYENEMY_HEIGHT   DC.W        12 
00003160                          3208  
00003160                          3209          
00003160= 6A 75 6D 70 2E 77 ...   3210  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00003169= 67 61 6D 65 4F 76 ...   3211  GAMEOVER_WAV         DC.B    'gameOver.wav',0         ; Run Sound
00003176= 68 69 74 48 75 72 ...   3212  HITHURT_WAV        DC.B    'hitHurt.wav',0        ; Collision Opps
00003182= 68 69 74 2E 77 61 ...   3213  HIT_WAV        DC.B    'hit.wav',0        ; Collision Opps
0000318A= 70 6F 77 65 72 55 ...   3214  POWERUP_WAV        DC.B    'powerUP.wav',0        ; Collision Opps
00003196= 6C 65 76 65 6C 43 ...   3215  LEVELCHANGE_WAV        DC.B    'levelChange.wav',0        ; Collision Opps
000031A6                          3216  
000031A6= 3A0C                    3217  TRUNK   DC.W    $3A0C
000031A8= 00C8                    3218  X   DC.W    200
000031AA= 0190                    3219  Y   DC.W    400
000031AC= 00C8                    3220  Z   DC.W    200
000031AE= 0004                    3221  SCALER DC.W  4
000031B0  =00000010               3222  ROWC    EQU    16
000031B0= FFB0                    3223  WIDTH   DC.W    $FFB0
000031B2                          3224  
000031B2= 00000000                3225  timer           DC.L    0
000031B6                          3226  
000031B6                          3227      END    START        ; last line of source
000031B6                          3228  -------------------- end include --------------------

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AKEY                41
APPLEH              10
APPLEW              10
APRESSED            1DEE
ARC_DONE            27BA
ATK_LTE_TO_ENEMY_Y_PLUS_H  2CE2
ATK_LTE_TO_FLYENEMY_Y_PLUS_H  2D50
ATK_PLUS_H_LTE_TO_ATTACK_Y  2CFE
ATK_PLUS_H_LTE_TO_FLYENEMY_Y  2D6C
ATK_X_LTE_TO_FLYENEMY_X_PLUS_W  2D18
ATTACKMSG1          18B3
ATTACKMSG2          18CF
ATTACK_COLLISION    2E5E
ATTACK_COOLDOWN     3130
ATTACK_COOLDOWN_SUB  2236
ATTACK_FLY_COLLISION  2E86
ATTACK_HEIGHT       14
ATTACK_PLUS_W_LTE_TO_ENMY_X  2CC6
ATTACK_PLUS_W_LTE_TO_FLYENMY_X  2D34
ATTACK_TIME         3132
ATTACK_TIME_SUB     222E
ATTACK_WIDTH        23
ATTACK_X            3134
ATTACK_X_LTE_TO_ENEMY_X_PLUS_W  2CAA
ATTACK_Y            3138
BATTLE              1146
BATTLEINPUT         2036
BLACK               0
BLUE                FF0000
BROWN               19506D
BULLETH             5
BULLETW             5
CAMERAOFFSETX       1C3C
CAMERAOFFSETY       1C40
CAMERAX             1C44
CAMERAY             1C48
CAMERAZOOM          1C4C
CELLBRX             13EE
CELLBRY             13F2
CELLTLX             13E6
CELLTLY             13EA
CELLXRADIUS         1436
CELLYOFFSET         143E
CELLYRADIUS         143A
CENTERX             11EA
CENTERY             11EE
CHECKINCREMENT      1AC4
CHECKPAUSED         2114
CHECK_ATTACK_COLLISIONS  2CA6
CHECK_ATTACK_COOLDOWN  2220
CHECK_ATTACK_FLY_COLLISIONS  2D14
CHECK_COLLISIONS    2B60
CHECK_FLYENEMY_COLLISIONS  2BCA
CHECK_HEALTH_COLLISIONS  2C38
CHECK_THROW_COLLISION  2D82
CHECK_THROW_DONE    21F2
CHECK_THROW_FLY_COLLISIONS  2DF0
CLEARSCREEN         1164
COLLISION           1148
COLLISION_CHECK_DONE  2EAE
COLOR1              201808
COLOR2              494320
COLOR3              56864B
COLOR4              7AC687
COLOR5              AFE5D0
COLORRED            463EBD
COMMONINPUT         1CEC
CONTINUE            2390
CRLF                1856
CURRENTHEALTH       11F6
CURRENTHPX          1894
CURRENTKEY          11D8
CURRENTLYATTACKING  312E
CURRENTLYTHROWING   313C
CURRENTPTS          11F2
CURRENTSPAWNX       1AF4
CURRENTSPAWNY       1AF8
CURRENT_KEY         30E8
DELAY               200E
DIRT                4FAD
DKEY                44
DPRESSED            1E18
DRAW                1484
DRAWBATTLE          2424
DRAWBG              162C
DRAWCELL            1704
DRAWDIRT            2B3A
DRAWENEMIES         1690
DRAWENEMY           16C0
DRAWHEALTH          1532
DRAWPAUSE           14BC
DRAWPLAYER          165C
DRAWRECT            17CE
DRAWTEXT            158C
DRAWUIRECT          1810
DRAW_ATTACK         28C6
DRAW_BACKGROUND     24F4
DRAW_ENEMY          295A
DRAW_FLOOR          2A64
DRAW_FLOOR_L1       2B30
DRAW_FLOOR_L2       2AF4
DRAW_FLOOR_L3       2AE2
DRAW_FLOOR_L4       2AD0
DRAW_FLOOR_L5       2ABE
DRAW_FLYENEMY       299E
DRAW_HEALTHPACK     29E2
DRAW_HEALTHPACKS    30CD
DRAW_HEALTHPACK_DONE  2A58
DRAW_HILL           2464
DRAW_MSG            304B
DRAW_PLAYER         2872
DRAW_PLYR_DATA      259C
DRAW_THROW          2916
END                 11B8
ENDCOLLIDE          1AAC
ENDCOLLISION        13E4
ENDDRAW             17A4
ENDDRAWPAUSE        1530
ENDFOLLOW           1C72
ENDHEAL             11A6
ENDINITENEMY        1AAE
ENDINPUT            1D8E
ENDLOOP             1116
ENDMOVEMENT         1E2E
ENDMSG              186A
ENDPROCESS          1AAA
ENDTOGGLEFULLSCREEN  1848
ENEMIES_DEFEATED    3152
ENEMY1X             1AD2
ENEMY1Y             1AD6
ENEMY2X             1ADA
ENEMY2Y             1ADE
ENEMY3X             1AE2
ENEMY3Y             1AE6
ENEMY4X             1AEA
ENEMY4Y             1AEE
ENEMYCOLCHECK       196A
ENEMYCOLLIDE        1AA4
ENEMYCOLLISION      2ED0
ENEMYCOLOR          3120
ENEMYDIR            1C3A
ENEMYH              C
ENEMYHALFH          6
ENEMYHALFW          8
ENEMYINDEX          1AF2
ENEMYLEFTCOLCHECK   1A82
ENEMYRIGHTCOLCHECK  1A90
ENEMYSPAWNTIMER     1ABE
ENEMYTIME           1ABA
ENEMYW              10
ENEMYX              18FE
ENEMYY              1902
ENEMY_HEIGHT        315A
ENEMY_HIT           3153
ENEMY_H_INIT        C
ENEMY_WIDTH         3158
ENEMY_X             3108
ENEMY_Y             310C
ENMY_H_INIT         C
ENMY_W_INIT         C
ENTERHILL           1452
ENTERKEY            D
ESCAPE              1B
ESCAPEJUSTPRESSED   1D9E
ESCAPEKEY           1B
ESCAPEPRESSED       1D90
EXIT                3000
EXIT_MSG            3074
FIRSTINIT           1004
FLYENEMYCOLOR       3124
FLYENEMY_HEIGHT     315E
FLYENEMY_HIT        3154
FLYENEMY_WIDTH      315C
FLYINGENEMY_X       3118
FLYINGENEMY_Y       311C
FLY_ENMY_H_INIT     C
FLY_ENMY_W_INIT     14
FOLLOWCAM           1C50
GAME                2004
GAMELOOP            2004
GAMEOVER_INDEX      0
GAMEOVER_LOAD       27BE
GAMEOVER_MSG        3080
GAMEOVER_WAV        3169
GAME_OVER           2F56
GETCURRENTENEMY     1B66
GETENEMY1           1B98
GETENEMY2           1BA6
GETENEMY3           1BB4
GETENEMY4           1BC2
GND_FALSE           0
GND_MSG             3062
GND_TRUE            1
GOFULLSCREEN        183C
GREEN               566D19
HEAL                118A
HEALTHBARLOCY       189A
HEALTHBAROFFSETX    1898
HEALTHBRX           188C
HEALTHBRY           1890
HEALTHMSG           187C
HEALTHROW           189C
HEALTHTLX           1884
HEALTHTLY           1888
HEALTH_COLLISION    2F16
HEALTH_PACK_H       C
HEALTH_PACK_W       C
HEALTH_X            3110
HEALTH_Y            3114
HEALTIME            1ABC
HITHURT_INDEX       2
HITHURT_LOAD        27FA
HITHURT_WAV         3176
HIT_INDEX           5
HIT_LOAD            2854
HIT_WAV             3182
IDLE                27BC
IDLE_MSG            3037
INCREMENT           1AC0
INITALLENEMIES      1AFC
INITDRAW            1452
INITENEMY           1906
INITENEMYBL         1A48
INITENEMYBR         1A10
INITENEMYTL         19A2
INITENEMYTR         19DA
INITIALIZECELL      1202
INITRUN             1E30
INPUTKEYS           11D1
INPUTLOOP           2FFA
INPUTTYPE           1CEA
IN_ENEMY            30CB
IN_HPACK            30CC
ISFOLLOW            1C4E
ISFULLSCREEN        1868
ISPAUSED            11E0
IS_ATTACKING        28BA
IS_PLAYER_ON_GND    271A
IS_THROWING         290A
JMP_INDEX           1
JUMP                276E
JUMP_DONE           279A
JUMP_LOAD           27DC
JUMP_MSG            302E
JUMP_WAV            3160
KEY0                30
KEY0JUSTPRESSED     1DB2
KEY0PRESSED         1DA4
KEY1                31
KEY1PRESSED         1DC6
KEY2                32
KEY2PRESSED         1DCE
KEY3                33
KEYCODE_MSG         3023
KKEY                4B
LASTKEY             11DC
LAST_KEY            30EC
LEVELCHANGE_INDEX   4
LEVELCHANGE_WAV     3196
LEVELS              30D4
LEVEL_02            30D0
LEVEL_03            30D2
LIFEGREEN           44FF44
LIVES               312C
LIVES_MSG           30C2
LKEY                4C
LOOKLEFT            1
LOOKRIGHT           2
LOOP                110C
LVLCHANGE_LOAD      2836
LVLTYPE             1C8E
MAP                 1122
MAPINIT             10BE
MAPINPUT            1D16
MAPMOVEINPUT        1D3C
MAXHEALTH           11FA
MENUINPUT           1D0A
MOVE_ENEMY          22A8
MOVE_ENEMY_L2       22DA
MOVE_ENEMY_L3       22F0
MOVE_ENEMY_L4       2306
MOVE_HEALTHPACK     22A0
MOVE_PLAYER_LEFT    223E
MOVE_PLAYER_RIGHT   2266
MOVE_THROW          21C4
MOVE_TREE           2298
NEXTINIT            1012
NOINPUT             1CDC
PAUSED              1162
PAUSEDINPUT         1D78
PAUSEHALFHEIGHT     18A2
PAUSEHALFWIDTH      189E
PAUSEMSG            18A6
PERFORM_ATTACK      2392
PERFORM_JUMP        278A
PERFORM_THROW       23DC
PERFORM_THROW_ARC   27AE
PLAYERH             8
PLAYERTIME          1AB8
PLAYERW             8
PLAYERX             11E2
PLAYERY             11E6
PLAYER_DIR          3106
PLAYER_HEIGHT       3156
PLAYER_SCORE        30F6
PLAYER_WIDTH        3155
PLAYER_X            30EE
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  2B64
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  2B80
PLAYER_Y            30F2
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  2B9C
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  2BB6
PLAY_GAMEOVER       27D0
PLAY_HIT            2866
PLAY_HITHURT        280C
PLAY_JUMP           27EE
PLAY_LVLCHANGE      2848
PLAY_POWERUP        282A
PLX_LTE_TO_FLYENEMY_X_PLUS_W  2BCE
PLX_LTE_TO_HEALTH_X_PLUS_W  2C3C
PLX_PLUS_W_LTE_TO_FLYENEMY_X  2BEA
PLX_PLUS_W_LTE_TO_HEALTH_X  2C58
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        30FE
PLYR_H_INIT         C
PLYR_JUMP_V         FFFFFFED
PLYR_ON_GND         3102
PLYR_VELOCITY       30FA
PLYR_W_INIT         14
PLY_LTE_TO_FLYENEMY_Y_PLUS_H  2C06
PLY_LTE_TO_HEALTH_Y_PLUS_H  2C74
PLY_PLUS_H_LTE_TO_FLYENEMY_Y  2C22
PLY_PLUS_H_LTE_TO_HEALTH_Y  2C90
POINTS              312D
POINTSGAIN          1
POINTSMSG           1874
POINTSROW           189D
POWERUP_INDEX       3
POWERUP_LOAD        2818
POWERUP_WAV         318A
PRESSSTART          30A4
PRINT               17BE
PRINTNUM            17C6
PROCESSENEMIES      1B3C
PROCESSENEMIESLOOP  1B46
PROCESSENEMY        1938
PROCESSENEMYBL      1A62
PROCESSENEMYBR      1A28
PROCESSENEMYTL      19BA
PROCESSENEMYTR      19F0
PROCESS_INPUT       20D8
PROCESS_RESTART     2104
RANDOM              3128
RED                 FF
RESET_ENEMY_POSITION  2320
RESET_FLYENEMY_POSITION  234A
RESET_HEALTH_POSITION  2378
RESET_THROW         2202
RESET_TREE          228E
RESTART_MSG         308B
RKEY                52
ROWC                10
RUNACTIONKEYS       41444C20
SAVECURRENTENEMY    1BD0
SAVEENEMY1          1C02
SAVEENEMY2          1C10
SAVEENEMY3          1C1E
SAVEENEMY4          1C2C
SCALER              31AE
SCORE_MSG           301A
SCREENH             1200
SCREENW             11FE
SCREEN_H            30E6
SCREEN_W            30E4
SETCURSOR           1818
SETFILLCOLOUR       17AE
SETFONTCOLOUR       17B6
SETFULLSCREEN       184E
SETPENCOLOUR        17A6
SET_OFF_GROUND      2762
SET_ON_GROUND       273A
SKEY                53
SKY                 FFE2B0
SPACEBAR            20
SPACEKEY            20
SPAWN_HEALTHPACKS   30CE
SPRESSED            1E02
START               1000
STILLPAUSED         211E
STILL_COLLIDED      2F54
STOP_HPACK_SPAWN    2F4A
TAKEDMG             11A8
TCCRS               B
TCDBL               5C
TCFONT              15
TCFULLSCREEN        21
TCINP               13
TCPENCLR            50
TCPENFIL            51
TCRECT              57
TCSCREEN            21
TCSCREENSIZE        0
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_REDRAW           5E
TC_SCREEN           21
TC_S_SIZE           0
TESTINPUT           1C90
TESTMSG             11CC
THROW_ARC           279C
THROW_COOLDOWN      313E
THROW_GRAVITY       314E
THROW_HEIGHT        14
THROW_PLUS_W_LTE_TO_ENMY_X  2DA2
THROW_PLUS_W_LTE_TO_FLYENMY_X  2E10
THROW_TIME          3140
THROW_VELOCITY      314A
THROW_WIDTH         23
THROW_X             3142
THROW_X_LTE_TO_ENEMY_X_PLUS_W  2D86
THROW_X_LTE_TO_FLYENEMY_X_PLUS_W  2DF4
THROW_Y             3146
THRW_DFLT_G         1
THRW_DFLT_V         0
THRW_H_INIT         F
THRW_JUMP_V         FFFFFFF0
THRW_W_INIT         F
TIMER               31B2
TITLE               104E
TITLE1MSG           1092
TITLE2MSG           10A4
TITLELOOP           1084
TITLEMSG            30B5
TOGGLEFOLLOW        1C74
TOGGLEFULLSCREEN    1820
TOGGLEPAUSE         117A
TREET               30A1
TREE_LEAVES_X       256E
TREE_LEAVES_Y       2562
TREE_LOOP           252A
TRUNK               31A6
TRW_LTE_TO_ENEMY_Y_PLUS_H  2DBE
TRW_LTE_TO_FLYENEMY_Y_PLUS_H  2E2C
TRW_PLUS_H_LTE_TO_FLYENEMY_Y  2E48
TRW_PLUS_H_LTE_TO_THROW_Y  2DDA
TURNONFOLLOW        1C86
UPDATE              2126
UPDATE_MSG          3040
VARMSG              305D
V_MSG               305A
WASDKEYS            57415344
WASTETIME           1170
WHITE               FFFFFF
WIDTH               31B0
WKEY                57
WPRESSED            1DDA
X                   31A8
X_MSG               3054
Y                   31AA
Y_MSG               3057
Z                   31AC
ZKEY                5A
ZONE1BRX            13FE
ZONE1BRY            1402
ZONE1COLLISION      1338
ZONE1TLX            13F6
ZONE1TLY            13FA
ZONE2BRX            140E
ZONE2BRY            1412
ZONE2COLLISION      1366
ZONE2TLX            1406
ZONE2TLY            140A
ZONE3BRX            141E
ZONE3BRY            1422
ZONE3COLLISION      1390
ZONE3TLX            1416
ZONE3TLY            141A
ZONE4BRX            142E
ZONE4BRY            1432
ZONE4COLLISION      13BA
ZONE4TLX            1426
ZONE4TLY            142A
ZONEHEIGHT          1446
ZONEMSG             144A
ZONEWIDTH           1442
ZPRESSED            1DB8
_00000000           1CBE
_00000001           1CCC
_00000002           1CDA
_00000003           1D54
_00000004           1D60
_00000005           1D6C
_00000006           1D78
_00000007           205E
_00000008           2070
_00000009           2082
_0000000A           2094
_0000000B           20B8
_0000000C           2248
_0000000D           2270
_0000000E           239C
_0000000F           23E6
_00000010           2778
