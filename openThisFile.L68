00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/02/2025 19:00:45

00000000                             1  ; this file starts the program.
00000000                             2  ; contains the title screen, includes all other files
00000000                             3  
00001000                             4      org $1000
00001000                             5  start:
00001000  6000 0002                  6      bra firstInit
00001004                             7  
00001004                             8  firstInit:
00001004                             9      ; Enable the screen back buffer(see easy 68k help)
00001004  103C 005C                 10      MOVE.B  #tcdbl,D0          ; 92 Enables Double Buffer
00001008  123C 0011                 11      MOVE.B  #17,        D1          ; Combine Tasks
0000100C  4E4F                      12      TRAP    #15                     ; Trap (Perform action)
0000100E                            13      
0000100E  6000 0002                 14      bra nextInit
00001012                            15      
00001012                            16  nextInit:
00001012  33FC 0000 00001C78        17      move.w #0, lvlType
0000101A                            18      
0000101A  103C 0021                 19      MOVE.B  #tcScreen, D0           ; access screen information
0000101E  223C 00000000             20      MOVE.L  #tcScreenSize, D1       ; placing 0 in D1 triggers loading screen size information
00001024  4E4F                      21      TRAP    #15                     ; interpret D0 and D1 for screen size
00001026  33C1 00001200             22      MOVE.W  D1,         screenH     ; place screen height in memory location
0000102C  4841                      23      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000102E  33C1 000011FE             24      MOVE.W  D1,         screenW     ; place screen width in memory location
00001034                            25      
00001034  13FC 0000 000011E0        26      move.b #$00, isPaused
0000103C                            27  
0000103C                            28     
0000103C                            29      
0000103C  4282                      30      clr.l d2
0000103E  303C 0015                 31      move #tcFont, d0
00001042  223C 00AFE5D0             32      move.l #color5, d1
00001048  4E4F                      33      trap #15
0000104A                            34      
0000104A  6000 0002                 35      bra title
0000104E                            36  
0000104E                            37  title:
0000104E  4EB9 0000161E             38      jsr drawBg
00001054                            39      
00001054  323C 1F0D                 40      move.w #$1f0d, d1
00001058  4EB9 00001802             41      jsr setCursor
0000105E  43F9 00001092             42      lea title1msg, a1
00001064  4EB9 000017A8             43      jsr print
0000106A                            44      
0000106A  323C 1C0F                 45      move.w #$1c0f, d1
0000106E  4EB9 00001802             46      jsr setCursor
00001074  43F9 000010A4             47      lea title2msg, a1
0000107A  4EB9 000017A8             48      jsr print
00001080                            49      
00001080                            50      
00001080  6000 0002                 51      bra titleLoop
00001084                            52      
00001084                            53  titleLoop:
00001084                            54       ; Enable back buffer
00001084  103C 005E                 55      MOVE.B  #94,        D0
00001088  4E4F                      56      TRAP    #15
0000108A                            57      
0000108A  4EB9 00001C7A             58      jsr testInput
00001090                            59      
00001090  60F2                      60      bra titleLoop
00001092                            61  
00001092                            62  
00001092= 2D 20 43 45 4C 4C ...     63  title1Msg dc.b '- CELL DEFENDER -',0
000010A4                            64  
000010A4= 50 72 65 73 73 20 ...     65  title2msg dc.b 'Press "enter" to start...',0
000010BE                            66  
000010BE                            67  ; include other files 
000010BE                            68   include "map/main.x68"
000010BE                            69  ; this file contains the main game loop
000010BE                            70  
000010BE                            71  mapInit:
000010BE  33FC 0001 00001C78        72      move.w #1, lvlType
000010C6                            73      
000010C6                            74          ; Place the Player at the center of the screen
000010C6  4281                      75      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C8  3239 000011FE             76      MOVE.W  screenW,   D1          ; Place Screen width in D1
000010CE  82FC 0002                 77      DIVU    #02,        D1          ; divide by 2 for center on X Axis
000010D2  23C1 000011E2             78      MOVE.L  D1,         playerX    ; Players X Position
000010D8  23C1 000011EA             79      move.l d1, centerx
000010DE                            80  
000010DE  4281                      81      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E0  3239 00001200             82      MOVE.W  screenH,   D1          ; Place Screen width in D1
000010E6  82FC 0002                 83      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010EA  23C1 000011E6             84      MOVE.L  D1,         playerY    ; Players Y Position
000010F0  23C1 000011EE             85      move.l d1, centerY
000010F6                            86  
000010F6  4EB9 00001202             87      jsr initializeCell
000010FC  4EB9 00001452             88      jsr initDraw
00001102  4EB9 00001AE6             89      jsr initAllEnemies
00001108                            90  
00001108  6000 0002                 91      bra loop
0000110C                            92  
0000110C                            93  loop:
0000110C                            94      ;jsr clearscreen
0000110C  4EB9 00001122             95      jsr map ; if in map, do map stuff
00001112                            96      ; if in battle, do battle stuff
00001112                            97  
00001112  6000 0002                 98      bra endLoop
00001116                            99  endLoop:
00001116  4A79 000011F6            100      tst currentHealth
0000111C  6600 009A                101      bne end
00001120  60EA                     102      bra loop        ; loop
00001122                           103  
00001122                           104  map:
00001122  4EB9 00001484            105      jsr draw
00001128  4EB9 00001C7A            106      jsr testinput
0000112E                           107      
0000112E                           108      ; test paused
0000112E  4A39 000011E0            109      tst.b isPaused
00001134  6600 002C                110      bne paused
00001138                           111  
00001138                           112      ; process
00001138  4EB9 00001AAA            113      jsr increment
0000113E  4EB9 00001B26            114      jsr processEnemies
00001144                           115      ;jsr enemyColCheck
00001144                           116      ;jsr collision
00001144  4E75                     117      rts
00001146                           118  
00001146                           119  battle:
00001146  4E75                     120      rts
00001148                           121  
00001148                           122  collision:
00001148  4EB9 00001338            123      jsr zone1collision
0000114E  4EB9 00001366            124      jsr zone2collision
00001154  4EB9 00001390            125      jsr zone3collision
0000115A  4EB9 000013BA            126      jsr zone4collision
00001160  4E75                     127      rts
00001162                           128  
00001162                           129  paused:
00001162  60B2                     130      bra endLoop
00001164                           131      
00001164                           132  clearscreen:
00001164                           133      ; Clear the screen
00001164  103C 000B                134      MOVE.B  #tccrs,D0          ; Set Cursor Position
00001168  323C FF00                135      MOVE.W  #$FF00,     D1          ; Clear contents
0000116C  4E4F                     136      TRAP    #15
0000116E  4E75                     137      rts
00001170                           138  
00001170                           139  wasteTime:
00001170                           140      ; value put into d5, keep subtracting 1 until d5 contains 0
00001170                           141      ; takes a lot of time to process
00001170  5345                     142      sub #1, d5
00001172  BA7C 0000                143      cmp #0, d5
00001176  66F8                     144      bne wasteTime
00001178  4E75                     145      rts
0000117A                           146  
0000117A                           147  togglePause:
0000117A  1A39 000011E0            148      move.b isPaused, d5
00001180  4605                     149      not.b d5
00001182  13C5 000011E0            150      move.b d5, isPaused
00001188  4E75                     151      rts
0000118A                           152  
0000118A                           153  
0000118A                           154  ; heal up by one hp
0000118A                           155  heal:
0000118A  2439 000011F6            156      move.l currentHealth, d2
00001190  B4B9 000011FA            157      cmp.l maxHealth, d2
00001196  6700 000E                158      beq endHeal
0000119A  5282                     159      add.l #1, d2
0000119C  23C2 000011F6            160      move.l d2, currentHealth
000011A2  6000 0002                161      bra endHeal
000011A6                           162  endHeal:
000011A6  4E75                     163      rts
000011A8                           164  
000011A8                           165  takeDmg:
000011A8  2239 000011F6            166      move.l currentHealth, d1
000011AE  5381                     167      sub.l #1, d1
000011B0  23C1 000011F6            168      move.l d1, currentHealth
000011B6  4E75                     169      rts
000011B8                           170  
000011B8                           171  ; runs if game is cut short w/ ESC key
000011B8                           172  end:
000011B8  4EB8 1164                173      jsr clearscreen
000011BC                           174      
000011BC  43F9 00001854            175      lea endmsg, a1
000011C2  4EB9 000017A8            176      jsr print
000011C8  FFFF FFFF                177      simhalt
000011CC                           178  
000011CC= 74 65 73 74 00           179  testMsg dc.b 'test',0
000011D1                           180  
000011D1                           181  
000011D1= 14 57 41 53 44 00        182  inputkeys dc.b 20,87,65,83,68,0
000011D7                           183  
000011D8                           184  currentkey ds.l 01
000011DC                           185  lastkey ds.l 01
000011E0                           186  isPaused ds.b 01
000011E1                           187  
000011E2                           188  playerX ds.l 01
000011E6                           189  playerY ds.l 01
000011EA                           190  
000011EA                           191  centerX ds.l 01
000011EE                           192  centerY ds.l 01
000011F2                           193  
000011F2= 00000000                 194  currentPts dc.l 0
000011F6                           195  
000011F6= 000000C8                 196  currentHealth dc.l 200
000011FA= 000000C8                 197  maxHealth dc.l 200
000011FE                           198  
000011FE                           199  screenW        DS.w    01  ; Reserve Space for Screen Width
00001200                           200  screenH        DS.w    01  ; Reserve Space for Screen Height
00001202                           201  
00001202                           202  
00001202                           203  -------------------- end include --------------------
00001202                           204   include "map/shapeSizes.x68"
00001202                           205  ; this file contains some const values
00001202                           206  
00001202  =00000008                207  playerW equ 08
00001202  =00000008                208  playerH equ 08
00001202                           209  
00001202  =0000000C                210  enemyH equ 12
00001202  =00000010                211  enemyW equ 16
00001202  =00000006                212  enemyHalfH equ 6
00001202  =00000008                213  enemyHalfW equ 8
00001202                           214  
00001202  =00000005                215  bulletH equ 05
00001202  =00000005                216  bulletW equ 05
00001202                           217  
00001202  =00000010                218  appleH equ 16
00001202  =00000010                219  appleW equ 16
00001202                           220  
00001202  =00000001                221  pointsGain equ 01
00001202  =00000001                222  -------------------- end include --------------------
00001202                           223   include "map/trapCodes.x68"
00001202                           224  ; traps
00001202  =0000000B                225  tccrs  EQU 11       ; Trap code cursor position
00001202  =0000005C                226  tcdbl  EQU 92       ; Double Buffer Screen Trap Code
00001202  =00000013                227  tcinp equ 19        ; get input trap code
00001202  =00000021                228  tcScreen EQU 33    ; Screen size information trap code
00001202  =00000000                229  tcScreenSize EQU 00    ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001202                           230                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001202  =00000015                231  tcFont equ 21       ; change font style/colour
00001202  =00000050                232  tcPenClr equ 80     ; change pen colour
00001202  =00000051                233  tcPenFil equ 81     ; change pen fill
00001202  =00000057                234  tcRect equ 87       ; draw rectangle
00001202                           235  
00001202  =00000021                236  tcFullScreen equ 33
00001202  =00000021                237  -------------------- end include --------------------
00001202                           238   include "map/inputKeyCodes.x68"
00001202                           239  ; this file contains relevant input keycodes
00001202                           240  
00001202  =0000001B                241  escapekey equ $1b ; pause
00001202  =00000020                242  spacekey equ $20
00001202  =0000000D                243  enterKey equ $0d
00001202                           244  
00001202  =00000057                245  wkey equ $57
00001202  =00000041                246  akey equ $41
00001202  =00000053                247  skey equ $53
00001202  =00000044                248  dkey equ $44
00001202                           249  
00001202  =0000005A                250  zkey equ $5a ; toggle follow cam
00001202                           251  
00001202  =00000030                252  key0 equ $30 ; toggle fullscreen
00001202  =00000031                253  key1 equ $31 
00001202  =00000032                254  key2 equ $32
00001202  =00000033                255  key3 equ $33
00001202                           256  
00001202  =57415344                257  wasdKeys equ $57415344 ; movement keys
00001202  =41444C20                258  runActionKeys equ $41444C20 ; run actions
00001202  =41444C20                259  -------------------- end include --------------------
00001202                           260   include "map/colours.x68"
00001202                           261  ; this file contains relevant color values
00001202                           262  
00001202                           263  ; 6ive colours: ranging from dark to light, plus one for contrast
00001202                           264  ; color1: darkest
00001202                           265  ; color5: lightest
00001202                           266  ; colorRed: contrast red colour
00001202  =00201808                267  color1 equ $00201808
00001202  =00494320                268  color2 equ $00494320
00001202  =0056864B                269  color3 equ $0056864b
00001202  =007AC687                270  color4 equ $007ac687
00001202  =00AFE5D0                271  color5 equ $00afe5d0
00001202                           272  
00001202  =00463EBD                273  colorRed equ $00463ebd
00001202  =00463EBD                274  -------------------- end include --------------------
00001202                           275   include "map/cell.x68"
00001202                           276  ; this file contains cell data
00001202                           277  
00001202                           278  ; cell contains:
00001202                           279      ; big square boundary
00001202                           280      ; 2 square attack zones - top corners
00001202                           281      ; 1 square heal zone - bottom
00001202                           282  
00001202                           283  initializeCell: ; initialize values for cell and zones
00001202                           284  
00001202                           285      ; this subroutine gathers top-left and bottom-right bounds for the cell,
00001202                           286      ; as well as each zone
00001202                           287  
00001202                           288      ; these bounds are used to draw and process
00001202                           289  
00001202                           290      ;--------RECTANGLE TRAP CODE:
00001202                           291      ; d1: top left X
00001202                           292      ; d2: top left Y
00001202                           293  
00001202                           294      ; d3: bottom right X
00001202                           295      ; d4: bottom right Y
00001202                           296      
00001202                           297  
00001202                           298      ;--------get cell bounds
00001202                           299      ; TL
00001202  2238 11EA                300      move.l centerX, d1      ; move centerX to d1
00001206  92B9 00001436            301      sub.l cellXradius, d1     ; add/sub based on cell radius
0000120C  23C1 000013E6            302      move.l d1, celltlX      ; save to relevant location
00001212                           303  
00001212  2238 11EE                304      move.l centerY, d1
00001216  D2B9 0000143E            305      add.l cellYoffset, d1
0000121C  92B9 0000143A            306      sub.l cellYradius, d1
00001222  23C1 000013EA            307      move.l d1, celltlY
00001228                           308  
00001228                           309      ; BR
00001228  2238 11EA                310      move.l centerX, d1
0000122C  D2B9 00001436            311      add.l cellXradius, d1
00001232  D2B8 0008                312      add.l playerH, d1
00001236  23C1 000013EE            313      move.l d1, cellbrX
0000123C                           314  
0000123C  2238 11EE                315      move.l centerY, d1
00001240  D2B9 0000143E            316      add.l cellYoffset, d1
00001246  D2B9 0000143A            317      add.l cellYradius, d1
0000124C  23C1 000013F2            318      move.l d1, cellbrY
00001252                           319  
00001252                           320  
00001252                           321      ;--------get zone 1 bounds
00001252                           322      ; TL
00001252  23F9 000013E6 000013F6   323      move.l celltlX, zone1tlX
0000125C                           324  
0000125C  23F9 000013EA 000013FA   325      move.l celltlY, zone1tlY
00001266                           326  
00001266                           327      ; BR
00001266  2239 000013F6            328      move.l zone1tlX, d1
0000126C  D2B9 00001442            329      add.l zoneWidth, d1
00001272  23C1 000013FE            330      move.l d1, zone1brX
00001278                           331  
00001278  2239 000013FA            332      move.l zone1tly, d1
0000127E  D2B9 00001446            333      add.l zoneHeight, d1
00001284  23C1 00001402            334      move.l d1, zone1brY
0000128A                           335  
0000128A                           336  
0000128A                           337      ;--------get zone 2 bounds
0000128A                           338      ; TL
0000128A  2239 000013EE            339      move.l cellbrX, d1
00001290  92B9 00001442            340      sub.l zoneWidth, d1
00001296  23C1 00001406            341      move.l d1, zone2tlX
0000129C                           342  
0000129C  23F9 000013EA 0000140A   343      move.l celltlY, zone2tlY
000012A6                           344  
000012A6                           345      ; BR
000012A6  23F9 000013EE 0000140E   346      move.l cellbrx, zone2brX
000012B0                           347  
000012B0  2239 000013EA            348      move.l celltlY, d1
000012B6  D2B9 00001446            349      add.l zoneHeight, d1
000012BC  23C1 00001412            350      move.l d1, zone2brY
000012C2                           351  
000012C2                           352  
000012C2                           353      ;--------get zone 3 bounds
000012C2                           354      ; TL
000012C2  2239 000013EE            355      move.l cellbrX, d1
000012C8  92B9 00001442            356      sub.l zoneWidth, d1
000012CE  23C1 00001416            357      move.l d1, zone3tlX
000012D4                           358  
000012D4  2239 000013F2            359      move.l cellbrY, d1
000012DA  92B9 00001446            360      sub.l zoneHeight, d1
000012E0  23C1 0000141A            361      move.l d1, zone3tlY
000012E6                           362  
000012E6                           363      ; BR
000012E6  23F9 000013EE 0000141E   364      move.l cellbrX, zone3brX
000012F0                           365  
000012F0  23F9 000013F2 00001422   366      move.l cellbrY, zone3brY
000012FA                           367  
000012FA                           368      ;--------get zone 4 bounds
000012FA                           369      ; TL
000012FA  2239 000013E6            370      move.l celltlX, d1
00001300  23C1 00001426            371      move.l d1, zone4tlX
00001306                           372  
00001306  2239 000013F2            373      move.l cellbrY, d1
0000130C  92B9 00001446            374      sub.l zoneHeight, d1
00001312  23C1 0000142A            375      move.l d1, zone4tlY
00001318                           376  
00001318                           377      ; BR
00001318  2239 000013E6            378      move.l celltlX, d1
0000131E  D2B9 00001442            379      add.l zoneWidth, d1
00001324  23C1 0000142E            380      move.l d1, zone4brX
0000132A                           381  
0000132A  2239 000013F2            382      move.l cellbrY, d1
00001330  23C1 00001432            383      move.l d1, zone4brY
00001336                           384  
00001336  4E75                     385      rts
00001338                           386  
00001338                           387  zone1collision:
00001338  2438 11E2                388      move.l playerX, d2
0000133C  2638 11E6                389      move.l playerY, d3
00001340                           390  
00001340                           391      ; check x
00001340  B4B9 000013FE            392      cmp.l zone1brX, d2
00001346  6E00 009C                393      bgt endCollision
0000134A                           394      ; check y
0000134A  B6B9 00001402            395      cmp.l zone1brY, d3
00001350  6E00 0092                396      bgt endCollision
00001354                           397  
00001354                           398  
00001354                           399      ; at this point, player is confirmed in zone 1
00001354  43F9 0000144A            400      lea zoneMsg, a1
0000135A  4EB9 000017A8            401      jsr print
00001360                           402  
00001360                           403      ; need to go to enemy thing
00001360  6000 0AB8                404      bra initRun
00001364                           405  
00001364  4E75                     406      rts
00001366                           407  
00001366                           408  zone2collision:
00001366  2438 11E2                409      move.l playerX, d2
0000136A  2638 11E6                410      move.l playerY, d3
0000136E                           411  
0000136E                           412      ; check x
0000136E  B4B9 00001406            413      cmp.l zone2tlX, d2
00001374  6D00 006E                414      blt endCollision
00001378                           415      ; check y
00001378  B6B9 00001402            416      cmp.l zone1brY, d3
0000137E  6E00 0064                417      bgt endCollision
00001382                           418  
00001382  43F9 0000144A            419      lea zoneMsg, a1
00001388  4EB9 000017A8            420      jsr print
0000138E                           421  
0000138E                           422      ; at this point, player is confirmed in zone 2
0000138E                           423  
0000138E  4E75                     424      rts
00001390                           425  
00001390                           426  zone3collision:
00001390  2438 11E2                427      move.l playerX, d2
00001394  2638 11E6                428      move.l playerY, d3
00001398                           429  
00001398                           430      ; check x
00001398  B4B9 00001416            431      cmp.l zone3tlX, d2
0000139E  6D00 0044                432      blt endCollision
000013A2                           433      ; check y
000013A2  B6B9 0000141A            434      cmp.l zone3tlY, d3
000013A8  6D00 003A                435      blt endCollision
000013AC                           436  
000013AC                           437      ; at this point, player is confirmed in zone 3
000013AC                           438  
000013AC  43F9 0000144A            439      lea zoneMsg, a1
000013B2  4EB9 000017A8            440      jsr print
000013B8                           441      
000013B8  4E75                     442      rts
000013BA                           443  
000013BA                           444  zone4collision:
000013BA  2438 11E2                445      move.l playerX, d2
000013BE  2638 11E6                446      move.l playerY, d3
000013C2                           447  
000013C2                           448      ; check x
000013C2  B4B9 0000142E            449      cmp.l zone4brX, d2
000013C8  6E00 001A                450      bgt endCollision
000013CC                           451      ; check y
000013CC  B6B9 0000142A            452      cmp.l zone4tlY, d3
000013D2  6D00 0010                453      blt endCollision
000013D6                           454  
000013D6                           455      ; at this point, player is confirmed in zone 4
000013D6                           456  
000013D6  43F9 0000144A            457      lea zoneMsg, a1
000013DC  4EB9 000017A8            458      jsr print
000013E2  4E75                     459      rts
000013E4                           460  
000013E4                           461  endCollision:
000013E4  4E75                     462      rts
000013E6                           463  
000013E6                           464  ;-cell top-left bounds
000013E6                           465  celltlX ds.l 01
000013EA                           466  celltlY ds.l 01
000013EE                           467  ; cell bottom-right bounds
000013EE                           468  cellbrX ds.l 01
000013F2                           469  cellbrY ds.l 01
000013F6                           470  
000013F6                           471  ;----------------------zone 1 top-left bounds
000013F6                           472  zone1tlX ds.l 01
000013FA                           473  zone1tlY ds.l 01
000013FE                           474  ; zone 1 bottom-right bounds
000013FE                           475  zone1brX ds.l 01
00001402                           476  zone1brY ds.l 01
00001406                           477  
00001406                           478  ;----------------------zone 2 top-left bounds
00001406                           479  zone2tlX ds.l 01
0000140A                           480  zone2tlY ds.l 01
0000140E                           481  ; zone 2 bottom-right bounds
0000140E                           482  zone2brX ds.l 01
00001412                           483  zone2brY ds.l 01
00001416                           484  
00001416                           485  ;----------------------zone 3 top-left bounds
00001416                           486  zone3tlX ds.l 01
0000141A                           487  zone3tlY ds.l 01
0000141E                           488  ; zone 3 bottom-right bounds
0000141E                           489  zone3brX ds.l 01
00001422                           490  zone3brY ds.l 01
00001426                           491  
00001426                           492  ;----------------------zone 4 top-left bounds
00001426                           493  zone4tlX ds.l 01
0000142A                           494  zone4tlY ds.l 01
0000142E                           495  ; zone 4 bottom-right bounds
0000142E                           496  zone4brX ds.l 01
00001432                           497  zone4brY ds.l 01
00001436                           498  
00001436                           499  ; horizontal and vertical radius of main cell (half width)
00001436= 00000064                 500  cellXradius dc.l 100
0000143A= 00000050                 501  cellYradius dc.l 80
0000143E                           502  
0000143E                           503  ; how lower from center it is
0000143E= 0000003C                 504  cellYoffset dc.l 60
00001442                           505  
00001442                           506  ; width of zone
00001442= 00000037                 507  zoneWidth dc.l 55
00001446= 0000002D                 508  zoneHeight dc.l 45
0000144A                           509  
0000144A= 49 4E 20 5A 4F 4E ...    510  zoneMsg dc.b 'IN ZONE',0
00001452                           511  
00001452                           512  enterHill:
00001452                           513  
00001452                           514  
00001452                           515  
00001452                           516  -------------------- end include --------------------
00001452                           517   include "map/draw.x68"
00001452                           518  ; this file contains all draw functions
00001452                           519  
00001452                           520  initDraw:
00001452                           521      ; get health rectangle bounds
00001452                           522  
00001452                           523      ;HEIGHT
00001452  3239 00001884            524      move.w healthBarLocY, d1
00001458  23C1 00001872            525      move.l d1, healthTlY
0000145E  0681 0000000F            526      add.l #15, d1
00001464  23C1 0000187A            527      move.l d1, healthBrY
0000146A                           528  
0000146A                           529      ;WIDTH
0000146A  4281                     530      clr.l d1
0000146C  3239 00001882            531      move.w healthBarOffsetX, d1
00001472                           532      ;move.l maxHealth, d2
00001472                           533      ;divu #2, d2
00001472                           534      ;add.l maxHealth, d1
00001472  23C1 0000186E            535      move.l d1, healthTlX
00001478                           536  
00001478  D2B8 11FA                537      add.l maxhealth, d1
0000147C  23C1 00001876            538      move.l d1, healthBrX
00001482                           539      
00001482  4E75                     540      rts
00001484                           541  
00001484                           542  
00001484                           543  draw:
00001484                           544       ; Enable back buffer
00001484  103C 005E                545      MOVE.B  #94,        D0
00001488  4E4F                     546      TRAP    #15
0000148A                           547  
0000148A  4EB9 00001C3A            548      jsr followCam
00001490  4EB9 0000161E            549      jsr drawBg
00001496  4EB9 00001682            550      jsr drawEnemies
0000149C  4EB9 000016F6            551      jsr drawCell
000014A2  4EB9 0000164E            552      jsr drawPlayer
000014A8  4EB9 0000157E            553      jsr drawText
000014AE  4EB9 00001524            554      jsr drawHealth
000014B4  4EB9 000014BC            555      jsr drawPause
000014BA  4E75                     556      rts
000014BC                           557  
000014BC                           558  drawPause:
000014BC  4A38 11E0                559      tst.b isPaused
000014C0  6700 0060                560      beq endDrawPause
000014C4                           561  
000014C4  223C 00AFE5D0            562      move.l #color5, d1
000014CA  4EB9 00001798            563      jsr setPenColour
000014D0  223C 00201808            564      move.l #color1, d1
000014D6  4EB9 000017A0            565      jsr setFillColour
000014DC                           566  
000014DC                           567      ; get rect bounds
000014DC                           568  
000014DC  2238 11EA                569      move.l centerX, d1
000014E0  2438 11EE                570      move.l centerY, d2
000014E4  92B9 00001888            571      sub.l pauseHalfWidth, d1
000014EA  94B9 0000188C            572      sub.l pauseHalfHeight, d2
000014F0                           573  
000014F0  2638 11EA                574      move.l centerX, d3
000014F4  2838 11EE                575      move.l centerY, d4
000014F8  D6B9 00001888            576      add.l pauseHalfWidth, d3
000014FE  D8B9 0000188C            577      add.l pauseHalfHeight, d4
00001504                           578  
00001504  4EB9 000017FA            579      jsr drawUiRect
0000150A                           580  
0000150A                           581      ; draw text
0000150A  323C 2208                582      move.w #$2208, d1
0000150E  4EB9 00001802            583      jsr setCursor
00001514  43F9 00001890            584      lea pauseMsg, a1
0000151A  4EB9 000017A8            585      jsr print
00001520                           586  
00001520  4E75                     587      rts
00001522                           588  endDrawPause:
00001522  4E75                     589      rts
00001524                           590  
00001524                           591  drawHealth:
00001524  223C 007AC687            592      move.l #color4, d1
0000152A  4EB9 00001798            593      jsr setPenColour
00001530  223C 00494320            594      move.l #color2, d1
00001536  4EB9 000017A0            595      jsr setFillColour
0000153C                           596  
0000153C  2239 0000186E            597      move.l healthTlX, d1
00001542  2439 00001872            598      move.l healthTlY, d2
00001548                           599  
00001548  2639 00001876            600      move.l healthBrX, d3
0000154E  2839 0000187A            601      move.l healthBrY, d4
00001554  4EB9 000017FA            602      jsr drawUiRect
0000155A                           603  
0000155A                           604      ; DRAW FULL PART OF HP BAR
0000155A  2639 0000186E            605      move.l healthtlX, d3
00001560  D6B8 11F6                606      add.l currentHealth, d3
00001564                           607  
00001564  223C 0056864B            608      move.l #color3, d1 ; change colour
0000156A  4EB9 000017A0            609      jsr setFillColour
00001570                           610  
00001570  2239 0000186E            611      move.l healthTlX, d1 ; set value in d1 back to what its supposed to be
00001576  4EB9 000017FA            612      jsr drawUiRect
0000157C  4E75                     613      rts
0000157E                           614  
0000157E                           615  drawText:
0000157E                           616      ; set colours
0000157E  223C 00AFE5D0            617      move.l #color5, d1
00001584  4EB9 00001798            618      jsr setPenColour
0000158A  223C 00201808            619      move.l #color1, d1
00001590  4EB9 000017A0            620      jsr setFillColour
00001596                           621      ; PLAYER SCORE MSG
00001596  323C 0200                622      move.w #$200, d1
0000159A  D239 00001887            623      add.b pointsRow, d1
000015A0  4EB9 00001802            624      jsr setCursor
000015A6  43F9 0000185E            625      lea pointsMsg, a1
000015AC  4EB9 000017A8            626      jsr print
000015B2                           627      ; PLAYER SCORE
000015B2  223C 00000A00            628      move.l #$a00, d1
000015B8  D239 00001887            629      add.b pointsRow, d1
000015BE  4EB9 00001802            630      jsr setCursor
000015C4  2238 11F2                631      move.l currentPts, d1
000015C8  4EB9 000017B0            632      jsr printNum
000015CE                           633  
000015CE                           634      ; HEALTH
000015CE  323C 0200                635      move.w #$200, d1
000015D2  D239 00001886            636      add.b healthRow, d1
000015D8  4EB9 00001802            637      jsr setCursor
000015DE  43F9 00001866            638      lea healthMsg, a1
000015E4  4EB9 000017A8            639      jsr print
000015EA                           640  
000015EA                           641      ; ANTHILL
000015EA  323C 1005                642      move.w #$1005, d1
000015EE  4EB9 00001802            643      jsr setCursor
000015F4  43F9 0000189D            644      lea attackMsg1, a1
000015FA  4EB9 000017A8            645      jsr print
00001600  5241                     646      add.w #1, d1
00001602  4EB9 00001802            647      jsr setCursor
00001608  43F9 000018B9            648      lea attackMsg2, a1
0000160E  4EB9 000017A8            649      jsr print
00001614                           650  
00001614                           651  
00001614                           652      ; reset cursor
00001614  7200                     653      move.l #0, d1
00001616  4EB9 00001802            654      jsr setCursor
0000161C  4E75                     655      rts
0000161E                           656  
0000161E                           657  drawBg:
0000161E                           658      ; set colours
0000161E  223C 00494320            659      move.l #color2, d1
00001624  4EB9 00001798            660      jsr setPenColour
0000162A  223C 00201808            661      move.l #color1, d1
00001630  4EB9 000017A0            662      jsr setFillColour
00001636                           663  
00001636                           664      ; clear d3 and d4 (screen W and H are words)
00001636  4283                     665      clr.l d3
00001638  4284                     666      clr.l d4
0000163A                           667  
0000163A                           668      ; put the stuff in the registers, draw rect
0000163A  7200                     669      move.l #0, d1
0000163C  7400                     670      move.l #0, d2
0000163E  3638 11FE                671      move.w screenW, d3
00001642  3838 1200                672      move.w screenH, d4
00001646  4EB9 000017FA            673      jsr drawUiRect
0000164C  4E75                     674      rts
0000164E                           675  
0000164E                           676  drawPlayer:
0000164E                           677      ; Set white
0000164E  223C 00AFE5D0            678      MOVE.L #color5, d1
00001654  4EB9 00001798            679      jsr setPenColour
0000165A  223C 00201808            680      move.l #color1, d1
00001660  4EB9 000017A0            681      jsr setFillColour
00001666                           682      
00001666                           683      ; Set X, Y, Width and Height
00001666  2238 11E2                684      MOVE.L  playerX,   D1          ; X
0000166A  2438 11E6                685      MOVE.L  playerY,   D2          ; Y
0000166E  2638 11E2                686      MOVE.L  playerX,   D3
00001672  5083                     687      ADD.L   #playerW,   D3      ; Width
00001674  2838 11E6                688      MOVE.L  playerY,   D4 
00001678  5084                     689      ADD.L   #playerH,   D4      ; Height
0000167A                           690      
0000167A                           691      ; Draw Player
0000167A  4EB9 000017B8            692      jsr drawRect
00001680  4E75                     693      RTS
00001682                           694  
00001682                           695  drawEnemies:
00001682  4EB9 00001B82            696      jsr getEnemy1
00001688  4EB9 000016B2            697      jsr drawEnemy
0000168E  4EB9 00001B90            698      jsr getEnemy2
00001694  4EB9 000016B2            699      jsr drawEnemy
0000169A  4EB9 00001B9E            700      jsr getEnemy3
000016A0  4EB9 000016B2            701      jsr drawEnemy
000016A6  4EB9 00001BAC            702      jsr getEnemy4
000016AC  4EB9 000016B2            703      jsr drawEnemy
000016B2                           704  
000016B2                           705  drawEnemy:
000016B2                           706      ; set colour
000016B2  223C 00AFE5D0            707      move.l #color5, d1
000016B8  4EB9 00001798            708      jsr setPenColour
000016BE  223C 00463EBD            709      move.l #colorRed, d1
000016C4  4EB9 000017A0            710      jsr setFillColour
000016CA                           711  
000016CA                           712      ; set rect values
000016CA  2239 000018E8            713      move.l enemyX, d1
000016D0  2439 000018EC            714      move.l enemyY, d2
000016D6  2639 000018E8            715      move.l enemyX, d3
000016DC  2839 000018EC            716      move.l enemyY, d4
000016E2  0683 00000010            717      add.l #enemyW, d3
000016E8  0684 0000000C            718      add.l #enemyH, d4
000016EE                           719  
000016EE  4EB9 000017B8            720      jsr drawRect
000016F4  4E75                     721      rts
000016F6                           722  
000016F6                           723  drawCell:
000016F6                           724      ;---------------draw main cell
000016F6                           725      ; change colours
000016F6  223C 007AC687            726      move.l #color4, d1
000016FC  4EB9 00001798            727      jsr setPenColour
00001702  223C 00494320            728      move.l #color2, d1
00001708  4EB9 000017A0            729      jsr setFillColour
0000170E                           730  
0000170E  2238 13E6                731      move.l celltlX, d1
00001712  2438 13EA                732      move.l celltlY, d2
00001716  2638 13EE                733      move.l cellbrX, d3
0000171A  2838 13F2                734      move.l cellbrY, d4
0000171E  4EB9 000017B8            735      jsr drawRect
00001724                           736  
00001724                           737      ; change colours
00001724  223C 007AC687            738      move.l #color4, d1
0000172A  4EB9 00001798            739      jsr setPenColour
00001730  223C 0056864B            740      move.l #color3, d1
00001736  4EB9 000017A0            741      jsr setFillColour
0000173C                           742      ;---------------draw zone 1
0000173C  2238 13F6                743      move.l zone1tlX, d1
00001740  2438 13FA                744      move.l zone1tlY, d2
00001744  2638 13FE                745      move.l zone1brX, d3
00001748  2838 1402                746      move.l zone1brY, d4
0000174C  4EB9 000017B8            747      jsr drawRect
00001752                           748  
00001752                           749      ;---------------draw zone 2
00001752  2238 1406                750      move.l zone2tlX, d1
00001756  2438 140A                751      move.l zone2tlY, d2
0000175A  2638 140E                752      move.l zone2brX, d3
0000175E  2838 1412                753      move.l zone2brY, d4
00001762  4EB9 000017B8            754      jsr drawRect
00001768                           755      
00001768                           756      ;---------------draw zone 3
00001768  2238 1416                757      move.l zone3tlX, d1
0000176C  2438 141A                758      move.l zone3tlY, d2
00001770  2638 141E                759      move.l zone3brX, d3
00001774  2838 1422                760      move.l zone3brY, d4
00001778  4EB9 000017B8            761      jsr drawRect
0000177E                           762  
0000177E                           763      ;---------------draw zone 4
0000177E  2238 1426                764      move.l zone4tlX, d1
00001782  2438 142A                765      move.l zone4tlY, d2
00001786  2638 142E                766      move.l zone4brX, d3
0000178A  2838 1432                767      move.l zone4brY, d4
0000178E  4EB9 000017B8            768      jsr drawRect
00001794                           769  
00001794                           770      ; done
00001794  4E75                     771      rts
00001796                           772  
00001796                           773  endDraw:
00001796  4E75                     774      rts
00001798                           775  
00001798                           776  setPenColour:
00001798  103C 0050                777      move.b #tcPenClr, d0
0000179C  4E4F                     778      trap #15
0000179E  4E75                     779      rts
000017A0                           780  
000017A0                           781  setFillColour:
000017A0  103C 0051                782      move.b #tcPenFil, d0
000017A4  4E4F                     783      trap #15
000017A6  4E75                     784      rts
000017A8                           785  
000017A8                           786  print:
000017A8  303C 000D                787      move #13, d0
000017AC  4E4F                     788      trap #15
000017AE  4E75                     789      rts
000017B0                           790  
000017B0                           791  printNum:
000017B0  303C 0003                792      move #3, d0
000017B4  4E4F                     793      trap #15
000017B6  4E75                     794      rts
000017B8                           795  
000017B8                           796  drawRect:
000017B8                           797      ; if not follow, draw like normal
000017B8  4A79 00001C38            798      tst.w isFollow
000017BE  6700 003A                799      beq drawUiRect
000017C2                           800  
000017C2                           801      ; offset by camera
000017C2  92B9 00001C2E            802      sub.l cameraX, d1
000017C8  94B9 00001C32            803      sub.l cameraY, d2
000017CE  96B9 00001C2E            804      sub.l cameraX, d3
000017D4  98B9 00001C32            805      sub.l cameraY, d4
000017DA                           806      ; zoom by camera
000017DA  C2F9 00001C36            807      mulu cameraZoom, d1
000017E0  C4F9 00001C36            808      mulu cameraZoom, d2
000017E6  C6F9 00001C36            809      mulu cameraZoom, d3
000017EC  C8F9 00001C36            810      mulu cameraZoom, d4
000017F2                           811  
000017F2                           812      ; draw rect function
000017F2  103C 0057                813      MOVE.B  #tcRect, d0
000017F6  4E4F                     814      TRAP    #15
000017F8  4E75                     815      rts
000017FA                           816  
000017FA                           817  drawUiRect:
000017FA  103C 0057                818      MOVE.B  #tcRect, d0
000017FE  4E4F                     819      TRAP    #15
00001800  4E75                     820      rts
00001802                           821  
00001802                           822  setCursor:
00001802  103C 000B                823      MOVE.B  #tcCrs, d0
00001806  4E4F                     824      TRAP    #15
00001808  4E75                     825      rts
0000180A                           826  
0000180A                           827  toggleFullScreen:
0000180A  4281                     828      clr.l d1
0000180C  3239 00001852            829      move.w isFullScreen, d1
00001812  0C01 0001                830      cmpi.b #1, d1
00001816  6700 000E                831      beq goFullScreen
0000181A                           832  
0000181A                           833      ; go windowed
0000181A  7201                     834      move.l #1, d1
0000181C  4EB9 00001838            835      jsr setFullScreen
00001822                           836  
00001822  6000 000E                837      bra endToggleFullScreen
00001826                           838  goFullScreen:
00001826  5201                     839      add.b #1, d1
00001828  4EB9 00001838            840      jsr setFullScreen
0000182E  6000 0002                841      bra endToggleFullScreen
00001832                           842  endToggleFullScreen:
00001832  33C1 00001852            843      move.w d1, isFullScreen
00001838                           844  
00001838                           845  setFullScreen:
00001838  303C 0021                846      move #tcFullScreen, d0
0000183C  4E4F                     847      trap #15
0000183E  4E75                     848      rts
00001840                           849  
00001840                           850  ; INSTANT NEW LINE
00001840                           851  crlf:
00001840  303C 0006                852      move #6, d0
00001844  323C 000D                853      move #13, d1
00001848  4E4F                     854      trap #15
0000184A  323C 000A                855      move #10, d1
0000184E  4E4F                     856      trap #15
00001850  4E75                     857      rts
00001852                           858  
00001852= 0001                     859  isFullScreen dc.w 1
00001854                           860  
00001854= 47 41 4D 45 20 4F ...    861  endMsg dc.b 'GAME OVER', 0
0000185E= 50 4F 49 4E 54 53 ...    862  pointsMsg dc.b 'POINTS:', 0
00001866= 48 45 41 4C 54 48 ...    863  healthMsg dc.b 'HEALTH:', 0
0000186E                           864  
0000186E                           865  healthTlX ds.l 01
00001872                           866  healthTlY ds.l 01
00001876                           867  healthBrX ds.l 01
0000187A                           868  healthBrY ds.l 01
0000187E                           869  
0000187E                           870  currentHpX ds.l 01
00001882                           871  
00001882                           872  ; health stuff
00001882= 0050                     873  healthBarOffsetX dc.w 80
00001884= 0010                     874  healthBarLocY dc.w 16
00001886                           875  
00001886= 01                       876  healthRow dc.b 01
00001887= 03                       877  pointsRow dc.b 03
00001888                           878  
00001888                           879  ; pause stuff
00001888= 0000006E                 880  pauseHalfWidth dc.l 110
0000188C= 00000082                 881  pauseHalfHeight dc.l 130
00001890= 47 41 4D 45 20 50 ...    882  pauseMsg dc.b 'GAME PAUSED!', 0
0000189D                           883  
0000189D                           884  ; move to level stuff
0000189D= 41 4E 20 41 4E 54 ...    885  attackMsg1 dc.b 'AN ANTHILL IS UNDER ATTACK!',0
000018B9= 4D 4F 56 45 20 54 ...    886  attackMsg2 dc.b 'MOVE TOWARD IT AND PRESS "ENTER" TO DEFEND IT!',0
000018E8                           887  
000018E8                           888  -------------------- end include --------------------
000018E8                           889   include "map/enemies.x68"
000018E8                           890  ; this file contains enemy data
000018E8                           891  
000018E8                           892  ; variable data for current enemy
000018E8                           893  enemyX ds.l 01
000018EC                           894  enemyY ds.l 01
000018F0                           895  
000018F0                           896  ; enemy initialization: set position, health
000018F0                           897  ; 3 longs require 3 mem locations
000018F0                           898  ; call srts, then take values outside them
000018F0                           899  
000018F0                           900  ; GENERAL INIT/PROCESS
000018F0                           901  ; before these srts are called, enemyDir is given a value
000018F0                           902  ; 0: tl
000018F0                           903  ; 1: tr
000018F0                           904  ; 2: br
000018F0                           905  ; 3: bl
000018F0                           906  
000018F0                           907  initEnemy:
000018F0                           908      ; init based on which direction
000018F0  4A79 00001C24            909      tst enemyDir
000018F6  6700 0094                910      beq initEnemytl
000018FA                           911  
000018FA  0C79 0001 00001C24       912      cmpi #1, enemyDir
00001902  6700 00C0                913      beq initEnemytr
00001906                           914  
00001906  0C79 0002 00001C24       915      cmpi #2, enemyDir
0000190E  6700 00EA                916      beq initEnemybr
00001912                           917  
00001912  0C79 0003 00001C24       918      cmpi #3, enemyDir
0000191A  6700 0116                919      beq initEnemyBl
0000191E                           920  
0000191E                           921      ; no valid direction placed. just put enemy at the top
0000191E  6000 006C                922      bra initEnemyTl
00001922                           923  
00001922                           924  processEnemy:
00001922                           925  
00001922                           926      ; process based on direction
00001922  4A79 00001C24            927      tst enemyDir
00001928  6700 007A                928      beq processEnemyTl
0000192C  0C79 0001 00001C24       929      cmpi #1, enemyDir
00001934  6700 00A4                930      beq processEnemytr
00001938  0C79 0002 00001C24       931      cmpi #2, enemyDir
00001940  6700 00D0                932      beq processEnemybr
00001944  0C79 0003 00001C24       933      cmpi #3, enemyDir
0000194C  6700 00FE                934      beq processEnemyBl
00001950                           935  
00001950                           936      ; no valid direction placed. just put enemy at the top
00001950  6000 0052                937      bra processEnemyTl
00001954                           938  
00001954                           939  enemyColCheck:
00001954  3439 00001C24            940      move.w enemyDir, d2
0000195A                           941      ; colCheck based on direction
0000195A  0C79 0000 00001C24       942      cmpi #0, enemyDir
00001962  6700 0108                943      beq enemyLeftColCheck
00001966                           944  
00001966  0C79 0001 00001C24       945      cmpi #1, enemyDir
0000196E  6700 00FC                946      beq enemyLeftColCheck
00001972                           947  
00001972  0C79 0002 00001C24       948      cmpi #2, enemyDir
0000197A  6700 00FE                949      beq enemyRightColCheck
0000197E                           950  
0000197E  0C79 0003 00001C24       951      cmpi #3, enemyDir
00001986  6700 00F2                952      beq enemyRightColCheck
0000198A                           953  
0000198A                           954      ; no valid direction. nothing we can do atp
0000198A  4E75                     955      rts
0000198C                           956  
0000198C                           957  ;-------------------------------ENEMY TOP
0000198C                           958  initEnemytl:
0000198C  21FC 00000000 18EC       959      move.l #0, enemyY
00001994  21FC 00000000 18E8       960      move.l #0, enemyX
0000199C  4EB9 00001A98            961      jsr endInitEnemy
000019A2  4E75                     962      rts
000019A4                           963  processEnemyTl:
000019A4  3A39 00001AA4            964      move.w enemyTime, d5
000019AA  4EB9 00001AAE            965      jsr checkIncrement
000019B0  6600 00E2                966      bne endProcess
000019B4                           967  
000019B4  52B8 18EC                968      add.l #1, enemyY
000019B8  52B8 18E8                969      add.l #1, enemyX
000019BC                           970  
000019BC  4EB8 1954                971      jsr enemyColCheck
000019C0                           972  
000019C0  6000 00D2                973      bra endProcess
000019C4                           974  
000019C4                           975  ;-------------------------------ENEMY LEFT
000019C4                           976  initEnemytr:
000019C4  21F8 11FE 18E8           977      move.l screenW, enemyX
000019CA  21FC 00000000 18EC       978      move.l #0, enemyY
000019D2  4EB9 00001A98            979      jsr endInitEnemy
000019D8  4E75                     980      rts
000019DA                           981  processEnemytr:
000019DA  3A39 00001AA4            982      move.w enemyTime, d5
000019E0  4EB9 00001AAE            983      jsr checkIncrement
000019E6  6600 00AC                984      bne endProcess
000019EA                           985  
000019EA  52B8 18EC                986      add.l #1, enemyY
000019EE  53B8 18E8                987      sub.l #1, enemyX
000019F2                           988  
000019F2  4EB8 1954                989      jsr enemyColCheck
000019F6                           990  
000019F6  6000 009C                991      bra endProcess
000019FA                           992  
000019FA                           993  
000019FA                           994  
000019FA                           995  ;-------------------------------ENEMY RIGHT
000019FA                           996  initEnemybr:
000019FA  4282                     997      clr.l d2
000019FC  3438 11FE                998      move.w screenW, d2
00001A00  21C2 18E8                999      move.l d2, enemyX
00001A04                          1000  
00001A04  21F8 1200 18EC          1001      move.l screenH, enemyY
00001A0A                          1002  
00001A0A  4EB9 00001A98           1003      jsr endInitEnemy
00001A10  4E75                    1004      rts
00001A12                          1005  processEnemybr:
00001A12  3A39 00001AA4           1006      move.w enemyTime, d5
00001A18  4EB9 00001AAE           1007      jsr checkIncrement
00001A1E  6600 0074               1008      bne endProcess
00001A22                          1009  
00001A22  53B8 18EC               1010      sub.l #1, enemyY
00001A26  53B8 18E8               1011      sub.l #1, enemyX
00001A2A                          1012  
00001A2A  4EB8 1954               1013      jsr enemyColCheck
00001A2E                          1014  
00001A2E  6000 0064               1015      bra endProcess
00001A32                          1016  
00001A32                          1017  ;-------------------------------ENEMY BOTTOM
00001A32                          1018  initEnemyBl:
00001A32  4282                    1019      clr.l d2
00001A34  3438 1200               1020      move.w screenH, d2
00001A38  21C2 18EC               1021      move.l d2, enemyY
00001A3C                          1022  
00001A3C  21FC 00000000 18E8      1023      move.l #0, enemyX
00001A44                          1024  
00001A44  4EB9 00001A98           1025      jsr endInitEnemy
00001A4A  4E75                    1026      rts
00001A4C                          1027  processEnemyBl:
00001A4C  3A39 00001AA4           1028      move.w enemyTime, d5
00001A52  4EB9 00001AAE           1029      jsr checkIncrement
00001A58  6600 003A               1030      bne endProcess
00001A5C                          1031  
00001A5C  53B8 18EC               1032      sub.l #1, enemyY
00001A60  52B8 18E8               1033      add.l #1, enemyX
00001A64                          1034  
00001A64  4EB8 1954               1035      jsr enemyColCheck
00001A68                          1036  
00001A68  6000 002A               1037      bra endProcess
00001A6C                          1038  
00001A6C                          1039  ;----------COLLISION
00001A6C                          1040  enemyLeftColCheck:
00001A6C  2438 13E6               1041      move.l celltlX, d2
00001A70                          1042      ;sub.l #enemyW, d2
00001A70  B4B8 18E8               1043      cmp.l enemyX, d2
00001A74  6700 0018               1044      beq enemyCollide
00001A78  4E75                    1045      rts
00001A7A                          1046  
00001A7A                          1047  enemyRightColCheck:
00001A7A  2438 13EE               1048      move.l cellbrx, d2
00001A7E  0482 00000010           1049      sub.l #enemyw, d2
00001A84  B4B8 18E8               1050      cmp.l enemyX, d2
00001A88  6700 0004               1051      beq enemyCollide
00001A8C  4E75                    1052      rts
00001A8E                          1053  
00001A8E                          1054  ;---------------OTHER STUFF
00001A8E                          1055  enemyCollide: ; enemy successfully reached the base
00001A8E  4EB8 18F0               1056      jsr initEnemy
00001A92  4E75                    1057      rts
00001A94                          1058  
00001A94                          1059  endProcess:
00001A94  4E75                    1060      rts
00001A96                          1061  endCollide:
00001A96  4E75                    1062      rts
00001A98                          1063  endInitEnemy:
00001A98  5DB8 18EC               1064      sub.l #enemyHalfH, enemyY
00001A9C  51B8 18E8               1065      sub.l #enemyHalfW, enemyX
00001AA0  4E75                    1066      rts
00001AA2                          1067  
00001AA2                          1068  -------------------- end include --------------------
00001AA2                          1069   include "map/timings.x68"
00001AA2                          1070  ; this file contains timing stuff
00001AA2                          1071  
00001AA2= 000A                    1072  playerTime dc.w 10
00001AA4= 001E                    1073  enemyTime dc.w 30
00001AA6= 0028                    1074  healTime dc.w 40
00001AA8= 07D0                    1075  enemySpawnTimer dc.w 2000
00001AAA                          1076  
00001AAA                          1077  increment: ; D6 permanently used up
00001AAA  5246                    1078      add.w #1, d6
00001AAC  4E75                    1079      rts
00001AAE                          1080  
00001AAE                          1081  checkIncrement: ; d5 has been given check value
00001AAE  3806                    1082      move.w d6, d4 ; dont wanna mess up d6
00001AB0  88C5                    1083      divu d5, d4
00001AB2  383C 0000               1084      move.w #0, d4
00001AB6  4844                    1085      swap d4
00001AB8                          1086      ; d4 low word contains modulo
00001AB8                          1087      ; compare w/ 0
00001AB8  4A44                    1088      tst d4
00001ABA                          1089      ; thingy contains whether they were equal
00001ABA  4E75                    1090      rts
00001ABA  4E75                    1091  -------------------- end include --------------------
00001ABC                          1092   include "map/enemyManager.x68"
00001ABC                          1093  ;ENEMY 1
00001ABC= 00000000                1094  enemy1x dc.l 00
00001AC0= 00000000                1095  enemy1y dc.l 00
00001AC4                          1096  
00001AC4                          1097  ;ENEMY 2
00001AC4= 00000032                1098  enemy2x dc.l 50
00001AC8= 00000032                1099  enemy2y dc.l 50
00001ACC                          1100  
00001ACC                          1101  ;ENEMY 3
00001ACC= 00000064                1102  enemy3x dc.l 100
00001AD0= 00000064                1103  enemy3y dc.l 100
00001AD4                          1104  
00001AD4                          1105  ;ENEMY 4
00001AD4= 00000096                1106  enemy4x dc.l 150
00001AD8= 00000096                1107  enemy4y dc.l 150
00001ADC                          1108  
00001ADC= 01                      1109  enemyIndex dc.b 1
00001ADD                          1110  
00001ADD                          1111  ; current enemy spawn
00001ADE                          1112  currentSpawnX ds.l 01
00001AE2                          1113  currentSpawnY ds.l 01
00001AE6                          1114  
00001AE6                          1115  initAllEnemies:
00001AE6  21FC 00000000 1ABC      1116      move.l #0, enemy1x
00001AEE  21FC 00000000 1AC0      1117      move.l #0, enemy1y
00001AF6                          1118  
00001AF6  21FC 00000032 1AC4      1119      move.l #50, enemy2x
00001AFE  21FC 00000032 1AC8      1120      move.l #50, enemy2y
00001B06                          1121  
00001B06  21FC 00000064 1ACC      1122      move.l #100, enemy3x
00001B0E  21FC 00000064 1AD0      1123      move.l #100, enemy3y
00001B16                          1124  
00001B16  21FC 00000096 1AD4      1125      move.l #150, enemy4x
00001B1E  21FC 00000096 1AD8      1126      move.l #150, enemy4y
00001B26                          1127  
00001B26                          1128  processEnemies:
00001B26  31FC 0001 1ADC          1129      move.w #1, enemyIndex
00001B2C  6000 0002               1130      bra processEnemiesLoop
00001B30                          1131  processEnemiesLoop:
00001B30  4EB9 00001B50           1132      jsr getCurrentEnemy
00001B36  4EB8 1922               1133      jsr processEnemy
00001B3A  4EB9 00001BBA           1134      jsr saveCurrentEnemy
00001B40  5278 1ADC               1135      add.w #1, enemyIndex
00001B44                          1136  
00001B44  3438 1ADC               1137      move.w enemyIndex, d2
00001B48  0C42 0005               1138      cmpi.w #5, d2
00001B4C  66E2                    1139      bne processEnemiesLoop
00001B4E  4E75                    1140      rts
00001B50                          1141  
00001B50                          1142  
00001B50                          1143  getCurrentEnemy:
00001B50  3438 1ADC               1144      move.w enemyIndex, d2
00001B54  0C42 0001               1145      cmpi.w #1, d2
00001B58  6700 0028               1146      beq getEnemy1
00001B5C                          1147  
00001B5C  3438 1ADC               1148      move.w enemyIndex, d2
00001B60  0C42 0002               1149      cmpi.w #2, d2
00001B64  6700 002A               1150      beq getEnemy2
00001B68                          1151  
00001B68  3438 1ADC               1152      move.w enemyIndex, d2
00001B6C  0C42 0003               1153      cmpi.w #3, d2
00001B70  6700 002C               1154      beq getEnemy3
00001B74                          1155  
00001B74  3438 1ADC               1156      move.w enemyIndex, d2
00001B78  0C42 0004               1157      cmpi.w #4, d2
00001B7C  6700 002E               1158      beq getEnemy4
00001B80  4E75                    1159      rts
00001B82                          1160  getEnemy1:
00001B82  21F8 1ABC 18E8          1161      move.l enemy1x, enemyX
00001B88  21F8 1AC0 18EC          1162      move.l enemy1y, enemyY
00001B8E  4E75                    1163      rts
00001B90                          1164  getEnemy2:
00001B90  21F8 1AC4 18E8          1165      move.l enemy2x, enemyX
00001B96  21F8 1AC8 18EC          1166      move.l enemy2y, enemyY
00001B9C  4E75                    1167      rts
00001B9E                          1168  getEnemy3:
00001B9E  21F8 1ACC 18E8          1169      move.l enemy3x, enemyX
00001BA4  21F8 1AD0 18EC          1170      move.l enemy3y, enemyY
00001BAA  4E75                    1171      rts
00001BAC                          1172  getEnemy4:
00001BAC  21F8 1AD4 18E8          1173      move.l enemy4x, enemyX
00001BB2  21F8 1AD8 18EC          1174      move.l enemy4y, enemyY
00001BB8  4E75                    1175      rts
00001BBA                          1176  
00001BBA                          1177  saveCurrentEnemy:
00001BBA  3438 1ADC               1178      move.w enemyIndex, d2
00001BBE  0C42 0001               1179      cmpi.w #1, d2
00001BC2  6700 0028               1180      beq saveEnemy1
00001BC6                          1181  
00001BC6  3438 1ADC               1182      move.w enemyIndex, d2
00001BCA  0C42 0002               1183      cmpi.w #2, d2
00001BCE  6700 002A               1184      beq saveEnemy2
00001BD2                          1185  
00001BD2  3438 1ADC               1186      move.w enemyIndex, d2
00001BD6  0C42 0003               1187      cmpi.w #3, d2
00001BDA  6700 002C               1188      beq saveEnemy3
00001BDE                          1189  
00001BDE  3438 1ADC               1190      move.w enemyIndex, d2
00001BE2  0C42 0004               1191      cmpi.w #4, d2
00001BE6  6700 002E               1192      beq saveEnemy4
00001BEA  4E75                    1193      rts
00001BEC                          1194  
00001BEC                          1195  saveEnemy1:
00001BEC  21F8 18E8 1ABC          1196      move.l enemyx, enemy1X
00001BF2  21F8 18EC 1AC0          1197      move.l enemyy, enemy1Y
00001BF8  4E75                    1198      rts
00001BFA                          1199  saveEnemy2:
00001BFA  21F8 18E8 1AC4          1200      move.l enemyx, enemy2X
00001C00  21F8 18EC 1AC8          1201      move.l enemyy, enemy2Y
00001C06  4E75                    1202      rts
00001C08                          1203  saveEnemy3:
00001C08  21F8 18E8 1ACC          1204      move.l enemyx, enemy3X
00001C0E  21F8 18EC 1AD0          1205      move.l enemyy, enemy3Y
00001C14  4E75                    1206      rts
00001C16                          1207  saveEnemy4:
00001C16  21F8 18E8 1AD4          1208      move.l enemyx, enemy4X
00001C1C  21F8 18EC 1AD8          1209      move.l enemyy, enemy4Y
00001C22  4E75                    1210      rts
00001C24                          1211  
00001C24                          1212  ; current enemy dir
00001C24= 0000                    1213  enemyDir dc.w 0000
00001C24= 0000                    1214  -------------------- end include --------------------
00001C26                          1215   include "map/camera.x68"
00001C26                          1216  ; this file contains camera information
00001C26                          1217  
00001C26= 000000A0                1218  cameraOffsetX dc.l 160
00001C2A= 00000078                1219  cameraOffsetY dc.l 120
00001C2E= 00000000                1220  cameraX dc.l 0
00001C32= 00000000                1221  cameraY dc.l 0
00001C36= 0002                    1222  cameraZoom dc.w 02
00001C38                          1223  
00001C38= 0000                    1224  isFollow dc.w 0
00001C3A                          1225  
00001C3A                          1226  followCam:
00001C3A  4A78 1C38               1227      tst isFollow
00001C3E  6700 001C               1228      beq endFollow
00001C42                          1229  
00001C42  2438 11E2               1230      move.l playerX, d2
00001C46  2638 11E6               1231      move.l playerY, d3
00001C4A  94B8 1C26               1232      sub.l cameraOffsetX, d2
00001C4E  96B8 1C2A               1233      sub.l cameraOffsetY, d3
00001C52                          1234  
00001C52  21C2 1C2E               1235      move.l d2, cameraX
00001C56  21C3 1C32               1236      move.l d3, cameraY
00001C5A  4E75                    1237      RTS
00001C5C                          1238  endFollow:
00001C5C  4E75                    1239      rts
00001C5E                          1240  
00001C5E                          1241  toggleFollow:
00001C5E  3438 1C38               1242      move.w isFollow, d2
00001C62  4A42                    1243      tst.w d2
00001C64  6700 000A               1244      beq turnOnFollow
00001C68  31FC 0000 1C38          1245      move.w #0, isFollow
00001C6E  4E75                    1246      rts
00001C70                          1247  
00001C70                          1248  turnOnFollow:
00001C70  31FC 0001 1C38          1249      move.w #1, isFollow
00001C76  4E75                    1250      rts
00001C76  4E75                    1251  -------------------- end include --------------------
00001C78                          1252   include "map/input.x68"
00001C78= 0000                    1253  lvlType dc.w 0
00001C7A                          1254  
00001C7A                          1255  ; types:
00001C7A                          1256  ; 0: menu
00001C7A                          1257  ; 1: map
00001C7A                          1258  ; 2: run
00001C7A                          1259  
00001C7A                          1260  testinput:
00001C7A                          1261      ; getting previous key
00001C7A  11F8 11D8 11DC          1262      move.b currentkey, lastkey
00001C80                          1263  
00001C80                          1264      ; set d1 to $0000 0000
00001C80  7200                    1265      move.l #0, d1
00001C82                          1266  
00001C82                          1267      ; put "get input" code into d0
00001C82  103C 0013               1268      move.b #tcinp, d0
00001C86  4E4F                    1269      trap #15
00001C88  11C1 11D8               1270      move.b d1, currentkey
00001C8C  4E4F                    1271      trap #15
00001C8E                          1272      
00001C8E                          1273      ; AT THIS POINT, CURRENT KEY CONTAINS THE CURRENT/LAST KEY PRESSED,
00001C8E                          1274      ; AND D1 CONTAINS WHETHER OR NOT IT IS STILL PRESSED
00001C8E                          1275      
00001C8E                          1276      ; test if no input
00001C8E  0C01 0000               1277      cmpi.b #0, d1
00001C92  6700 0032               1278      beq noinput     ; if no input, move to noinput
00001C96                          1279      
00001C96  4EB9 00001CD6           1280      jsr commonInput ; happens in any level
00001C9C                          1281  
00001C9C                          1282  
00001C9C  4A78 1C78               1283      TST.w lvlType
00001CA0                          1284      IF <EQ> THEN
00001CA4  6100 004E               1285          BSR menuInput ; happens in menu
00001CA8                          1286      endi
00001CA8  0C78 0001 1C78          1287      cmp.w #1, lvlType
00001CAE                          1288      IF <EQ> THEN
00001CB2  6100 004C               1289          BSR mapInput ; happens in map
00001CB6                          1290      endi
00001CB6  0C78 0002 1C78          1291      cmp.w #2, lvlType
00001CBC                          1292      IF <EQ> THEN
00001CC0  6100 035A               1293          BSR battleInput ; happens in run
00001CC4                          1294      ENDI
00001CC4                          1295      
00001CC4  4E75                    1296      rts             ; return to loop
00001CC6                          1297  
00001CC6                          1298  noinput:
00001CC6                          1299      ; go back to loop
00001CC6  11FC 0000 11D8          1300      move.b #0, currentKey
00001CCC  11FC 0000 11DC          1301      move.b #0, lastkey
00001CD2  4E75                    1302      rts
00001CD4                          1303  
00001CD4= 0001                    1304  inputType dc.w 1
00001CD6                          1305  
00001CD6                          1306  commonInput:
00001CD6                          1307      ; at this point, keycode in currentkey is pressed
00001CD6                          1308  
00001CD6                          1309      ; OPTIONS
00001CD6  0C38 001B 11D8          1310      cmpi.b #escapeKey, currentkey ; pause
00001CDC  6700 009C               1311      beq escapepressed
00001CE0  0C38 0030 11D8          1312      cmpi.b #key0, currentKey ; fullscreen
00001CE6  6700 00A6               1313      beq key0pressed
00001CEA                          1314  
00001CEA  4A38 11E0               1315      tst.b isPaused
00001CEE  6600 0072               1316      bne pausedInput
00001CF2  4E75                    1317      RTS
00001CF4                          1318  
00001CF4                          1319  menuInput:
00001CF4  0C38 000D 11D8          1320      cmpi.b #enterKey, currentKey
00001CFA  6700 F3C2               1321      beq mapInit
00001CFE  4E75                    1322      rts
00001D00                          1323  
00001D00                          1324  mapinput:
00001D00                          1325      ; at this point, keycode in currentkey is pressed
00001D00                          1326  
00001D00                          1327      ; map buttons
00001D00  0C38 005A 11D8          1328      cmpi.b #zKey, currentKey
00001D06  6700 009A               1329      beq zPressed
00001D0A                          1330  
00001D0A                          1331      ; only move player if correct time
00001D0A  3A38 1AA2               1332      move.w playerTime, d5
00001D0E  4EB8 1AAE               1333      jsr checkIncrement
00001D12  6600 0064               1334      bne endInput
00001D16                          1335  
00001D16                          1336      ; only when not paused
00001D16                          1337  
00001D16  0C38 000D 11D8          1338      cmpi.b #enterKey, currentKey
00001D1C  6700 F42A               1339      beq collision
00001D20                          1340  
00001D20  6000 0004               1341      bra mapMoveInput
00001D24                          1342  
00001D24                          1343      ;cmpi.b #wkey, currentkey ; W:UP
00001D24                          1344      ;beq wpressed
00001D24                          1345      ;cmpi.b #akey, currentkey ; A:LEFT
00001D24                          1346      ;beq apressed
00001D24                          1347      ;cmpi.b #skey, currentkey ; S:DOWN
00001D24                          1348      ;beq spressed
00001D24                          1349      ;cmpi.b #dkey, currentkey ; D:RIGHT
00001D24                          1350      ;beq dpressed
00001D24  4E75                    1351      RTS
00001D26                          1352  
00001D26                          1353  mapMoveInput:
00001D26  223C 57415344           1354      move.l #wasdKeys, d1
00001D2C  103C 0013               1355      move.b #tcinp, d0
00001D30  4E4F                    1356      trap #15
00001D32                          1357  
00001D32  0801 0018               1358      BTST.L  #24,D1
00001D36                          1359      IF <NE> THEN
00001D3A  6100 0088               1360          BSR    wPressed
00001D3E                          1361      ENDI
00001D3E                          1362  
00001D3E                          1363      ;MOVE.L  CURRENT_KEY, D1
00001D3E  0801 0010               1364      BTST.L  #16,D1
00001D42                          1365      IF <NE> THEN
00001D46  6100 0090               1366          BSR    aPressed
00001D4A                          1367      ENDI
00001D4A                          1368  
00001D4A                          1369      ;MOVE.L  CURRENT_KEY, D1
00001D4A  0801 0008               1370      BTST.L  #8,D1
00001D4E                          1371      IF <NE> THEN
00001D52  6100 0098               1372          BSR    sPressed
00001D56                          1373      ENDI
00001D56                          1374  
00001D56                          1375      ;MOVE.L  CURRENT_KEY, D1
00001D56  0801 0000               1376      BTST.L  #0,D1
00001D5A                          1377      IF <NE> THEN
00001D5E  6100 00A2               1378          BSR    dPressed
00001D62                          1379      ENDI
00001D62                          1380  
00001D62                          1381  pausedInput:
00001D62  0C38 0031 11D8          1382      cmpi.b #key1, currentkey
00001D68  6700 0046               1383      beq key1pressed
00001D6C                          1384  
00001D6C  0C38 0032 11D8          1385      cmpi.b #key2, currentkey
00001D72  6700 0044               1386      beq key2pressed
00001D76                          1387  
00001D76                          1388      ;cmpi.b #key3, currentkey
00001D76                          1389      ;beq key3pressed
00001D76                          1390  
00001D76  4E75                    1391      rts
00001D78                          1392  
00001D78                          1393  endInput:
00001D78  4E75                    1394      rts
00001D7A                          1395  
00001D7A                          1396  ; INPUTS
00001D7A                          1397  escapePressed:
00001D7A  1A38 11DC               1398      move.b lastkey, d5
00001D7E  BA38 11D8               1399      cmp.b currentKey, d5
00001D82  6600 0004               1400      bne escapeJustPressed
00001D86  4E75                    1401      rts
00001D88                          1402  escapeJustPressed:
00001D88  4EB8 117A               1403      jsr togglePause
00001D8C  4E75                    1404      rts
00001D8E                          1405  
00001D8E                          1406  key0pressed:
00001D8E  1A38 11DC               1407      move.b lastkey, d5
00001D92  BA38 11D8               1408      cmp.b currentKey, d5
00001D96  6600 0004               1409      bne key0justPressed
00001D9A  4E75                    1410      rts
00001D9C                          1411  key0justPressed:
00001D9C  4EB8 180A               1412      jsr toggleFullScreen
00001DA0  4E75                    1413      rts
00001DA2                          1414  
00001DA2                          1415  zPressed:
00001DA2  1A38 11DC               1416      move.b lastkey, d5
00001DA6  BA38 11D8               1417      cmp.b currentKey, d5
00001DAA  6600 FEB2               1418      bne toggleFollow ; z just pressed
00001DAE  4E75                    1419      rts
00001DB0                          1420  
00001DB0                          1421  key1pressed: ; quit
00001DB0  4EB8 117A               1422      jsr togglePause
00001DB4  6000 F402               1423      bra end
00001DB8                          1424  key2pressed: ; main menu
00001DB8  4EB8 117A               1425      jsr togglePause
00001DBC  4EB8 1164               1426      jsr clearscreen
00001DC0  6000 F23E               1427      bra start
00001DC4                          1428  
00001DC4                          1429  ; MOVEMENT INPUT: MUST STAY WITHIN CELL BOUNDARIES
00001DC4                          1430  wpressed:
00001DC4  2638 11E6               1431      move.l playerY, d3 ; check boundary with proposed movement
00001DC8  5383                    1432      sub.l #1, D3
00001DCA  B6B8 13EA               1433      cmp.l celltlY, d3
00001DCE  6700 0048               1434      beq endMovement
00001DD2                          1435  
00001DD2  53B8 11E6               1436      sub.l #1, playerY
00001DD6  4E75                    1437      rts
00001DD8                          1438  apressed:
00001DD8  2638 11E2               1439      move.l playerX, d3 ; check boundary with proposed movement
00001DDC  5383                    1440      sub.l #1, D3
00001DDE  B6B8 13E6               1441      cmp.l celltlX, d3
00001DE2  6700 0034               1442      beq endMovement
00001DE6                          1443  
00001DE6  53B8 11E2               1444      sub.l #1, playerX
00001DEA  4E75                    1445      rts
00001DEC                          1446  spressed:
00001DEC  2638 11E6               1447      move.l playerY, d3 ; check boundary with proposed movement
00001DF0  5283                    1448      add.l #1, D3
00001DF2  5083                    1449      add.l #playerH, d3 ; player size taken into consideration
00001DF4  B6B8 13F2               1450      cmp.l cellBrY, d3
00001DF8  6700 001E               1451      beq endMovement
00001DFC                          1452  
00001DFC  52B8 11E6               1453      add.l #1, playerY
00001E00  4E75                    1454      rts
00001E02                          1455  dpressed:
00001E02  2638 11E2               1456      move.l playerX, d3 ; check boundary with proposed movement
00001E06  5283                    1457      add.l #1, D3
00001E08  5083                    1458      add.l #playerW, d3 ; player size taken into consideration
00001E0A  B6B8 13EE               1459      cmp.l cellBrX, d3
00001E0E  6700 0008               1460      beq endMovement
00001E12                          1461  
00001E12  52B8 11E2               1462      add.l #1, playerX
00001E16  4E75                    1463      rts
00001E18                          1464  
00001E18                          1465  endMovement:
00001E18  4E75                    1466      rts
00001E18  4E75                    1467  -------------------- end include --------------------
00001E1A                          1468  
00001E1A                          1469   include "battle/battleView.x68"
00001E1A                          1470  
00001E1A                          1471  
00001E1A  =00000021               1472  TC_SCREEN   EQU         33          ; Screen size information trap code
00001E1A  =00000000               1473  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001E1A                          1474                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001E1A  =00000013               1475  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001E1A  =0000005C               1476  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001E1A  =0000000B               1477  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001E1A                          1478  
00001E1A  =0000005E               1479  TC_REDRAW   EQU         94          ; Redraw Screen
00001E1A  =00000009               1480  TC_EXIT     EQU         09          ; Exit Trapcode
00001E1A                          1481  
00001E1A  =00000014               1482  PLYR_W_INIT EQU         20          ; Players initial Width
00001E1A  =0000000C               1483  PLYR_H_INIT EQU         12          ; Players initial Height
00001E1A                          1484  
00001E1A  =00000000               1485  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001E1A  =FFFFFFED               1486  PLYR_JUMP_V EQU         -19          ; Player Jump Velocity
00001E1A  =00000001               1487  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001E1A                          1488  
00001E1A  =0000000F               1489  THRW_W_INIT EQU         15          ; Players initial Width
00001E1A  =0000000F               1490  THRW_H_INIT EQU         15          ; Players initial Height
00001E1A                          1491  
00001E1A  =00000000               1492  THRW_DFLT_V EQU         00          ; Default Player Velocity
00001E1A  =FFFFFFF0               1493  THRW_JUMP_V EQU         -16          ; Player Jump Velocity
00001E1A  =00000001               1494  THRW_DFLT_G EQU         01          ; Player Default Gravity
00001E1A                          1495  
00001E1A  =00000001               1496  GND_TRUE    EQU         01          ; Player on Ground True
00001E1A  =00000000               1497  GND_FALSE   EQU         00          ; Player on Ground False
00001E1A                          1498  
00001E1A  =00000000               1499  GAMEOVER_INDEX   EQU             00          ; Player Run Sound Index  
00001E1A  =00000001               1500  JMP_INDEX   EQU             01          ; Player Jump Sound Index  
00001E1A  =00000002               1501  HITHURT_INDEX  EQU          02          ; Player Opps Sound Index
00001E1A  =00000003               1502  POWERUP_INDEX  EQU          03          ; Player Opps Sound Index
00001E1A  =00000004               1503  LEVELCHANGE_INDEX  EQU      04          ; Player Opps Sound Index
00001E1A  =00000005               1504  HIT_INDEX  EQU              05  
00001E1A                          1505  
00001E1A  =0000000C               1506  ENMY_W_INIT EQU         12          ; Enemy initial Width
00001E1A  =0000000C               1507  ENMY_H_INIT EQU         12          ; Enemy initial Height
00001E1A  =0000000C               1508  ENEMY_H_INIT EQU         12          ; Enemy initial Height
00001E1A                          1509  
00001E1A  =00000014               1510  FLY_ENMY_W_INIT  EQU         20          ; Enemy initial Width
00001E1A  =0000000C               1511  FLY_ENMY_H_INIT  EQU         12          ; Enemy initial Height
00001E1A                          1512  
00001E1A  =0000000C               1513  HEALTH_PACK_W    EQU         12          ; Enemy initial Width
00001E1A  =0000000C               1514  HEALTH_PACK_H    EQU         12          ; Enemy initial Height
00001E1A                          1515  
00001E1A  =00000002               1516  LOOKRIGHT   EQU         02          ; Look Right
00001E1A  =00000001               1517  LOOKLEFT    EQU         01          ; Look Left
00001E1A  =00FFFFFF               1518  WHITE           EQU     $00FFFFFF
00001E1A  =00000000               1519  BLACK           EQU     $00000000
00001E1A  =000000FF               1520  RED             EQU     $000000FF
00001E1A  =00FF0000               1521  BLUE            EQU     $00FF0000
00001E1A  =00566D19               1522  GREEN           EQU     $00566D19
00001E1A  =0044FF44               1523  LIFEGREEN       EQU     $0044FF44
00001E1A  =0019506D               1524  BROWN           EQU     $0019506D         ; Brown   
00001E1A  =00004FAD               1525  DIRT           EQU      $00004FAD         ; Brown   
00001E1A  =00FFE2B0               1526  SKY             EQU     $00FFE2B0         ; Sky Blue
00001E1A                          1527  ;ad4f00
00001E1A  =00000020               1528  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001E1A  =0000001B               1529  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001E1A  =00000052               1530  Rkey           EQU         $52         ; R ASCII Keycode
00001E1A  =00000041               1531  Akey           EQU         $41         ; A ASCII Keycode
00001E1A  =00000053               1532  Skey           EQU         $53         ; S ASCII Keycode
00001E1A  =00000044               1533  Dkey           EQU         $44         ; D ASCII Keycode
00001E1A  =0000004C               1534  Lkey           EQU         $4C         ; L ASCII Keycode
00001E1A  =0000004B               1535  Kkey           EQU         $4B         ; K ASCII Keycode
00001E1A                          1536  
00001E1A                          1537  INITRUN:
00001E1A  31FC 0002 1C78          1538      move.w #2, lvlType
00001E20                          1539      ; Initialise Sounds
00001E20  6100 0942               1540      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001E24  6100 0920               1541      BSR     GAMEOVER_LOAD                ; Load Run Sound into Memory
00001E28  6100 0958               1542      BSR     HITHURT_LOAD               ; Load Opps (Collision) Sound into Memory
00001E2C  6100 0972               1543      BSR     POWERUP_LOAD               ; Load Opps (Collision) Sound into Memory
00001E30  6100 098C               1544      BSR     LVLCHANGE_LOAD               ; Load Opps (Collision) Sound into Memory
00001E34  6100 09A6               1545      BSR     HIT_LOAD
00001E38                          1546  
00001E38                          1547      ; Screen Size
00001E38  103C 0021               1548      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001E3C  7200                    1549      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001E3E  4E4F                    1550      TRAP    #15                     ; interpret D0 and D1 for screen size
00001E40  33C1 0000306E           1551      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001E46  4841                    1552      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001E48  33C1 0000306C           1553      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001E4E                          1554  
00001E4E                          1555      ; Place the Player at the center of the screen
00001E4E  B381                    1556      EOR.L    D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E50  3239 0000306C           1557      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001E56  82FC 0002               1558      DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001E5A  23C1 00003076           1559      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001E60                          1560  
00001E60  B381                    1561      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E62  3239 0000306E           1562      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001E68  82FC 0002               1563      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001E6C  23C1 0000307A           1564      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001E72                          1565  
00001E72                          1566      ; Set the player starting width and height
00001E72  13FC 0014 000030DD      1567      MOVE.B  #PLYR_W_INIT,        PLAYER_WIDTH ; Players Width
00001E7A  13FC 000C 000030DE      1568      MOVE.B  #PLYR_H_INIT,        PLAYER_HEIGHT ; Players Width
00001E82                          1569  
00001E82  B381                    1570      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E84  3239 0000306E           1571      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001E8A  82FC 0002               1572      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001E8E  23C1 0000307A           1573      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001E94                          1574  
00001E94                          1575      ; Initialise Player Score
00001E94  B381                    1576      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E96  7200                    1577      MOVE.L  #00,        D1          ; Init Score
00001E98  23C1 0000307E           1578      MOVE.L  D1,         PLAYER_SCORE
00001E9E                          1579  
00001E9E                          1580      ; Initialise Player Velocity
00001E9E  B381                    1581      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EA0  123C 0000               1582      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001EA4  23C1 00003082           1583      MOVE.L  D1,         PLYR_VELOCITY
00001EAA                          1584  
00001EAA                          1585      ; Initialise Player Gravity
00001EAA  B381                    1586      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EAC  7201                    1587      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001EAE  23C1 00003086           1588      MOVE.L  D1,         PLYR_GRAVITY
00001EB4                          1589      
00001EB4                          1590      ; Initialise Player Velocity
00001EB4  B381                    1591      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EB6  123C 0000               1592      MOVE.B  #THRW_DFLT_V,D1         ; Init Player Velocity
00001EBA  23C1 000030D2           1593      MOVE.L  D1,         THROW_VELOCITY
00001EC0                          1594  
00001EC0                          1595      ; Initialise Player Gravity
00001EC0  B381                    1596      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EC2  7201                    1597      MOVE.L  #THRW_DFLT_G,D1         ; Init Player Gravity
00001EC4  23C1 000030D6           1598      MOVE.L  D1,         THROW_GRAVITY
00001ECA                          1599  
00001ECA                          1600      ; Initialize Player on Ground
00001ECA  23FC 00000001 0000308A  1601      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001ED4                          1602  
00001ED4                          1603      ; Initial Position for Enemy
00001ED4  B381                    1604      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001ED6  3239 0000306C           1605      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001EDC  23C1 00003090           1606      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001EE2                          1607  
00001EE2  B381                    1608      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EE4  3239 0000306E           1609      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001EEA  82FC 0002               1610      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001EEE  23C1 00003094           1611      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001EF4                          1612  
00001EF4                          1613      ; Initialise the starting enemy width and height
00001EF4  33FC 000C 000030E0      1614      MOVE.W  #12,        ENEMY_WIDTH ; Enemy Width
00001EFC  33FC 000C 000030E2      1615      MOVE.W  #12,        ENEMY_HEIGHT ; Enemy Height
00001F04                          1616  
00001F04                          1617      ; Initial Position for Flying Enemy
00001F04  B381                    1618      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F06  3239 0000306C           1619      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001F0C  23C1 000030A0           1620      MOVE.L  D1,         FLYINGENEMY_X     ; Enemy X Position
00001F12                          1621  
00001F12  B381                    1622      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F14  3239 0000306E           1623      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001F1A  82FC 0002               1624      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001F1E  0441 003C               1625      SUB.W   #60,        D1
00001F22  23C1 000030A4           1626      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
00001F28                          1627      
00001F28                          1628      ; Initial Flying enemy width and height
00001F28  33FC 0014 000030E4      1629      MOVE.W  #20,        FLYENEMY_WIDTH ; Enemy Width
00001F30  33FC 000C 000030E6      1630      MOVE.W  #12,        FLYENEMY_HEIGHT ; Enemy Height
00001F38                          1631      ; Initial Position for Health pack
00001F38  B381                    1632      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F3A  3239 0000306C           1633      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001F40  0481 FFFFFFFF           1634      SUB.L   #-1,        D1
00001F46  23C1 00003098           1635      MOVE.L  D1,         HEALTH_X     ; Enemy X Position
00001F4C                          1636  
00001F4C  B381                    1637      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F4E  3239 0000306E           1638      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001F54  82FC 0002               1639      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001F58  23C1 0000309C           1640      MOVE.L  D1,         HEALTH_Y     ; Enemy Y Position
00001F5E                          1641  
00001F5E                          1642  
00001F5E  45F9 0000305C           1643      LEA    LEVELS,      A2
00001F64  13FC 0005 000030B4      1644      MOVE.B  #05,        LIVES
00001F6C  13FC 0002 000030B5      1645      MOVE.B  #02,        POINTS
00001F74  13FC 0000 00003055      1646      MOVE.B  #00,        DRAW_HEALTHPACKS
00001F7C  13FC 0000 00003056      1647      MOVE.B  #00,        SPAWN_HEALTHPACKS
00001F84  33FC 0140 00003134      1648      MOVE.W  #320,       Z
00001F8C  33FC 0004 00003136      1649      MOVE.W  #4,         SCALER   
00001F94  33FC FFB0 00003138      1650      MOVE.W  #-80,       WIDTH     
00001F9C                          1651  
00001F9C  23FC 00000000 000030BC  1652      MOVE.L  #0,         ATTACK_X
00001FA6  23FC 00000000 000030C0  1653      MOVE.L  #0,         ATTACK_Y
00001FB0  23FC FFFFFFFF 000030CA  1654      MOVE.L  #-1,        THROW_X
00001FBA  23FC FFFFFFFF 000030CE  1655      MOVE.L  #-1,        THROW_Y
00001FC4                          1656      
00001FC4  13FC 0000 000030B6      1657      MOVE.B  #00,        CURRENTLYATTACKING
00001FCC  13FC 0000 000030C4      1658      MOVE.B  #00,        CURRENTLYTHROWING
00001FD4                          1659  
00001FD4  4281                    1660      CLR.L   D1
00001FD6                          1661   
00001FD6                          1662  
00001FD6                          1663      ; Enable the screen back buffer(see easy 68k help)
00001FD6  103C 005C               1664      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001FDA  123C 0011               1665      MOVE.B  #17,        D1          ; Combine Tasks
00001FDE  4E4F                    1666      TRAP    #15                     ; Trap (Perform action)
00001FE0                          1667          
00001FE0                          1668      ; Clear the screen (see easy 68k help)
00001FE0  103C 000B               1669      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001FE4  323C FF00               1670      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001FE8  4E4F                    1671      TRAP    #15                     ; Trap (Perform action)
00001FEA                          1672  
00001FEA  6000 0002               1673      bra gameloop
00001FEE                          1674  
00001FEE                          1675  GAME:
00001FEE                          1676  
00001FEE                          1677      
00001FEE                          1678  GAMELOOP:
00001FEE                          1679      ; Main Gameloop
00001FEE  23FC 00000BB8 0000313A  1680      MOVE.L      #3000,timer
00001FF8                          1681  DELAY:     
00001FF8  53B9 0000313A           1682      SUBI.L      #1,timer            ; decrement timer by 1 to simulate a delay
00001FFE  4AB9 0000313A           1683      TST.L       timer            ; compare 0 to the value of timer
00002004  66F2                    1684      BNE         DELAY               ; branch back to DELAY if the previous compare was not equal
00002006                          1685  
00002006  6100 0014               1686      BSR     BATTLEINPUT                   ; Check Keyboard Input
0000200A  6100 00D4               1687      BSR     UPDATE                  ; Update positions and points
0000200E  6100 069C               1688      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
00002012  6100 0AD4               1689      BSR     CHECK_COLLISIONS        ; Check for Collisions
00002016  6100 039E               1690      BSR     DRAWBATTLE                  ; Draw the Scene
0000201A                          1691                  ; Loop back to GameLoop
0000201A  60D2                    1692      BRA     GAMELOOP    
0000201C                          1693      
0000201C                          1694  BATTLEINPUT:
0000201C  103C 0013               1695      MOVE.B  #TC_KEYCODE, D0          ; Check for pressed keys
00002020                          1696      ;MOVE.L  #$41444C20, D1          ; Check for A, D and Spacebar
00002020  223C 41444C20           1697      MOVE.L  #runActionKeys, D1          ; Check for A, D and Spacebar
00002026  4E4F                    1698      TRAP    #15                     ; Trap (Perform action)
00002028  23C1 00003070           1699      MOVE.L  D1,         CURRENT_KEY ; Put Current Key in Memory
0000202E                          1700  
0000202E  0801 0018               1701      BTST.L  #24,D1
00002032                          1702      IF <NE> THEN
00002036  6100 01C0               1703          BSR    MOVE_PLAYER_LEFT
0000203A                          1704      ENDI
0000203A                          1705  
0000203A  2239 00003070           1706      MOVE.L  CURRENT_KEY, D1
00002040  0801 0010               1707      BTST.L  #16,D1
00002044                          1708      IF <NE> THEN
00002048  6100 01CC               1709          BSR    MOVE_PLAYER_RIGHT
0000204C                          1710      ENDI
0000204C                          1711  
0000204C  2239 00003070           1712      MOVE.L  CURRENT_KEY, D1
00002052  0801 0008               1713      BTST.L  #8,D1
00002056                          1714      IF <NE> THEN
0000205A  6100 02DC               1715          BSR    PERFORM_ATTACK
0000205E                          1716      ENDI
0000205E                          1717  
0000205E  2239 00003070           1718      MOVE.L  CURRENT_KEY, D1
00002064  0801 0000               1719      BTST.L  #0,D1
00002068                          1720      IF <NE> THEN
0000206C  6100 0692               1721          BSR    JUMP
00002070                          1722      ENDI
00002070                          1723  
00002070  103C 0013               1724      MOVE.B  #TC_KEYCODE, D0          ; Check for pressed keys
00002074  724B                    1725      MOVE.L  #$4B, D1          ; Check for A, D and Spacebar
00002076  4E4F                    1726      TRAP    #15                     ; Trap (Perform action)
00002078                          1727      
00002078  0801 0000               1728      BTST.L  #0,D1
0000207C                          1729      IF <NE> THEN
00002080  6100 02F6               1730          BSR    PERFORM_THROW
00002084                          1731      ENDI
00002084                          1732  
00002084                          1733  
00002084                          1734      ; Process Input
00002084  4281                    1735      CLR.L   D1                      ; Clear Data Register
00002086  4282                    1736      CLR.L   D2
00002088  103C 0013               1737      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
0000208C  4E4F                    1738      TRAP    #15                     ; Trap (Perform action)
0000208E  1401                    1739      MOVE.B  D1,         D2          ; Move last key D1 to D2
00002090  B43C 0000               1740      CMP.B   #00,        D2          ; Key is pressed
00002094  6700 000E               1741      BEQ     PROCESS_INPUT           ; Process Key
00002098  4E4F                    1742      TRAP    #15                     ; Trap for Last Key
0000209A                          1743      ; Check if key still pressed
0000209A  B23C 00FF               1744      CMP.B   #$FF,       D1          ; Is it still pressed
0000209E  6700 0004               1745      BEQ     PROCESS_INPUT           ; Process Last Key
000020A2  4E75                    1746      RTS                             ; Return to subroutine
000020A4                          1747  PROCESS_INPUT:
000020A4  23C2 00003070           1748      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000020AA                          1749  
000020AA                          1750  ; pause
000020AA  0CB9 0000001B 00003070  1751      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000020B4  6700 FCC4               1752      BEQ     escapePressed
000020B8                          1753  
000020B8  4A38 11E0               1754      tst.b isPaused
000020BC  6600 FCA4               1755      bne pausedInput
000020C0                          1756  
000020C0  4A39 000030B4           1757      TST.B   LIVES
000020C6  6700 0008               1758      BEQ     PROCESS_RESTART
000020CA  6000 0678               1759      BRA     IDLE                    ; Or Idle
000020CE  4E75                    1760      RTS                             ; Return to subroutine
000020D0                          1761  
000020D0                          1762  PROCESS_RESTART:
000020D0  0CB9 00000052 00003070  1763      CMP.L   #Rkey,  CURRENT_KEY ; Is Current Key R
000020DA  6700 FD3E               1764      BEQ     INITrun
000020DE  4E75                    1765      RTS                             ; Return to subroutine
000020E0                          1766  UPDATE:
000020E0                          1767      ; Update the Players Positon based on Velocity and Gravity
000020E0  4281                    1768      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000020E2  2239 00003082           1769      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
000020E8  2439 00003086           1770      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
000020EE  D282                    1771      ADD.L   D2,         D1          ; Add Gravity to Velocity
000020F0  23C1 00003082           1772      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
000020F6  D2B9 0000307A           1773      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
000020FC  23C1 0000307A           1774      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position
00002102  23C1 000030C0           1775      MOVE.L  D1,         ATTACK_Y 
00002108                          1776  
00002108  6100 0074               1777      BSR     MOVE_THROW
0000210C                          1778  
0000210C                          1779      ; Move the Enemy
0000210C  4281                    1780      CLR.L   D1                      ; Clear the contents of D0
0000210E  2239 00003090           1781      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
00002114  B2BC 00000000           1782      CMP.L   #00,        D1
0000211A  6F00 01AA               1783      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
0000211E  6100 012E               1784      BSR     MOVE_ENEMY              ; Move the Enemy
00002122                          1785  
00002122                          1786      ; Move flying enemy
00002122  4281                    1787      CLR.L   D1                      ; Clear the contents of D0
00002124  2239 000030A0           1788      MOVE.L  FLYINGENEMY_X,    D1          ; Move the Enemy X Position to D0
0000212A  B2BC 00000000           1789      CMP.L   #00,        D1
00002130  6F00 01BE               1790      BLE     RESET_FLYENEMY_POSITION    ; Reset Enemy if off Screen
00002134                          1791  
00002134  0CB9 00000000 00003098  1792      CMP.L   #00,        HEALTH_X
0000213E  6F00 01DE               1793      BLE     RESET_HEALTH_POSITION
00002142  6100 0102               1794      BSR     MOVE_HEALTHPACK
00002146                          1795  
00002146  B381                    1796      EOR.L   D1,D1
00002148  3239 00003138           1797      MOVE.W  WIDTH,D1
0000214E  B279 00003134           1798      CMP.W   Z,D1
00002154  6C00 00DE               1799      BGE     RESET_TREE
00002158  6100 00E4               1800      BSR     MOVE_TREE
0000215C                          1801  
0000215C  6100 007C               1802      BSR     CHECK_ATTACK_COOLDOWN
00002160                          1803  
00002160  4A79 000030BA           1804      TST.W   ATTACK_TIME
00002166  6600 0080               1805      BNE     ATTACK_TIME_SUB
0000216A  13FC 0000 000030B6      1806      MOVE.B  #00,        CURRENTLYATTACKING
00002172  23FC 000001E0 000030C0  1807      MOVE.L  #480,        ATTACK_Y
0000217C                          1808  
0000217C  4E75                    1809      RTS                             ; Return to subroutine  
0000217E                          1810  
0000217E                          1811  MOVE_THROW:
0000217E                          1812         ; Update the Players Positon based on Velocity and Gravity
0000217E  B381                    1813      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
00002180  2239 000030D2           1814      MOVE.L  THROW_VELOCITY, D1       ; Fetch Player Velocity
00002186  2439 000030D6           1815      MOVE.L  THROW_GRAVITY, D2        ; Fetch Player Gravity
0000218C  D282                    1816      ADD.L   D2,         D1          ; Add Gravity to Velocity
0000218E  23C1 000030D2           1817      MOVE.L  D1,         THROW_VELOCITY ; Update Player Velocity
00002194  D2B9 000030CE           1818      ADD.L   THROW_Y,   D1          ; Add Velocity to Player
0000219A  23C1 000030CE           1819      MOVE.L  D1,         THROW_Y    ; Update Players Y Position
000021A0                          1820  
000021A0  58B9 000030CA           1821      ADDI.L   #4,        THROW_X
000021A6  6100 0004               1822      BSR     CHECK_THROW_DONE
000021AA                          1823      
000021AA  4E75                    1824      RTS
000021AC                          1825  
000021AC                          1826  CHECK_THROW_DONE:
000021AC  0CB9 0000012C 000030CE  1827      CMP.L    #300, THROW_Y
000021B6  6E00 0004               1828      BGT      RESET_THROW
000021BA  4E75                    1829      RTS
000021BC                          1830  
000021BC                          1831  RESET_THROW:
000021BC  13FC 0000 000030C4      1832      MOVE.B   #00, CURRENTLYTHROWING
000021C4  23FC FFFFFFFF 000030CA  1833      MOVE.L   #-1, THROW_X
000021CE  23FC FFFFFFFF 000030CE  1834      MOVE.L   #-1, THROW_Y
000021D8  4E75                    1835      RTS
000021DA                          1836  
000021DA                          1837  CHECK_ATTACK_COOLDOWN:
000021DA  0C79 0000 000030B8      1838      CMP.W   #0, ATTACK_COOLDOWN
000021E2  6E00 000C               1839      BGT     ATTACK_COOLDOWN_SUB
000021E6  4E75                    1840      RTS
000021E8                          1841  
000021E8                          1842  ATTACK_TIME_SUB:
000021E8  5579 000030BA           1843      SUB.W   #02,        ATTACK_TIME
000021EE  4E75                    1844      RTS   
000021F0                          1845  ATTACK_COOLDOWN_SUB:
000021F0  5579 000030B8           1846      SUB.W   #02,        ATTACK_COOLDOWN
000021F6  4E75                    1847      RTS                            
000021F8                          1848  
000021F8                          1849  MOVE_PLAYER_LEFT:
000021F8  13FC 0001 0000308E      1850      MOVE.B  #LOOKLEFT,        PLAYER_DIR
00002200  2239 00003076           1851      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
00002206  5581                    1852      SUB.L   #02,        D1          ; Move Player Left
00002208  23C1 00003076           1853      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
0000220E  55B9 000030BC           1854      SUB.L   #02,        ATTACK_X
00002214  4E75                    1855      RTS                             ; Return to subroutine    
00002216                          1856  
00002216                          1857  MOVE_PLAYER_RIGHT:
00002216  13FC 0002 0000308E      1858      MOVE.B  #LOOKRIGHT,        PLAYER_DIR
0000221E  2239 00003076           1859      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
00002224  5481                    1860      ADD.L   #02,        D1          ; Move Player Right
00002226  23C1 00003076           1861      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
0000222C  54B9 000030BC           1862      ADD.L   #02,        ATTACK_X
00002232  4E75                    1863      RTS                             ; Return to subroutine
00002234                          1864  
00002234                          1865  RESET_TREE:
00002234  33FC 0280 00003134      1866      MOVE.W  #640,Z
0000223C  4E75                    1867      RTS
0000223E                          1868  
0000223E                          1869  MOVE_TREE:
0000223E  5379 00003134           1870      SUB.W  #01,Z
00002244  4E75                    1871      RTS
00002246                          1872  
00002246                          1873  MOVE_HEALTHPACK:
00002246  55B9 00003098           1874      SUB.L   #02,        HEALTH_X
0000224C  4E75                    1875      RTS
0000224E                          1876  
0000224E                          1877  MOVE_ENEMY:
0000224E  45F9 0000305C           1878      LEA     LEVELS,      A2
00002254  2A39 0000307E           1879      MOVE.L  PLAYER_SCORE,   D5
0000225A  2C1A                    1880      MOVE.L  (A2)+,       D6
0000225C  BA86                    1881      CMP.L   D6,   D5
0000225E  6E00 004C               1882      BGT     MOVE_ENEMY_L4
00002262  2C1A                    1883      MOVE.L  (A2)+,       D6
00002264  BA86                    1884      CMP.L   D6,   D5
00002266  6E00 002E               1885      BGT     MOVE_ENEMY_L3
0000226A  2C1A                    1886      MOVE.L  (A2)+,       D6
0000226C  BA86                    1887      CMP.L   D6,   D5
0000226E  6E00 0010               1888      BGT     MOVE_ENEMY_L2
00002272  57B9 000030A0           1889      SUB.L   #03,        FLYINGENEMY_X
00002278  55B9 00003090           1890      SUB.L   #02,        ENEMY_X     ; Move enemy by X Value
0000227E  4E75                    1891      RTS
00002280                          1892  
00002280                          1893  MOVE_ENEMY_L2:
00002280  57B9 000030A0           1894      SUB.L   #03,        FLYINGENEMY_X
00002286  59B9 00003090           1895      SUB.L   #04,        ENEMY_X     ; Move enemy by X Value
0000228C  13FC 0003 000030B5      1896      MOVE.B  #03,        POINTS
00002294  4E75                    1897      RTS
00002296                          1898  
00002296                          1899  MOVE_ENEMY_L3:
00002296  5FB9 000030A0           1900      SUB.L   #07,        FLYINGENEMY_X
0000229C  5BB9 00003090           1901      SUB.L   #05,        ENEMY_X     ; Move enemy by X Value
000022A2  13FC 0005 000030B5      1902      MOVE.B  #05,        POINTS
000022AA  4E75                    1903      RTS
000022AC                          1904  
000022AC                          1905  MOVE_ENEMY_L4:
000022AC  04B9 0000000A 000030A0  1906      SUB.L   #10,        FLYINGENEMY_X
000022B6  51B9 00003090           1907      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
000022BC  13FC 000A 000030B5      1908      MOVE.B  #10,        POINTS
000022C4  4E75                    1909      RTS
000022C6                          1910  RESET_ENEMY_POSITION:
000022C6  4281                    1911      CLR.L   D1       
000022C8  3239 0000306E           1912      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000022CE  82FC 0002               1913      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000022D2  23C1 00003094           1914      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
000022D8  13FC 0000 000030DB      1915      MOVE.B  #0,         ENEMY_HIT
000022E0                          1916  
000022E0  B381                    1917      EOR.L  D1,D1                      ; Clear contents of D1 (XOR is faster)
000022E2  3239 0000306C           1918      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000022E8  23C1 00003090           1919      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000022EE  4E75                    1920      RTS
000022F0                          1921  
000022F0                          1922  RESET_FLYENEMY_POSITION:
000022F0  B381                    1923      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000022F2  3239 0000306E           1924      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000022F8  82FC 0002               1925      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000022FC  0441 003C               1926      SUB.W   #60,        D1
00002300  23C1 000030A4           1927      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
00002306  13FC 0000 000030DC      1928      MOVE.B  #0,         FLYENEMY_HIT
0000230E                          1929  
0000230E  4281                    1930      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002310  3239 0000306C           1931      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002316  23C1 000030A0           1932      MOVE.L  D1,         FLYINGENEMY_X     ; FLY Enemy X Position
0000231C  4E75                    1933      RTS
0000231E                          1934      
0000231E                          1935  RESET_HEALTH_POSITION:
0000231E  13FC 0001 00003055      1936      MOVE.B  #01,        DRAW_HEALTHPACKS
00002326  4281                    1937      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002328  3239 0000306C           1938      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000232E  23C1 00003098           1939      MOVE.L  D1,         HEALTH_X     ; healthpack X Position
00002334  4E75                    1940      RTS
00002336                          1941  
00002336                          1942  CONTINUE:
00002336  4E75                    1943      RTS
00002338                          1944  
00002338                          1945  PERFORM_ATTACK:
00002338  4A79 000030B8           1946      TST.W    ATTACK_COOLDOWN
0000233E  66F6                    1947      BNE      CONTINUE
00002340                          1948      
00002340  13FC 0001 000030B6      1949      MOVE.B   #01, CURRENTLYATTACKING
00002348  33FC 0032 000030BA      1950      MOVE.W   #50, ATTACK_TIME
00002350  33FC 004C 000030B8      1951      MOVE.W   #76, ATTACK_COOLDOWN
00002358                          1952  
00002358  23F9 00003076 000030BC  1953      MOVE.L   PLAYER_X,ATTACK_X
00002362  06B9 00000014 000030BC  1954      ADDI.L   #PLYR_W_INIT,ATTACK_X
0000236C  23F9 0000307A 000030C0  1955      MOVE.L   PLAYER_Y,ATTACK_Y
00002376  4E75                    1956      RTS
00002378                          1957  
00002378                          1958  PERFORM_THROW:
00002378  4A39 000030C4           1959      TST.B    CURRENTLYTHROWING
0000237E  66B6                    1960      BNE      CONTINUE
00002380                          1961      
00002380  13FC 0001 000030C4      1962      MOVE.B   #01,CURRENTLYTHROWING
00002388  23F9 00003076 000030CA  1963      MOVE.L   PLAYER_X,THROW_X
00002392  06B9 00000014 000030CA  1964      ADDI.L   #PLYR_W_INIT,THROW_X
0000239C  23F9 0000307A 000030CE  1965      MOVE.L   PLAYER_Y,THROW_Y
000023A6  04B9 0000000C 000030CE  1966      SUBI.L   #PLYR_H_INIT,THROW_Y
000023B0                          1967  
000023B0  6100 0384               1968      BSR     PERFORM_THROW_ARC
000023B4  4E75                    1969      RTS
000023B6                          1970  
000023B6                          1971  DRAWBATTLE: 
000023B6                          1972      ; Enable back buffer
000023B6  103C 005E               1973      MOVE.B  #TC_REDRAW,        D0
000023BA  4E4F                    1974      TRAP    #15
000023BC                          1975  
000023BC                          1976      ; Clear the screen
000023BC  103C 000B               1977      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000023C0  323C FF00               1978      MOVE.W  #$FF00,     D1          ; Clear contents
000023C4  4E4F                    1979      TRAP    #15                     ; Trap (Perform action)
000023C6                          1980  
000023C6  123C 0001               1981      MOVE.B  #1,D1
000023CA  103C 005D               1982      MOVE.B  #93,D0
000023CE  4E4F                    1983      TRAP    #15
000023D0                          1984  
000023D0  4EB8 14BC               1985      jsr drawPause
000023D4                          1986  
000023D4  6100 00B0               1987      BSR     DRAW_BACKGROUND        
000023D8  6100 001C               1988      BSR     DRAW_HILL 
000023DC  6100 0150               1989      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000023E0  6100 0418               1990      BSR     DRAW_PLAYER             ; Draw Player
000023E4  6100 04FC               1991      BSR     DRAW_ENEMY              ; Draw Enemy
000023E8  6100 053C               1992      BSR     DRAW_FLYENEMY
000023EC  6100 057C               1993      BSR     DRAW_HEALTHPACK
000023F0  6100 05FA               1994      BSR     DRAW_FLOOR              ; Draw Floor
000023F4  4E75                    1995      RTS                             ; Return to subroutine
000023F6                          1996  
000023F6                          1997  
000023F6                          1998  DRAW_HILL:
000023F6                          1999  
000023F6                          2000  ; Set Pixel Colors
000023F6  223C 00004FAD           2001      MOVE.L  #DIRT,     D1          ; Set Background color
000023FC  103C 0050               2002      MOVE.B  #80,        D0          ; Task for Background Color
00002400  4E4F                    2003      TRAP    #15                     ; Trap (Perform action)
00002402                          2004  
00002402  223C 00004FAD           2005      MOVE.L  #DIRT,     D1
00002408  103C 0051               2006      MOVE.B  #81,        D0
0000240C  4E4F                    2007      TRAP    #15
0000240E                          2008  
0000240E                          2009      ; Set X, Y, X2, and Y2
0000240E  7200                    2010      MOVE.L  #0,   D1          ; X
00002410  243C 000000F1           2011      MOVE.L  #241,  D2          ; Y
00002416  761E                    2012      MOVE.L  #30,   D3           
00002418  7878                    2013      MOVE.L  #120,   D4     
0000241A                          2014      
0000241A  103C 0057               2015      MOVE.B  #87,        D0          ; Draw Line
0000241E  4E4F                    2016      TRAP    #15                     ; Trap (Perform action)
00002420                          2017      
00002420                          2018       ; Set X, Y, X2, and Y2
00002420  7200                    2019      MOVE.L  #0,   D1          ; X
00002422  243C 000000F1           2020      MOVE.L  #241,  D2          ; Y
00002428  763C                    2021      MOVE.L  #60,   D3           
0000242A  283C 00000087           2022      MOVE.L  #135,   D4 
00002430                          2023      
00002430                          2024      
00002430  103C 0057               2025      MOVE.B  #87,        D0          ; Draw Line
00002434  4E4F                    2026      TRAP    #15                     ; Trap (Perform action)
00002436                          2027  
00002436                          2028       ; Set X, Y, X2, and Y2
00002436  7200                    2029      MOVE.L  #0,   D1          ; X
00002438  243C 000000F1           2030      MOVE.L  #241,  D2          ; Y
0000243E  7650                    2031      MOVE.L  #80,   D3           
00002440  283C 00000096           2032      MOVE.L  #150,   D4 
00002446                          2033      
00002446                          2034      
00002446  103C 0057               2035      MOVE.B  #87,        D0          ; Draw Line
0000244A  4E4F                    2036      TRAP    #15                     ; Trap (Perform action)
0000244C                          2037  
0000244C                          2038       ; Set X, Y, X2, and Y2
0000244C  7200                    2039      MOVE.L  #0,   D1          ; X
0000244E  243C 000000F1           2040      MOVE.L  #241,  D2          ; Y
00002454  7664                    2041      MOVE.L  #100,   D3           
00002456  283C 000000C8           2042      MOVE.L  #200,   D4 
0000245C                          2043      
0000245C                          2044      
0000245C  103C 0057               2045      MOVE.B  #87,        D0          ; Draw Line
00002460  4E4F                    2046      TRAP    #15                     ; Trap (Perform action)
00002462                          2047  
00002462  7200                    2048      MOVE.L  #BLACK,     D1
00002464  103C 0051               2049      MOVE.B  #81,        D0
00002468  4E4F                    2050      TRAP    #15
0000246A  7200                    2051      MOVE.L  #BLACK,     D1
0000246C  103C 0050               2052      MOVE.B  #80,        D0
00002470  4E4F                    2053      TRAP    #15
00002472                          2054  
00002472                          2055      ; Set X, Y, X2, and Y2
00002472  7205                    2056      MOVE.L  #5,   D1          ; X
00002474  243C 00000082           2057      MOVE.L  #130,  D2          ; Y
0000247A  7619                    2058      MOVE.L  #25,   D3           
0000247C  7878                    2059      MOVE.L  #120,   D4     
0000247E                          2060  
0000247E                          2061      
0000247E  103C 0057               2062      MOVE.B  #87,        D0          ; Draw Line
00002482  4E4F                    2063      TRAP    #15                     ; Trap (Perform action)
00002484                          2064  
00002484  4E75                    2065      RTS
00002486                          2066  
00002486                          2067  DRAW_BACKGROUND:
00002486  4281                    2068      CLR.L       D1
00002488  223C 00FFE2B0           2069      MOVE.L      #SKY,D1
0000248E  103C 0051               2070      MOVE.B      #81,D0
00002492  4E4F                    2071      TRAP        #15
00002494                          2072  
00002494  7200                    2073      MOVE.L      #00, D1
00002496  7400                    2074      MOVE.L      #00, D2
00002498  7059                    2075      MOVE.L      #89, D0
0000249A  4E4F                    2076      TRAP        #15
0000249C                          2077      
0000249C  223C 0019506D           2078      MOVE.L     #BROWN,D1
000024A2  243C 01110000           2079      MOVE.L     #$01110000,D2
000024A8  103C 0015               2080      MOVE.B     #21,D0
000024AC  4E4F                    2081      TRAP       #15
000024AE                          2082      
000024AE                          2083  
000024AE  B381                    2084      EOR.L      D1,D1
000024B0  143C 0005               2085      MOVE.B     #5,D2
000024B4  33FC 300B 0000312E      2086      MOVE.W     #$300B,TRUNK
000024BC                          2087  TREE_LOOP:
000024BC  700B                    2088      MOVE.L     #TC_CURSR_P,D0
000024BE  3239 0000312E           2089      MOVE.W     TRUNK,D1
000024C4  5379 0000312E           2090      SUBQ.W      #01,TRUNK
000024CA  4E4F                    2091      TRAP       #15
000024CC                          2092     
000024CC  43F9 00003029           2093      LEA         TREET, A1
000024D2  700E                    2094      MOVE.L      #14, D0
000024D4  4E4F                    2095      TRAP        #15
000024D6                          2096  
000024D6  5302                    2097      SUBQ.B      #01,D2
000024D8  B43C 0000               2098      CMP.B       #00,D2
000024DC  66DE                    2099      BNE         TREE_LOOP
000024DE                          2100  
000024DE  223C 00566D19           2101      MOVE.L     #GREEN,D1
000024E4  243C 01110000           2102      MOVE.L     #$01110000,D2
000024EA  103C 0015               2103      MOVE.B     #21,D0
000024EE  4E4F                    2104      TRAP       #15
000024F0                          2105  
000024F0  163C 0005               2106      MOVE.B     #5,D3
000024F4                          2107  TREE_LEAVES_Y:
000024F4  13FC 002D 0000312E      2108      MOVE.B     #$2D,TRUNK
000024FC  143C 0008               2109      MOVE.B     #8,D2
00002500                          2110  TREE_LEAVES_X:
00002500  700B                    2111      MOVE.L     #TC_CURSR_P,D0
00002502  3239 0000312E           2112      MOVE.W     TRUNK,D1
00002508  5239 0000312E           2113      ADDQ.B     #01,TRUNK
0000250E  4E4F                    2114      TRAP       #15
00002510                          2115     
00002510  7240                    2116      MOVE.L      #$40, D1
00002512  7006                    2117      MOVE.L      #6, D0
00002514  4E4F                    2118      TRAP        #15
00002516                          2119  
00002516  5302                    2120      SUBQ.B      #01,D2
00002518  B43C 0000               2121      CMP.B       #00,D2
0000251C  66E2                    2122      BNE         TREE_LEAVES_X
0000251E  5303                    2123      SUB.B       #01,D3
00002520  5379 0000312E           2124      SUB.W       #01,TRUNK
00002526  B63C 0000               2125      CMP.B       #00,D3
0000252A  66C8                    2126      BNE         TREE_LEAVES_Y
0000252C  4E75                    2127      RTS
0000252E                          2128  DRAW_PLYR_DATA:
0000252E  B381                    2129      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
00002530  B582                    2130      EOR.L    D2,D2
00002532                          2131  
00002532                          2132  
00002532  7200                    2133      MOVE.L  #BLACK,     D1
00002534  103C 0015               2134      MOVE.B  #21,        D0          ; Set Text Color
00002538  4E4F                    2135      TRAP    #15                     ; Trap (Perform action)
0000253A                          2136  
0000253A  223C 00FFE2B0           2137      MOVE.L  #SKY,       D1          ; Set Text Color
00002540  7051                    2138      MOVE.L  #81,        D0          ; Set Text Color
00002542  4E4F                    2139      TRAP    #15                     ; Trap (Perform action)
00002544                          2140  
00002544                          2141      ; Player Score Message
00002544  103C 000B               2142      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002548  323C 0201               2143      MOVE.W  #$0201,     D1          ; Col 02, Row 01
0000254C  4E4F                    2144      TRAP    #15                     ; Trap (Perform action)
0000254E  43F9 00002FA2           2145      LEA     SCORE_MSG,  A1          ; Score Message
00002554  303C 000D               2146      MOVE    #13,        D0          ; No Line feed
00002558  4E4F                    2147      TRAP    #15                     ; Trap (Perform action)
0000255A                          2148  
0000255A                          2149      ; Player Score Value
0000255A  103C 000B               2150      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000255E  323C 0901               2151      MOVE.W  #$0901,     D1          ; Col 09, Row 01
00002562  4E4F                    2152      TRAP    #15                     ; Trap (Perform action)
00002564  103C 0003               2153      MOVE.B  #03,        D0          ; Display number at D1.L
00002568  2239 0000307E           2154      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
0000256E  4E4F                    2155      TRAP    #15                     ; Trap (Perform action)
00002570                          2156      
00002570                          2157      ; Player X Message
00002570  103C 000B               2158      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002574  323C 0202               2159      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00002578  4E4F                    2160      TRAP    #15                     ; Trap (Perform action)
0000257A  43F9 00002FDC           2161      LEA     X_MSG,      A1          ; X Message
00002580  303C 000D               2162      MOVE    #13,        D0          ; No Line feed
00002584  4E4F                    2163      TRAP    #15                     ; Trap (Perform action)
00002586                          2164      
00002586                          2165      ; Player X
00002586  103C 000B               2166      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
0000258A  323C 0502               2167      MOVE.W  #$0502,     D1          ; Col 05, Row 02
0000258E  4E4F                    2168      TRAP    #15                     ; Trap (Perform action)
00002590  103C 0003               2169      MOVE.B  #03,        D0          ; Display number at D1.L
00002594  2239 00003098           2170      MOVE.L  HEALTH_X,   D1          ; Move X to D1.L
0000259A  4E4F                    2171      TRAP    #15                     ; Trap (Perform action)
0000259C                          2172      
0000259C                          2173      ; Player Y Message
0000259C  103C 000B               2174      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025A0  323C 1002               2175      MOVE.W  #$1002,     D1          ; Col 10, Row 02
000025A4  4E4F                    2176      TRAP    #15                     ; Trap (Perform action)
000025A6  43F9 00002FDF           2177      LEA     Y_MSG,      A1          ; Y Message
000025AC  303C 000D               2178      MOVE    #13,        D0          ; No Line feed
000025B0  4E4F                    2179      TRAP    #15                     ; Trap (Perform action)
000025B2                          2180      
000025B2                          2181      ; Player Y
000025B2  103C 000B               2182      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025B6  323C 1202               2183      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000025BA  4E4F                    2184      TRAP    #15                     ; Trap (Perform action)
000025BC  103C 0003               2185      MOVE.B  #03,        D0          ; Display number at D1.L
000025C0  2239 000030A4           2186      MOVE.L  FLYINGENEMY_Y,   D1          ; Move X to D1.L
000025C6  4E4F                    2187      TRAP    #15                     ; Trap (Perform action) 
000025C8                          2188  
000025C8                          2189      ; Player Velocity Message
000025C8  103C 000B               2190      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025CC  323C 0203               2191      MOVE.W  #$0203,     D1          ; Col 02, Row 03
000025D0  4E4F                    2192      TRAP    #15                     ; Trap (Perform action)
000025D2  43F9 00002FE2           2193      LEA     V_MSG,      A1          ; Velocity Message
000025D8  303C 000D               2194      MOVE    #13,        D0          ; No Line feed
000025DC  4E4F                    2195      TRAP    #15                     ; Trap (Perform action)
000025DE                          2196      
000025DE                          2197      ; Player Velocity
000025DE  103C 000B               2198      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025E2  323C 0503               2199      MOVE.W  #$0503,     D1          ; Col 05, Row 03
000025E6  4E4F                    2200      TRAP    #15                     ; Trap (Perform action)
000025E8  103C 0003               2201      MOVE.B  #03,        D0          ; Display number at D1.L
000025EC  2239 00003082           2202      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
000025F2  4E4F                    2203      TRAP    #15                     ; Trap (Perform action)
000025F4                          2204      
000025F4                          2205      ; Player Gravity Message
000025F4  103C 000B               2206      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000025F8  323C 1003               2207      MOVE.W  #$1003,     D1          ; Col 10, Row 03
000025FC  4E4F                    2208      TRAP    #15                     ; Trap (Perform action)
000025FE  43F9 00002FE5           2209      LEA     VARMSG,      A1          ; G Message
00002604  303C 000D               2210      MOVE    #13,        D0          ; No Line feed
00002608  4E4F                    2211      TRAP    #15                     ; Trap (Perform action)
0000260A                          2212      
0000260A                          2213      ; Player Gravity
0000260A  103C 000B               2214      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000260E  323C 1903               2215      MOVE.W  #$1903,     D1          ; Col 12, Row 03
00002612  4E4F                    2216      TRAP    #15                     ; Trap (Perform action)
00002614  103C 0003               2217      MOVE.B  #03,        D0          ; Display number at D1.L
00002618  4281                    2218      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000261A  1239 000030B8           2219      MOVE.B  ATTACK_COOLDOWN,D1         ; Move Gravity to D1.L
00002620  4E4F                    2220      TRAP    #15                     ; Trap (Perform action)
00002622                          2221  
00002622                          2222      ; Player On Ground Message
00002622  103C 000B               2223      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002626  323C 0204               2224      MOVE.W  #$0204,     D1          ; Col 10, Row 03
0000262A  4E4F                    2225      TRAP    #15                     ; Trap (Perform action)
0000262C  43F9 00002FEA           2226      LEA     GND_MSG,    A1          ; On Ground Message
00002632  303C 000D               2227      MOVE    #13,        D0          ; No Line feed
00002636  4E4F                    2228      TRAP    #15                     ; Trap (Perform action)
00002638                          2229      
00002638                          2230      ; Player On Ground
00002638  103C 000B               2231      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000263C  323C 1504               2232      MOVE.W  #$1504,     D1          ; Col 06, Row 04
00002640  4E4F                    2233      TRAP    #15                     ; Trap (Perform action)
00002642  103C 0003               2234      MOVE.B  #03,        D0          ; Display number at D1.L
00002646  4281                    2235      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002648  1239 000030DA           2236      MOVE.B  ENEMIES_DEFEATED,     D1          ; Move Play on Ground ? to D1.L
0000264E  4E4F                    2237      TRAP    #15                     ; Trap (Perform action)
00002650                          2238  
00002650                          2239      ; Show Keys Pressed
00002650  103C 000B               2240      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002654  323C 2001               2241      MOVE.W  #$2001,     D1          ; Col 20, Row 1
00002658  4E4F                    2242      TRAP    #15                     ; Trap (Perform action)
0000265A  43F9 00002FAB           2243      LEA     KEYCODE_MSG, A1         ; Keycode
00002660  303C 000D               2244      MOVE    #13,        D0          ; No Line feed
00002664  4E4F                    2245      TRAP    #15                     ; Trap (Perform action)
00002666                          2246  
00002666                          2247      ; Show KeyCode
00002666  103C 000B               2248      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000266A  323C 3001               2249      MOVE.W  #$3001,     D1          ; Col 30, Row 1
0000266E  4E4F                    2250      TRAP    #15                     ; Trap (Perform action)    
00002670  2239 00003070           2251      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
00002676  103C 0003               2252      MOVE.B  #03,        D0          ; Display the contents of D1
0000267A  4E4F                    2253      TRAP    #15                     ; Trap (Perform action)
0000267C                          2254  
0000267C                          2255      ; Show Lives msg
0000267C  103C 000B               2256      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002680  323C 0207               2257      MOVE.W  #$0207,     D1          ; Col 02, Row 06
00002684  4E4F                    2258      TRAP    #15                     ; Trap (Perform action)
00002686  43F9 0000304A           2259      LEA     LIVES_MSG,   A1          ; Draw
0000268C  303C 000D               2260      MOVE    #13,        D0          ; No Line feed
00002690  4E4F                    2261      TRAP    #15                     ; Trap (Perform action)  
00002692                          2262      
00002692                          2263      ; Show Lives msg
00002692  103C 000B               2264      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002696  323C 0A07               2265      MOVE.W  #$0A07,     D1          ; Col 30, Row 1
0000269A  4E4F                    2266      TRAP    #15                     ; Trap (Perform action)   
0000269C  B381                    2267      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
0000269E  1239 000030B4           2268      MOVE.B  LIVES,      D1          ; Move Key Pressed to D1
000026A4  103C 0003               2269      MOVE.B  #03,        D0          ; Display the contents of D1
000026A8  4E4F                    2270      TRAP    #15                     ; Trap (Perform action)
000026AA                          2271  
000026AA  4E75                    2272      RTS
000026AC                          2273  IS_PLAYER_ON_GND:
000026AC                          2274      ; Check if Player is on Ground
000026AC  4281                    2275      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000026AE  4282                    2276      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
000026B0  3239 0000306E           2277      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1  
000026B6  82FC 0002               2278      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000026BA  2439 0000307A           2279      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
000026C0  B441                    2280      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
000026C2  6C00 0008               2281      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
000026C6  6D00 002C               2282      BLT     SET_OFF_GROUND          ; The Player is off the Ground
000026CA  4E75                    2283      RTS                             ; Return to subroutine
000026CC                          2284  
000026CC                          2285  
000026CC                          2286  SET_ON_GROUND:
000026CC  4281                    2287      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000026CE  3239 0000306E           2288      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000026D4  82FC 0002               2289      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000026D8  23C1 0000307A           2290      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
000026DE  4281                    2291      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000026E0  7200                    2292      MOVE.L  #00,        D1          ; Player Velocity
000026E2  23C1 00003082           2293      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
000026E8  23FC 00000001 0000308A  2294      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
000026F2  4E75                    2295      RTS
000026F4                          2296  
000026F4                          2297  SET_OFF_GROUND:
000026F4  23FC 00000000 0000308A  2298      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
000026FE  4E75                    2299      RTS                             ; Return to subroutine
00002700                          2300  JUMP:
00002700  0CB9 00000001 0000308A  2301      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000270A  6700 0006               2302      BEQ     PERFORM_JUMP            ; Do Jump
0000270E  6000 0012               2303      BRA     JUMP_DONE               ;
00002712                          2304  PERFORM_JUMP:
00002712  6100 0062               2305      BSR     PLAY_JUMP               ; Play jump sound
00002716  23FC FFFFFFED 00003082  2306      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
00002720  4E75                    2307      RTS                             ; Return to subroutine
00002722                          2308  JUMP_DONE:
00002722  4E75                    2309      RTS                             ; Return to subroutine
00002724                          2310  
00002724                          2311  THROW_ARC:
00002724  0CB9 00000001 0000308A  2312      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000272E  6700 0006               2313      BEQ     PERFORM_THROW_ARC    ; Do Jump
00002732  6000 000E               2314      BRA     ARC_DONE               ;
00002736                          2315  PERFORM_THROW_ARC:
00002736                          2316      ;BSR     PLAY_JUMP               ; Play jump sound
00002736  23FC FFFFFFF0 000030D2  2317      MOVE.L  #THRW_JUMP_V,THROW_VELOCITY ; Set the players velocity to true
00002740  4E75                    2318      RTS                             ; Return to subroutine
00002742                          2319  ARC_DONE:
00002742  4E75                    2320      RTS                             ; Return to subroutine
00002744                          2321  
00002744                          2322  IDLE:
00002744  4E75                    2323      RTS                             ; Return to subroutine
00002746                          2324  
00002746                          2325  GAMEOVER_LOAD:
00002746  43F9 000030F1           2326      LEA     GAMEOVER_WAV,    A1          ; Load Wav File into A1
0000274C  323C 0000               2327      MOVE    #GAMEOVER_INDEX, D1          ; Assign it INDEX
00002750  303C 004A               2328      MOVE    #74,        D0          ; Load into memory
00002754  4E4F                    2329      TRAP    #15                     ; Trap (Perform action)
00002756  4E75                    2330      RTS                             ; Return to subroutine
00002758                          2331  
00002758                          2332  PLAY_GAMEOVER:
00002758  323C 0000               2333      MOVE    #GAMEOVER_INDEX, D1          ; Load Sound INDEX
0000275C  303C 004B               2334      MOVE    #75,        D0          ; Play Sound
00002760  4E4F                    2335      TRAP    #15                     ; Trap (Perform action)
00002762  4E75                    2336      RTS                             ; Return to subroutine
00002764                          2337  
00002764                          2338  JUMP_LOAD:
00002764  43F9 000030E8           2339      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
0000276A  323C 0001               2340      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
0000276E  303C 004A               2341      MOVE    #74,        D0          ; Load into memory
00002772  4E4F                    2342      TRAP    #15                     ; Trap (Perform action)
00002774  4E75                    2343      RTS                             ; Return to subroutine
00002776                          2344  
00002776                          2345  PLAY_JUMP:
00002776  323C 0001               2346      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
0000277A  303C 004B               2347      MOVE    #75,        D0          ; Play Sound
0000277E  4E4F                    2348      TRAP    #15                     ; Trap (Perform action)
00002780  4E75                    2349      RTS                             ; Return to subroutine
00002782                          2350  
00002782                          2351  HITHURT_LOAD:
00002782  43F9 000030FE           2352      LEA     HITHURT_WAV,   A1          ; Load Wav File into A1
00002788  323C 0002               2353      MOVE    #HITHURT_INDEX,D1          ; Assign it INDEX
0000278C  303C 004A               2354      MOVE    #74,        D0          ; Load into memory
00002790  4E4F                    2355      TRAP    #15                     ; Trap (Perform action)
00002792  4E75                    2356      RTS                             ; Return to subroutine
00002794                          2357  
00002794                          2358  PLAY_HITHURT:
00002794  323C 0002               2359      MOVE    #HITHURT_INDEX,D1          ; Load Sound INDEX
00002798  303C 004B               2360      MOVE    #75,        D0          ; Play Sound
0000279C  4E4F                    2361      TRAP    #15                     ; Trap (Perform action)
0000279E  4E75                    2362      RTS                             ; Return to subroutine
000027A0                          2363  
000027A0                          2364  POWERUP_LOAD:
000027A0  43F9 00003112           2365      LEA     POWERUP_WAV,   A1          ; Load Wav File into A1
000027A6  323C 0003               2366      MOVE    #POWERUP_INDEX,D1          ; Assign it INDEX
000027AA  303C 004A               2367      MOVE    #74,        D0          ; Load into memory
000027AE  4E4F                    2368      TRAP    #15                     ; Trap (Perform action)
000027B0  4E75                    2369      RTS                             ; Return to subroutine
000027B2                          2370  
000027B2                          2371  PLAY_POWERUP:
000027B2  323C 0003               2372      MOVE    #POWERUP_INDEX,D1          ; Load Sound INDEX
000027B6  303C 004B               2373      MOVE    #75,        D0          ; Play Sound
000027BA  4E4F                    2374      TRAP    #15                     ; Trap (Perform action)
000027BC  4E75                    2375      RTS                             ; Return to subroutine
000027BE                          2376  
000027BE                          2377  LVLCHANGE_LOAD:
000027BE  43F9 0000311E           2378      LEA     LEVELCHANGE_WAV,   A1          ; Load Wav File into A1
000027C4  323C 0004               2379      MOVE    #LEVELCHANGE_INDEX,D1          ; Assign it INDEX
000027C8  303C 004A               2380      MOVE    #74,        D0          ; Load into memory
000027CC  4E4F                    2381      TRAP    #15                     ; Trap (Perform action)
000027CE  4E75                    2382      RTS                             ; Return to subroutine
000027D0                          2383  
000027D0                          2384  PLAY_LVLCHANGE:
000027D0  323C 0004               2385      MOVE    #LEVELCHANGE_INDEX,D1          ; Load Sound INDEX
000027D4  303C 004B               2386      MOVE    #75,        D0          ; Play Sound
000027D8  4E4F                    2387      TRAP    #15                     ; Trap (Perform action)
000027DA  4E75                    2388      RTS                             ; Return to subroutine
000027DC                          2389  
000027DC                          2390  HIT_LOAD:
000027DC  43F9 0000310A           2391      LEA     HIT_WAV,   A1          ; Load Wav File into A1
000027E2  323C 0005               2392      MOVE    #HIT_INDEX,D1          ; Assign it INDEX
000027E6  303C 004A               2393      MOVE    #74,        D0          ; Load into memory
000027EA  4E4F                    2394      TRAP    #15                     ; Trap (Perform action)
000027EC  4E75                    2395      RTS                             ; Return to subroutine
000027EE                          2396  
000027EE                          2397  PLAY_HIT:
000027EE  323C 0005               2398      MOVE    #HIT_INDEX,D1          ; Load Sound INDEX
000027F2  303C 004B               2399      MOVE    #75,        D0          ; Play Sound
000027F6  4E4F                    2400      TRAP    #15                     ; Trap (Perform action)
000027F8  4E75                    2401      RTS                             ; Return to subroutine
000027FA                          2402  
000027FA                          2403  DRAW_PLAYER:
000027FA                          2404      ; Set Pixel Colors
000027FA  7200                    2405      MOVE.L  #BLACK,     D1          ; Set Background color
000027FC  103C 0050               2406      MOVE.B  #80,        D0          ; Task for Background Color
00002800  4E4F                    2407      TRAP    #15                     ; Trap (Perform action)
00002802                          2408      ; Reset Pixel Colors
00002802  7200                    2409      MOVE.L  #BLACK,     D1          ; Set Background color
00002804  103C 0051               2410      MOVE.B  #81,        D0          ; Task for Background Color
00002808  4E4F                    2411      TRAP    #15                     ; Trap (Perform action)
0000280A                          2412  
0000280A                          2413      ; Set X, Y, Width and Height
0000280A  2239 00003076           2414      MOVE.L  PLAYER_X,   D1          ; X
00002810  2439 0000307A           2415      MOVE.L  PLAYER_Y,   D2
00002816                          2416      
00002816  2639 00003076           2417      MOVE.L  PLAYER_X,   D3
0000281C  B984                    2418      EOR.L   D4,D4
0000281E  1839 000030DD           2419      MOVE.B   PLAYER_WIDTH,   D4      ; Width
00002824  D684                    2420      ADD.L   D4,D3
00002826  2839 0000307A           2421      MOVE.L  PLAYER_Y,   D4 
0000282C  9839 000030DE           2422      SUB.B   PLAYER_HEIGHT,   D4      ; Height          ; Y
00002832                          2423      
00002832                          2424      ; Draw Player
00002832  103C 0057               2425      MOVE.B  #87,        D0          ; Draw Player
00002836  4E4F                    2426      TRAP    #15                     ; Trap (Perform action)
00002838  6100 0008               2427      BSR     IS_ATTACKING
0000283C  6100 0054               2428      BSR     IS_THROWING
00002840                          2429  
00002840  4E75                    2430      RTS                             ; Return to subroutine
00002842                          2431  
00002842                          2432  IS_ATTACKING:
00002842  4A39 000030B6           2433      TST.B   CURRENTLYATTACKING
00002848  6600 0004               2434      BNE     DRAW_ATTACK
0000284C  4E75                    2435      RTS
0000284E                          2436  DRAW_ATTACK:
0000284E                          2437  
0000284E                          2438      ; Set Pixel Colors
0000284E  223C 00FFFFFF           2439      MOVE.L  #WHITE,     D1          ; Set Background color
00002854  103C 0050               2440      MOVE.B  #80,        D0          ; Task for Background Color
00002858  4E4F                    2441      TRAP    #15                     ; Trap (Perform action)
0000285A                          2442      ; Reset Pixel Colors
0000285A  223C 00FFFFFF           2443      MOVE.L  #WHITE,     D1          ; Set Background color
00002860  103C 0051               2444      MOVE.B  #81,        D0          ; Task for Background Color
00002864  4E4F                    2445      TRAP    #15                     ; Trap (Perform action)
00002866                          2446  
00002866  2239 000030BC           2447      MOVE.L  ATTACK_X,   D1          ; X
0000286C  2439 000030C0           2448      MOVE.L  ATTACK_Y,   D2
00002872                          2449      
00002872  2639 000030BC           2450      MOVE.L  ATTACK_X,   D3
00002878  0683 00000023           2451      ADD.L   #ATTACK_WIDTH,   D3      ; Width
0000287E  2839 000030C0           2452      MOVE.L  ATTACK_Y,   D4 
00002884  0484 00000014           2453      SUB.L   #ATTACK_HEIGHT,   D4      ; Height          ; Y
0000288A                          2454      
0000288A                          2455      ; Draw Player
0000288A  103C 0057               2456      MOVE.B  #87,        D0          ; Draw Player
0000288E  4E4F                    2457      TRAP    #15                     ; Trap (Perform action)
00002890  4E75                    2458      RTS                             ; Return to subroutine
00002892                          2459  
00002892                          2460  IS_THROWING:
00002892  4A39 000030C4           2461      TST.B   CURRENTLYTHROWING
00002898  6600 0004               2462      BNE     DRAW_THROW
0000289C  4E75                    2463      RTS
0000289E                          2464  DRAW_THROW:
0000289E                          2465  
0000289E                          2466      ; Set Pixel Colors
0000289E  223C 0019506D           2467      MOVE.L  #BROWN,     D1          ; Set Background color
000028A4  103C 0050               2468      MOVE.B  #80,        D0          ; Task for Background Color
000028A8  4E4F                    2469      TRAP    #15                     ; Trap (Perform action)
000028AA                          2470      ; Reset Pixel Colors
000028AA  223C 0019506D           2471      MOVE.L  #BROWN,     D1          ; Set Background color
000028B0  103C 0051               2472      MOVE.B  #81,        D0          ; Task for Background Color
000028B4  4E4F                    2473      TRAP    #15                     ; Trap (Perform action)
000028B6                          2474  
000028B6  2239 000030CA           2475      MOVE.L  THROW_X,   D1          ; X
000028BC  2439 000030CE           2476      MOVE.L  THROW_Y,   D2
000028C2                          2477      
000028C2  2639 000030CA           2478      MOVE.L  THROW_X,   D3
000028C8  0683 0000000F           2479      ADD.L   #THRW_W_INIT,   D3      ; Width
000028CE  2839 000030CE           2480      MOVE.L  THROW_Y,   D4 
000028D4  0484 0000000F           2481      SUB.L   #THRW_H_INIT,   D4      ; Height          ; Y
000028DA                          2482      
000028DA                          2483      ; Draw Acorn
000028DA  103C 0057               2484      MOVE.B  #87,        D0          ; Draw Player
000028DE  4E4F                    2485      TRAP    #15                     ; Trap (Perform action)
000028E0  4E75                    2486      RTS                             ; Return to subroutine
000028E2                          2487  
000028E2                          2488  DRAW_ENEMY:
000028E2                          2489      ; Set Pixel Colors
000028E2  2239 000030A8           2490      MOVE.L  ENEMYCOLOR,       D1          ; Set Background color
000028E8  103C 0050               2491      MOVE.B  #80,        D0          ; Task for Background Color
000028EC  4E4F                    2492      TRAP    #15                     ; Trap (Perform action)
000028EE                          2493  
000028EE                          2494      ; Reset Pixel Colors
000028EE  2239 000030A8           2495      MOVE.L  ENEMYCOLOR,     D1          ; Set Background color
000028F4  103C 0051               2496      MOVE.B  #81,        D0          ; Task for Background Color
000028F8  4E4F                    2497      TRAP    #15                     ; Trap (Perform action)
000028FA                          2498  
000028FA                          2499      ; Set X, Y, Width and Height
000028FA  2239 00003090           2500      MOVE.L  ENEMY_X,    D1          ; X
00002900  2439 00003094           2501      MOVE.L  ENEMY_Y,    D2          ; Y
00002906  2639 00003090           2502      MOVE.L  ENEMY_X,    D3
0000290C  D679 000030E0           2503      ADD.W   ENEMY_WIDTH,   D3      ; Width
00002912  2839 00003094           2504      MOVE.L  ENEMY_Y,    D4 
00002918  9879 000030E2           2505      SUB.W   ENEMY_HEIGHT,   D4      ; Height
0000291E                          2506      
0000291E                          2507      ; Draw Enemy    
0000291E  103C 0057               2508      MOVE.B  #87,        D0          ; Draw Enemy
00002922  4E4F                    2509      TRAP    #15                     ; Trap (Perform action)
00002924  4E75                    2510      RTS                             ; Return to subroutine
00002926                          2511  
00002926                          2512  DRAW_FLYENEMY:
00002926                          2513      ; Set Pixel Colors
00002926  2239 000030AC           2514      MOVE.L  FLYENEMYCOLOR,       D1          ; Set Background color
0000292C  103C 0050               2515      MOVE.B  #80,        D0          ; Task for Background Color
00002930  4E4F                    2516      TRAP    #15                     ; Trap (Perform action)
00002932                          2517  
00002932                          2518      ; Reset Pixel Colors
00002932  2239 000030AC           2519      MOVE.L  FLYENEMYCOLOR,     D1          ; Set Background color
00002938  103C 0051               2520      MOVE.B  #81,        D0          ; Task for Background Color
0000293C  4E4F                    2521      TRAP    #15                     ; Trap (Perform action)
0000293E                          2522  
0000293E                          2523      ; Set X, Y, Width and Height
0000293E  2239 000030A0           2524      MOVE.L  FLYINGENEMY_X,    D1          ; X
00002944  2439 000030A4           2525      MOVE.L  FLYINGENEMY_Y,    D2          ; Y
0000294A  2639 000030A0           2526      MOVE.L  FLYINGENEMY_X,    D3
00002950  D679 000030E4           2527      ADD.W   FLYENEMY_WIDTH,   D3      ; Width
00002956  2839 000030A4           2528      MOVE.L  FLYINGENEMY_Y,    D4 
0000295C  9879 000030E6           2529      SUB.W   FLYENEMY_HEIGHT,   D4      ; Height
00002962                          2530      
00002962                          2531      ; Draw Enemy    
00002962  103C 0057               2532      MOVE.B  #87,        D0          ; Draw Enemy
00002966  4E4F                    2533      TRAP    #15                     ; Trap (Perform action)
00002968  4E75                    2534      RTS  
0000296A                          2535  
0000296A                          2536  DRAW_HEALTHPACK:
0000296A                          2537  
0000296A  0C39 0000 00003056      2538      CMP.B   #00,     SPAWN_HEALTHPACKS
00002972  6700 006C               2539      BEQ     DRAW_HEALTHPACK_DONE
00002976  0C39 0000 00003055      2540      CMP.B   #00,     DRAW_HEALTHPACKS
0000297E  6700 0060               2541      BEQ     DRAW_HEALTHPACK_DONE
00002982                          2542      
00002982                          2543      ;BSR     RANDOM_NUMBER
00002982                          2544      ;CMP.L   #$80,  D1
00002982                          2545      ;BGT     DRAW_HEALTHPACK_DONE
00002982                          2546  
00002982  13FC 0001 00003055      2547      MOVE.B  #01,        DRAW_HEALTHPACKS
0000298A  3239 0000306E           2548      MOVE.W  SCREEN_H,     D1
00002990  82FC 0002               2549      DIVU.W    #02,        D1
00002994  C2BC 0000FFFF           2550      AND.L   #$0000FFFF,   D1
0000299A  23C1 0000309C           2551      MOVE.L  D1,         HEALTH_Y
000029A0                          2552      ; Set Pixel Colors
000029A0  7200                    2553      MOVE.L  #BLACK,       D1          ; Set Background color
000029A2  103C 0050               2554      MOVE.B  #80,        D0          ; Task for Background Color
000029A6  4E4F                    2555      TRAP    #15                     ; Trap (Perform action)
000029A8                          2556  
000029A8                          2557      ; Reset Pixel Colors
000029A8  223C 0044FF44           2558      MOVE.L  #LIFEGREEN,     D1          ; Set Background color
000029AE  103C 0051               2559      MOVE.B  #81,        D0          ; Task for Background Color
000029B2  4E4F                    2560      TRAP    #15                     ; Trap (Perform action)
000029B4                          2561  
000029B4                          2562      ; Set X, Y, Width and Height
000029B4  2239 00003098           2563      MOVE.L  HEALTH_X,    D1          ; X
000029BA  2439 0000309C           2564      MOVE.L  HEALTH_Y,    D2          ; Y
000029C0  2639 00003098           2565      MOVE.L  HEALTH_X,    D3
000029C6  0683 0000000C           2566      ADD.L   #HEALTH_PACK_W,   D3      ; Width
000029CC  2839 0000309C           2567      MOVE.L  HEALTH_Y,    D4 
000029D2  0484 0000000C           2568      SUB.L   #HEALTH_PACK_H,   D4      ; Height
000029D8                          2569      
000029D8                          2570      ; Draw Enemy    
000029D8  103C 0057               2571      MOVE.B  #87,        D0          ; Draw Enemy
000029DC  4E4F                    2572      TRAP    #15                     ; Trap (Perform action)
000029DE  4E75                    2573      RTS                             ; Return to subroutine
000029E0                          2574  
000029E0                          2575  DRAW_HEALTHPACK_DONE:
000029E0  23FC FFFFFFFF 0000309C  2576      MOVE.L  #-1, HEALTH_Y
000029EA  4E75                    2577      RTS
000029EC                          2578  
000029EC                          2579  DRAW_FLOOR:
000029EC                          2580      ; Set Pixel Colors
000029EC  223C 00566D19           2581      MOVE.L  #GREEN,     D1          ; Set Background color
000029F2  103C 0050               2582      MOVE.B  #80,        D0          ; Task for Background Color
000029F6  4E4F                    2583      TRAP    #15                     ; Trap (Perform action)
000029F8                          2584  
000029F8  223C 00566D19           2585      MOVE.L  #GREEN,     D1
000029FE  103C 0051               2586      MOVE.B  #81,        D0
00002A02  4E4F                    2587      TRAP    #15
00002A04                          2588  
00002A04                          2589      
00002A04                          2590      ; Set X, Y, X2, and Y2
00002A04  7200                    2591      MOVE.L  #0,   D1          ; X
00002A06  243C 000000F1           2592      MOVE.L  #241,  D2          ; Y
00002A0C  263C 00000280           2593      MOVE.L  #640,   D3           
00002A12  283C 000001E0           2594      MOVE.L  #480,   D4 
00002A18                          2595      
00002A18                          2596      ; Draw grass
00002A18  103C 0057               2597      MOVE.B  #87,        D0          ; Draw Line
00002A1C  4E4F                    2598      TRAP    #15                     ; Trap (Perform action)
00002A1E                          2599  
00002A1E                          2600      ; Set Pixel Colors
00002A1E  223C 0019506D           2601      MOVE.L  #BROWN,     D1          ; Set Background color
00002A24  103C 0050               2602      MOVE.B  #80,        D0          ; Task for Background Color
00002A28  4E4F                    2603      TRAP    #15                     ; Trap (Perform action)
00002A2A                          2604  
00002A2A  223C 0019506D           2605      MOVE.L  #BROWN,     D1
00002A30  103C 0051               2606      MOVE.B  #81,        D0
00002A34  4E4F                    2607      TRAP    #15
00002A36                          2608  
00002A36  45F9 0000305C           2609      LEA     LEVELS,      A2
00002A3C  2A39 0000307E           2610      MOVE.L  PLAYER_SCORE,   D5
00002A42                          2611      ;CMP.L   (A2)+,       D5
00002A42                          2612      ;BGT     DRAW_FLOOR_L5
00002A42                          2613      ;CMP.L   (A2)+,       D5
00002A42                          2614      ;BGT     DRAW_FLOOR_L4
00002A42                          2615      ;CMP.L   (A2)+,       D5
00002A42                          2616      ;BGT     DRAW_FLOOR_L3
00002A42                          2617      ;CMP.L   (A2)+,       D5
00002A42                          2618      ;BGT     DRAW_FLOOR_L2
00002A42  6000 0074               2619      BRA     DRAW_FLOOR_L1
00002A46                          2620  
00002A46                          2621  DRAW_FLOOR_L5:
00002A46  33FC 000C 00003136      2622      MOVE.W  #12,SCALER
00002A4E  243C 000001E0           2623      MOVE.L  #480,   D2          ; Y
00002A54                          2624      ;MOVE.L  #135, FLYINGENEMY_Y
00002A54                          2625      ;MOVE.W  #40, FLYENEMY_HEIGHT
00002A54                          2626      ;MOVE.W  #65, FLYENEMY_WIDTH
00002A54                          2627      ;MOVE.W  #40, ENEMY_HEIGHT
00002A54                          2628      ;MOVE.W  #40, ENEMY_WIDTH
00002A54  6000 006C               2629      BRA     DRAWDIRT
00002A58                          2630      
00002A58                          2631  DRAW_FLOOR_L4:
00002A58  33FC 000A 00003136      2632      MOVE.W  #10,SCALER
00002A60  243C 000001E0           2633      MOVE.L  #480,   D2          ; Y
00002A66                          2634      ;MOVE.L  #140, FLYINGENEMY_Y
00002A66                          2635      ;MOVE.W  #45, FLYENEMY_HEIGHT
00002A66                          2636      ;MOVE.W  #55, FLYENEMY_WIDTH
00002A66                          2637      ;MOVE.W  #30, ENEMY_HEIGHT
00002A66                          2638      ;MOVE.W  #30, ENEMY_WIDTH
00002A66  6000 005A               2639      BRA     DRAWDIRT
00002A6A                          2640  DRAW_FLOOR_L3:
00002A6A  33FC 0008 00003136      2641      MOVE.W  #8,SCALER
00002A72  243C 000001AE           2642      MOVE.L  #430,   D2          ; Y
00002A78                          2643      ;MOVE.L  #160, FLYINGENEMY_Y
00002A78                          2644      ;MOVE.W  #25, FLYENEMY_HEIGHT
00002A78                          2645      ;MOVE.W  #35, FLYENEMY_WIDTH
00002A78                          2646      ;MOVE.W  #25, ENEMY_HEIGHT
00002A78                          2647      ;MOVE.W  #25, ENEMY_WIDTH
00002A78  6000 0048               2648      BRA     DRAWDIRT
00002A7C                          2649  DRAW_FLOOR_L2:
00002A7C  33FC 0006 00003136      2650      MOVE.W  #6,SCALER
00002A84  243C 0000014A           2651      MOVE.L  #330,   D2          ; Y
00002A8A  23FC 000000AA 000030A4  2652      MOVE.L  #170, FLYINGENEMY_Y
00002A94  33FC 000F 000030E6      2653      MOVE.W  #15, FLYENEMY_HEIGHT
00002A9C  33FC 0019 000030E4      2654      MOVE.W  #25, FLYENEMY_WIDTH
00002AA4  33FC 000F 000030E2      2655      MOVE.W  #15, ENEMY_HEIGHT
00002AAC  33FC 000F 000030E0      2656      MOVE.W  #15, ENEMY_WIDTH
00002AB4                          2657  
00002AB4  6000 000C               2658      BRA     DRAWDIRT
00002AB8                          2659  DRAW_FLOOR_L1:
00002AB8  243C 00000115           2660      MOVE.L  #277,   D2          ; Y
00002ABE  6000 0002               2661      BRA     DRAWDIRT
00002AC2                          2662  DRAWDIRT:
00002AC2                          2663      ; Set X, Y, X2, and Y2
00002AC2  7200                    2664      MOVE.L  #0,   D1          ; X
00002AC4  263C 00000280           2665      MOVE.L  #640,   D3           
00002ACA  283C 000001E0           2666      MOVE.L  #480,   D4 
00002AD0                          2667      
00002AD0                          2668      ; Draw Dirt
00002AD0  103C 0057               2669      MOVE.B  #87,        D0          ; Draw Line
00002AD4  4E4F                    2670      TRAP    #15                     ; Trap (Perform action)
00002AD6                          2671  
00002AD6                          2672  
00002AD6                          2673      ; Reset Pixel Colors
00002AD6  7200                    2674      MOVE.L  #$00000000,     D1          ; Set Background color
00002AD8  103C 0050               2675      MOVE.B  #80,        D0          ; Task for Background Color
00002ADC  4E4F                    2676      TRAP    #15                     ; Trap (Perform action)
00002ADE                          2677  
00002ADE                          2678      ; Reset Pixel Colors
00002ADE  7200                    2679      MOVE.L  #$00000000,     D1          ; Set Background color
00002AE0  103C 0051               2680      MOVE.B  #81,        D0          ; Task for Background Color
00002AE4  4E4F                    2681      TRAP    #15                     ; Trap (Perform action)
00002AE6                          2682  
00002AE6  4E75                    2683      RTS                             ; Return to subroutine
00002AE8                          2684  
00002AE8                          2685  CHECK_COLLISIONS:
00002AE8                          2686  
00002AE8  4281                    2687      CLR.L   D1                      ; Clear D1
00002AEA  4282                    2688      CLR.L   D2                      ; Clear D2
00002AEC                          2689  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
00002AEC  2239 00003076           2690      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00002AF2  D239 000030DD           2691      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002AF8  2439 00003090           2692      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00002AFE  B481                    2693      CMP.L   D1,         D2          ; Do the Overlap ?
00002B00  6F00 0006               2694      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00002B04  6000 004C               2695      BRA     CHECK_FLYENEMY_COLLISIONS
00002B08                          2696  
00002B08                          2697  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00002B08  2239 00003076           2698      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00002B0E  2439 00003090           2699      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00002B14  D479 000030E0           2700      ADD.W   ENEMY_WIDTH,D2          ; Set Enemy width X + Width
00002B1A  B481                    2701      CMP.L   D1,         D2          ; Do they OverLap ?
00002B1C  6C00 0006               2702      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002B20  6000 0030               2703      BRA     CHECK_FLYENEMY_COLLISIONS  
00002B24                          2704  
00002B24                          2705  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00002B24  2239 0000307A           2706      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002B2A  2439 00003094           2707      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002B30  D478 000C               2708      ADD.W   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00002B34  B481                    2709      CMP.L   D1,         D2          ; Do they Overlap ?
00002B36  6F00 0006               2710      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00002B3A  6000 0016               2711      BRA     CHECK_FLYENEMY_COLLISIONS
00002B3E                          2712  
00002B3E                          2713  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00002B3E  D238 000C               2714      ADD.B   PLYR_H_INIT,D1          ; Add Player Height to D1
00002B42  2439 00003094           2715      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002B48  B481                    2716      CMP.L   D1,         D2          ; Do they OverLap ?
00002B4A  6C00 030C               2717      BGE     ENEMYCOLLISION               ; Collision !
00002B4E  6000 0002               2718      BRA     CHECK_FLYENEMY_COLLISIONS
00002B52                          2719  
00002B52                          2720  CHECK_FLYENEMY_COLLISIONS:
00002B52  4281                    2721      CLR.L   D1                      ; Clear D1
00002B54  4282                    2722      CLR.L   D2                      ; Clear D2
00002B56                          2723  PLX_LTE_TO_FLYENEMY_X_PLUS_W:
00002B56  2239 00003076           2724      MOVE.L  PLAYER_X,   D1
00002B5C  D239 000030DD           2725      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002B62  2439 000030A0           2726      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002B68  B481                    2727      CMP.L   D1,         D2                          ; Do the Overlap ?
00002B6A  6F00 0006               2728      BLE     PLX_PLUS_W_LTE_TO_FLYENEMY_X      ; Less than or Equal ?
00002B6E  6000 0050               2729      BRA     CHECK_HEALTH_COLLISIONS
00002B72                          2730  
00002B72                          2731  PLX_PLUS_W_LTE_TO_FLYENEMY_X:           ; Check player is not  
00002B72  2239 00003076           2732      MOVE.L  PLAYER_X,   D1
00002B78  2439 000030A0           2733      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002B7E  D479 000030E4           2734      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002B84  B481                    2735      CMP.L   D1,         D2                  ; Do they OverLap ?
00002B86  6C00 0006               2736      BGE     PLY_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002B8A  6000 0034               2737      BRA     CHECK_HEALTH_COLLISIONS
00002B8E                          2738  
00002B8E                          2739  PLY_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002B8E  2239 0000307A           2740      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002B94  2439 000030A4           2741      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002B9A  D479 000030E6           2742      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002BA0  B481                    2743      CMP.L   D1,         D2          ; Do they Overlap ?
00002BA2  6C00 0006               2744      BGE     PLY_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002BA6  6000 0018               2745      BRA     CHECK_HEALTH_COLLISIONS
00002BAA                          2746  
00002BAA                          2747  PLY_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002BAA  D239 000030DE           2748      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00002BB0  2439 000030A4           2749      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002BB6  B481                    2750      CMP.L   D1,         D2          ; Do they OverLap ?
00002BB8  6F00 029E               2751      BLE     ENEMYCOLLISION               ; Collision !
00002BBC  6000 0002               2752      BRA     CHECK_HEALTH_COLLISIONS
00002BC0                          2753  
00002BC0                          2754  CHECK_HEALTH_COLLISIONS:
00002BC0  4281                    2755      CLR.L   D1                      ; Clear D1
00002BC2  4282                    2756      CLR.L   D2                      ; Clear D2
00002BC4                          2757  PLX_LTE_TO_HEALTH_X_PLUS_W:
00002BC4  2239 00003076           2758      MOVE.L  PLAYER_X,   D1
00002BCA  D239 000030DD           2759      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002BD0  2439 00003098           2760      MOVE.L  HEALTH_X,    D2                    ; Move Enemy X to D2
00002BD6  B481                    2761      CMP.L   D1,         D2                          ; Do the Overlap ?
00002BD8  6F00 0006               2762      BLE     PLX_PLUS_W_LTE_TO_HEALTH_X      ; Less than or Equal ?
00002BDC  6000 0050               2763      BRA     CHECK_ATTACK_COLLISIONS
00002BE0                          2764  
00002BE0                          2765  PLX_PLUS_W_LTE_TO_HEALTH_X:           ; Check player is not  
00002BE0  2239 00003076           2766      MOVE.L  PLAYER_X,   D1
00002BE6  2439 00003098           2767      MOVE.L  HEALTH_X,    D2            ; Move Enemy X to D2
00002BEC  0682 0000000C           2768      ADD.L   #HEALTH_PACK_W,  D2                    ; Set Enemy width X + Width
00002BF2  B481                    2769      CMP.L   D1,         D2                  ; Do they OverLap ?
00002BF4  6C00 0006               2770      BGE     PLY_LTE_TO_HEALTH_Y_PLUS_H  ; Less than or Equal
00002BF8  6000 0034               2771      BRA     CHECK_ATTACK_COLLISIONS
00002BFC                          2772  PLY_LTE_TO_HEALTH_Y_PLUS_H:     
00002BFC  2239 0000307A           2773      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002C02  2439 0000309C           2774      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Y to D2
00002C08  0682 0000000C           2775      ADD.L   #HEALTH_PACK_H,D2          ; Set Enemy Height to D2
00002C0E  B481                    2776      CMP.L   D1,         D2          ; Do they Overlap ?
00002C10  6C00 0006               2777      BGE     PLY_PLUS_H_LTE_TO_HEALTH_Y  ; Less than or Equal
00002C14  6000 0018               2778      BRA     CHECK_ATTACK_COLLISIONS
00002C18                          2779  
00002C18                          2780  PLY_PLUS_H_LTE_TO_HEALTH_Y:     ; Less than or Equal ?
00002C18  D239 000030DE           2781      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00002C1E  2439 0000309C           2782      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Height to D2  
00002C24  B481                    2783      CMP.L   D1,         D2          ; Do they OverLap ?
00002C26  6F00 0276               2784      BLE     HEALTH_COLLISION               ; Collision !
00002C2A  6000 0002               2785      BRA     CHECK_ATTACK_COLLISIONS
00002C2E                          2786  
00002C2E                          2787  CHECK_ATTACK_COLLISIONS:
00002C2E  4281                    2788      CLR.L   D1                      ; Clear D1
00002C30  4282                    2789      CLR.L   D2                      ; Clear D2
00002C32                          2790  ATTACK_X_LTE_TO_ENEMY_X_PLUS_W:
00002C32  2239 000030BC           2791      MOVE.L  ATTACK_X,   D1
00002C38  0681 00000023           2792      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002C3E  2439 00003090           2793      MOVE.L  ENEMY_X,    D2                    ; Move Enemy X to D2
00002C44  B481                    2794      CMP.L   D1,         D2                          ; Do the Overlap ?
00002C46  6F00 0006               2795      BLE     ATTACK_PLUS_W_LTE_TO_ENMY_X      ; Less than or Equal ?
00002C4A  6000 0050               2796      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002C4E                          2797  
00002C4E                          2798  ATTACK_PLUS_W_LTE_TO_ENMY_X:           ; Check player is not  
00002C4E  2239 000030BC           2799      MOVE.L  ATTACK_X,   D1
00002C54  2439 00003090           2800      MOVE.L  ENEMY_X,    D2            ; Move Enemy X to D2
00002C5A  D479 000030E0           2801      ADD.W   ENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002C60  B481                    2802      CMP.L   D1,         D2                  ; Do they OverLap ?
00002C62  6C00 0006               2803      BGE     ATK_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002C66  6000 0034               2804      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002C6A                          2805  
00002C6A                          2806  ATK_LTE_TO_ENEMY_Y_PLUS_H:     
00002C6A  2239 000030C0           2807      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002C70  2439 00003094           2808      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002C76  D479 000030E2           2809      ADD.W   ENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002C7C  B481                    2810      CMP.L   D1,         D2          ; Do they Overlap ?
00002C7E  6C00 0006               2811      BGE     ATK_PLUS_H_LTE_TO_ATTACK_Y  ; Less than or Equal
00002C82  6000 0018               2812      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002C86                          2813  
00002C86                          2814  ATK_PLUS_H_LTE_TO_ATTACK_Y:     ; Less than or Equal ?
00002C86  0681 00000014           2815      ADD.L   #ATTACK_HEIGHT,D1          ; Add Player Height to D1
00002C8C  2439 00003094           2816      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002C92  B481                    2817      CMP.L   D1,         D2          ; Do they OverLap ?
00002C94  6F00 0150               2818      BLE     ATTACK_COLLISION               ; Collision !
00002C98  6000 0002               2819      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002C9C                          2820  
00002C9C                          2821  CHECK_ATTACK_FLY_COLLISIONS:
00002C9C  4281                    2822      CLR.L   D1                      ; Clear D1
00002C9E  4282                    2823      CLR.L   D2                      ; Clear D2
00002CA0                          2824  ATK_X_LTE_TO_FLYENEMY_X_PLUS_W:
00002CA0  2239 000030BC           2825      MOVE.L  ATTACK_X,   D1
00002CA6  0681 00000023           2826      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002CAC  2439 000030A0           2827      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002CB2  B481                    2828      CMP.L   D1,         D2                          ; Do the Overlap ?
00002CB4  6F00 0006               2829      BLE     ATTACK_PLUS_W_LTE_TO_FLYENMY_X     ; Less than or Equal ?
00002CB8  6000 0050               2830      BRA     CHECK_THROW_COLLISION
00002CBC                          2831  
00002CBC                          2832  ATTACK_PLUS_W_LTE_TO_FLYENMY_X:           ; Check player is not  
00002CBC  2239 000030BC           2833      MOVE.L  ATTACK_X,   D1
00002CC2  2439 000030A0           2834      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002CC8  D479 000030E4           2835      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002CCE  B481                    2836      CMP.L   D1,         D2                  ; Do they OverLap ?
00002CD0  6C00 0006               2837      BGE     ATK_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002CD4  6000 0034               2838      BRA     CHECK_THROW_COLLISION
00002CD8                          2839  
00002CD8                          2840  ATK_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002CD8  2239 000030C0           2841      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002CDE  2439 000030A4           2842      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002CE4  D479 000030E6           2843      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002CEA  B481                    2844      CMP.L   D1,         D2          ; Do they Overlap ?
00002CEC  6C00 0006               2845      BGE     ATK_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002CF0  6000 0018               2846      BRA     CHECK_THROW_COLLISION
00002CF4                          2847  
00002CF4                          2848  ATK_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002CF4  0681 00000014           2849      ADD.L   #ATTACK_HEIGHT,D1          ; Add Player Height to D1
00002CFA  2439 000030A4           2850      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002D00  B481                    2851      CMP.L   D1,         D2          ; Do they OverLap ?
00002D02  6F00 010A               2852      BLE     ATTACK_FLY_COLLISION               ; Collision !
00002D06  6000 0002               2853      BRA     CHECK_THROW_COLLISION
00002D0A                          2854  
00002D0A                          2855  CHECK_THROW_COLLISION:
00002D0A  4281                    2856      CLR.L   D1                      ; Clear D1
00002D0C  4282                    2857      CLR.L   D2                      ; Clear D2
00002D0E                          2858  THROW_X_LTE_TO_ENEMY_X_PLUS_W:
00002D0E  2239 000030CA           2859      MOVE.L  THROW_X,   D1
00002D14  0681 00000023           2860      ADD.L   #THROW_WIDTH,D1          ; Move Player Width to D1
00002D1A  2439 00003090           2861      MOVE.L  ENEMY_X,    D2                    ; Move Enemy X to D2
00002D20  B481                    2862      CMP.L   D1,         D2                          ; Do the Overlap ?
00002D22  6F00 0006               2863      BLE     THROW_PLUS_W_LTE_TO_ENMY_X      ; Less than or Equal ?
00002D26  6000 0050               2864      BRA     CHECK_THROW_FLY_COLLISIONS
00002D2A                          2865  
00002D2A                          2866  THROW_PLUS_W_LTE_TO_ENMY_X:           ; Check player is not  
00002D2A  2239 000030CA           2867      MOVE.L  THROW_X,   D1
00002D30  2439 00003090           2868      MOVE.L  ENEMY_X,    D2            ; Move Enemy X to D2
00002D36  D479 000030E0           2869      ADD.W   ENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002D3C  B481                    2870      CMP.L   D1,         D2                  ; Do they OverLap ?
00002D3E  6C00 0006               2871      BGE     TRW_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002D42  6000 0034               2872      BRA     CHECK_THROW_FLY_COLLISIONS
00002D46                          2873  
00002D46                          2874  TRW_LTE_TO_ENEMY_Y_PLUS_H:     
00002D46  2239 000030CE           2875      MOVE.L  THROW_Y,   D1          ; Move Player Y to D1
00002D4C  2439 00003094           2876      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002D52  D479 000030E2           2877      ADD.W   ENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002D58  B481                    2878      CMP.L   D1,         D2          ; Do they Overlap ?
00002D5A  6C00 0006               2879      BGE     TRW_PLUS_H_LTE_TO_THROW_Y  ; Less than or Equal
00002D5E  6000 0018               2880      BRA     CHECK_THROW_FLY_COLLISIONS
00002D62                          2881  
00002D62                          2882  TRW_PLUS_H_LTE_TO_THROW_Y:     ; Less than or Equal ?
00002D62  0681 0000000F           2883      ADD.L   #THRW_H_INIT,D1          ; Add Player Height to D1
00002D68  2439 00003094           2884      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002D6E  B481                    2885      CMP.L   D1,         D2          ; Do they OverLap ?
00002D70  6F00 0074               2886      BLE     ATTACK_COLLISION               ; Collision !
00002D74  6000 0002               2887      BRA     CHECK_THROW_FLY_COLLISIONS
00002D78                          2888  
00002D78                          2889  CHECK_THROW_FLY_COLLISIONS:
00002D78  4281                    2890      CLR.L   D1                      ; Clear D1
00002D7A  4282                    2891      CLR.L   D2                      ; Clear D2
00002D7C                          2892  THROW_X_LTE_TO_FLYENEMY_X_PLUS_W:
00002D7C  2239 000030CA           2893      MOVE.L  THROW_X,   D1
00002D82  0681 0000000F           2894      ADD.L   #THRW_W_INIT,D1          ; Move Player Width to D1
00002D88  2439 000030A0           2895      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002D8E  B481                    2896      CMP.L   D1,         D2                          ; Do the Overlap ?
00002D90  6F00 0006               2897      BLE     THROW_PLUS_W_LTE_TO_FLYENMY_X     ; Less than or Equal ?
00002D94  6000 00A0               2898      BRA     COLLISION_CHECK_DONE
00002D98                          2899  
00002D98                          2900  THROW_PLUS_W_LTE_TO_FLYENMY_X:           ; Check player is not  
00002D98  2239 000030CA           2901      MOVE.L  THROW_X,   D1
00002D9E  2439 000030A0           2902      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002DA4  D479 000030E4           2903      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002DAA  B481                    2904      CMP.L   D1,         D2                  ; Do they OverLap ?
00002DAC  6C00 0006               2905      BGE     TRW_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002DB0  6000 0084               2906      BRA     COLLISION_CHECK_DONE
00002DB4                          2907  
00002DB4                          2908  TRW_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002DB4  2239 000030CE           2909      MOVE.L  THROW_Y,   D1          ; Move Player Y to D1
00002DBA  2439 000030A4           2910      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002DC0  D479 000030E6           2911      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002DC6  B481                    2912      CMP.L   D1,         D2          ; Do they Overlap ?
00002DC8  6C00 0006               2913      BGE     TRW_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002DCC  6000 0068               2914      BRA     COLLISION_CHECK_DONE
00002DD0                          2915  
00002DD0                          2916  TRW_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002DD0  0681 0000000F           2917      ADD.L   #THRW_H_INIT,D1          ; Add Player Height to D1
00002DD6  2439 000030A4           2918      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002DDC  B481                    2919      CMP.L   D1,         D2          ; Do they OverLap ?
00002DDE  6F00 002E               2920      BLE     ATTACK_FLY_COLLISION               ; Collision !
00002DE2  6000 0052               2921      BRA     COLLISION_CHECK_DONE
00002DE6                          2922  
00002DE6                          2923  
00002DE6                          2924  ;---
00002DE6                          2925  
00002DE6                          2926  ATTACK_COLLISION:
00002DE6  4A39 000030DB           2927      TST.B   ENEMY_HIT
00002DEC  6600 00EE               2928      BNE     STILL_COLLIDED
00002DF0  6100 F9FC               2929      BSR     PLAY_HIT
00002DF4  23FC 00000190 00003094  2930      MOVE.L  #400, ENEMY_Y
00002DFE  13FC 0001 000030DB      2931      MOVE.B  #01,  ENEMY_HIT
00002E06  5239 000030DA           2932      ADDI.B  #1,   ENEMIES_DEFEATED
00002E0C  4E75                    2933      RTS
00002E0E                          2934  
00002E0E                          2935  ATTACK_FLY_COLLISION:
00002E0E  4A39 000030DC           2936      TST.B   FLYENEMY_HIT
00002E14  6600 00C6               2937      BNE     STILL_COLLIDED
00002E18  6100 F9D4               2938      BSR     PLAY_HIT
00002E1C  23FC 00000190 000030A4  2939      MOVE.L  #400, FLYINGENEMY_Y
00002E26  13FC 0001 000030DC      2940      MOVE.B  #01,  FLYENEMY_HIT
00002E2E  5239 000030DA           2941      ADDI.B  #1,   ENEMIES_DEFEATED
00002E34  4E75                    2942      RTS
00002E36                          2943  
00002E36                          2944  COLLISION_CHECK_DONE:               ; No Collision Update points
00002E36  4239 00003053           2945      CLR.B   IN_ENEMY
00002E3C  4239 00003054           2946      CLR.B   IN_HPACK
00002E42  4281                    2947      CLR.L   D1
00002E44  1239 000030B5           2948      MOVE.B  POINTS,    D1          ; Move points upgrade to D1
00002E4A  D2B9 0000307E           2949      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00002E50  23C1 0000307E           2950      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00002E56  4E75                    2951      RTS                             ; Return to subroutine
00002E58                          2952  
00002E58                          2953  
00002E58                          2954  ENEMYCOLLISION:
00002E58  0C39 0001 00003053      2955      CMP.B     #$01, IN_ENEMY
00002E60  6700 007A               2956      BEQ     STILL_COLLIDED
00002E64  0C39 0001 00003055      2957      CMP.B   #01, DRAW_HEALTHPACKS
00002E6C  6600 F4B0               2958      BNE     RESET_HEALTH_POSITION
00002E70  13FC 0001 00003055      2959      MOVE.B  #01, DRAW_HEALTHPACKS 
00002E78  13FC 0001 00003056      2960      MOVE.B  #01, SPAWN_HEALTHPACKS 
00002E80  5339 000030B4           2961      SUB.B   #1, LIVES
00002E86  13FC 0001 00003053      2962      MOVE.B  #$01, IN_ENEMY
00002E8E  4A39 000030B4           2963      TST.B   LIVES
00002E94  6700 0048               2964      BEQ     GAME_OVER
00002E98  6100 F8FA               2965      BSR     PLAY_HITHURT               ; Play Opps Wav
00002E9C  4E75                    2966      RTS                             ; Return to subroutine
00002E9E                          2967  
00002E9E                          2968  HEALTH_COLLISION:
00002E9E  0C39 0001 00003054      2969      CMP.B     #$01, IN_HPACK
00002EA6  6700 0034               2970      BEQ     STILL_COLLIDED
00002EAA  13FC 0000 00003055      2971      MOVE.B  #00, DRAW_HEALTHPACKS
00002EB2  6100 F8FE               2972      BSR     PLAY_POWERUP               ; Play Opps Wav
00002EB6  5239 000030B4           2973      ADD.B   #1, LIVES
00002EBC  0C39 0005 000030B4      2974      CMP.B   #05, LIVES
00002EC4  6C00 000C               2975      BGE     STOP_HPACK_SPAWN
00002EC8  13FC 0001 00003054      2976      MOVE.B  #$01, IN_HPACK
00002ED0  4E75                    2977      RTS
00002ED2                          2978  
00002ED2                          2979  STOP_HPACK_SPAWN:
00002ED2  13FC 0000 00003056      2980      MOVE.B  #00, SPAWN_HEALTHPACKS
00002EDA  4E75                    2981      RTS
00002EDC                          2982  
00002EDC                          2983  STILL_COLLIDED:
00002EDC  4E75                    2984      RTS
00002EDE                          2985  
00002EDE                          2986  GAME_OVER:
00002EDE  6100 E5A4               2987      BSR     DRAW                    ; Redraw the Scene
00002EE2  103C 005E               2988      MOVE.B  #TC_REDRAW,        D0
00002EE6  4E4F                    2989      TRAP    #15
00002EE8  6100 F86E               2990      BSR     PLAY_GAMEOVER
00002EEC  4281                    2991      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002EEE                          2992  
00002EEE  223C 00FFFFFF           2993      MOVE.L  #WHITE,     D1
00002EF4  103C 0015               2994      MOVE.B  #21,        D0          ; Set Text Color
00002EF8  243C 01130005           2995      MOVE.L  #$01130005, D2
00002EFE  4E4F                    2996      TRAP    #15                     ; Trap (Perform action)
00002F00                          2997  
00002F00  7200                    2998      MOVE.L  #BLACK,     D1
00002F02  103C 0051               2999      MOVE.B  #81,        D0          ; Set Text Color
00002F06  4E4F                    3000      TRAP    #15                     ; Trap (Perform action)
00002F08                          3001  
00002F08  103C 000B               3002      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F0C  323C FF00               3003      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00002F10  4E4F                    3004      TRAP    #15                     ; Trap (Perform action)
00002F12                          3005  
00002F12  103C 000B               3006      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F16  323C 1005               3007      MOVE.W  #$1005,     D1          ; Col 10, Row 03
00002F1A  4E4F                    3008      TRAP    #15                     ; Trap (Perform action)
00002F1C  43F9 00003008           3009      LEA     GAMEOVER_MSG,A1        ; Game Over Message
00002F22  303C 000D               3010      MOVE    #13,        D0          ; No Line feed
00002F26  4E4F                    3011      TRAP    #15                     ; Trap (Perform action)
00002F28                          3012  
00002F28                          3013      ; Player Score Message
00002F28  103C 000B               3014      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F2C  323C 0F06               3015      MOVE.W  #$0F06,     D1          ; Col 02, Row 01
00002F30  4E4F                    3016      TRAP    #15                     ; Trap (Perform action)
00002F32  43F9 00002FA2           3017      LEA     SCORE_MSG,  A1          ; Score Message
00002F38  303C 000D               3018      MOVE    #13,        D0          ; No Line feed
00002F3C  4E4F                    3019      TRAP    #15                     ; Trap (Perform action)
00002F3E                          3020  
00002F3E                          3021      ; Player Score Value
00002F3E  103C 000B               3022      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F42  323C 1706               3023      MOVE.W  #$1706,     D1          ; Col 09, Row 01
00002F46  4E4F                    3024      TRAP    #15                     ; Trap (Perform action)
00002F48  103C 0003               3025      MOVE.B  #03,        D0          ; Display number at D1.L
00002F4C  2239 0000307E           3026      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00002F52  4E4F                    3027      TRAP    #15                     ; Trap (Perform action)
00002F54                          3028      
00002F54                          3029  
00002F54  223C 00FFFFFF           3030      MOVE.L  #WHITE,     D1
00002F5A  103C 0015               3031      MOVE.B  #21,        D0          ; Set Text Color
00002F5E  243C 03140000           3032      MOVE.L  #$03140000, D2
00002F64  4E4F                    3033      TRAP    #15                     ; Trap (Perform action)
00002F66                          3034  
00002F66                          3035  
00002F66                          3036      ; Restart
00002F66  103C 000B               3037      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F6A  323C 0B08               3038      MOVE.W  #$0B08,     D1          ; Col 09, Row 01
00002F6E  4E4F                    3039      TRAP    #15                     ; Trap (Perform action)
00002F70  43F9 00003013           3040      LEA     RESTART_MSG,  A1          ; Score Message
00002F76  303C 000D               3041      MOVE    #13,        D0          ; No Line feed
00002F7A  4E4F                    3042      TRAP    #15                     ; Trap (Perform action)
00002F7C                          3043  
00002F7C                          3044      
00002F7C  103C 005E               3045      MOVE.B  #TC_REDRAW,        D0
00002F80  4E4F                    3046      TRAP    #15
00002F82                          3047  
00002F82                          3048  INPUTLOOP:
00002F82  6100 F098               3049      BSR     BATTLEINPUT
00002F86  60FA                    3050      BRA     INPUTLOOP
00002F88                          3051  
00002F88                          3052  EXIT:
00002F88                          3053      
00002F88  103C 000B               3054      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002F8C  323C FF00               3055      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00002F90  4E4F                    3056      TRAP    #15                     ; Trap (Perform action)
00002F92                          3057  
00002F92  103C 005E               3058      MOVE.B  #TC_REDRAW,        D0
00002F96  4E4F                    3059      TRAP    #15
00002F98                          3060  
00002F98  103C 0009               3061      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00002F9C  4E4F                    3062      TRAP    #15                     ; Trap (Perform action)
00002F9E  FFFF FFFF               3063      SIMHALT
00002FA2                          3064  
00002FA2= 53 63 6F 72 65 20 ...   3065  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00002FAB= 4B 65 79 43 6F 64 ...   3066  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
00002FB6= 4A 75 6D 70 2E 2E ...   3067  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00002FBF                          3068  
00002FBF= 49 64 6C 65 2E 2E ...   3069  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00002FC8= 55 70 64 61 74 65 ...   3070  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
00002FD3= 44 72 61 77 2E 2E ...   3071  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00002FDC                          3072  
00002FDC= 58 3A 00                3073  X_MSG           DC.B    'X:', 0             ; X Position Message
00002FDF= 59 3A 00                3074  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00002FE2= 56 3A 00                3075  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
00002FE5= 44 52 41 57 00          3076  VARMSG           DC.B    'DRAW', 0             ; Gravity Position Message
00002FEA= 45 4E 45 4D 49 45 ...   3077  GND_MSG         DC.B    'ENEMIES DEFEATED:', 0           ; On Ground Position Message
00002FFC                          3078  
00002FFC= 45 78 69 74 69 6E ...   3079  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00003008= 47 61 6D 65 20 4F ...   3080  GAMEOVER_MSG    DC.B    'Game Over!', 0      ; Game Over Message
00003013= 50 72 65 73 73 20 ...   3081  RESTART_MSG    DC.B    'Press R to play again', 0      ; Game Over Message
00003029= 23 23 00                3082  TREET          DC.B     '##',0
0000302C                          3083  
0000302C= 45 6E 74 65 72 20 ...   3084  PRESSSTART      DC.B    'Enter 1 to start',0
0000303D= 41 4E 54 20 44 45 ...   3085  TITLEMSG        DC.B    'ANT DEFENDER',0
0000304A= 4C 69 76 65 73 20 ...   3086  LIVES_MSG       DC.B    'Lives : ',0        ; lives message
00003053                          3087  
00003053= 00                      3088  IN_ENEMY        DC.B      00                  ; marker for if the player is in the enemy
00003054= 00                      3089  IN_HPACK        DC.B      00                  ; marker for if the player is in the health pack
00003055= 00                      3090  DRAW_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are showing
00003056= 00                      3091  SPAWN_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are spawning
00003057                          3092  
00003058= 07D0                    3093  LEVEL_02        DC.W    2000
0000305A= 2710                    3094  LEVEL_03        DC.W    10000
0000305C                          3095  
0000305C= 00001B58 00000FA0 ...   3096  LEVELS:         DC.L    7000,4000,2000,1000
0000306C                          3097  
0000306C                          3098  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
0000306E                          3099  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00003070                          3100  
00003070                          3101  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00003074                          3102  LAST_KEY        DS.W    01  ; Reserve Space for Current Key Pressed
00003076                          3103  
00003076                          3104  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
0000307A                          3105  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
0000307E                          3106  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00003082                          3107  
00003082                          3108  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00003086                          3109  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
0000308A                          3110  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
0000308E                          3111  
0000308E                          3112  ; 1, = left, 0 = right
0000308E                          3113  PLAYER_DIR      DS.B    01  ; Reserve Space for Player Direction
0000308F                          3114  
00003090                          3115  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00003094                          3116  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00003098                          3117  
00003098                          3118  HEALTH_X         DS.L    01  ; Reserve Space for Health+ X Position
0000309C                          3119  HEALTH_Y         DS.L    01  ; Reserve Space for Health Y Position
000030A0                          3120  
000030A0                          3121  FLYINGENEMY_X         DS.L    01  ; Reserve Space for Flying Enemy X Position
000030A4                          3122  FLYINGENEMY_Y         DS.L    01  ; Reserve Space for Flying Enemy Y Position
000030A8                          3123  
000030A8= 000000FF                3124  ENEMYCOLOR        DC.L        $000000FF
000030AC= 00FF0000                3125  FLYENEMYCOLOR     DC.L        $00FF0000
000030B0                          3126  
000030B0                          3127  RANDOM            DS.L        01  ; Reserve Space for Random Number
000030B4= 05                      3128  LIVES             DC.B        05  ; reserves space for player lives
000030B5                          3129   
000030B5= 02                      3130  POINTS            DC.B        02          ; Points added
000030B6                          3131  
000030B6= 00                      3132  CURRENTLYATTACKING   DC.B    00
000030B8= 0000                    3133  ATTACK_COOLDOWN      DC.W    00
000030BA= 0000                    3134  ATTACK_TIME          DC.W    00
000030BC= 00000000                3135  ATTACK_X             DC.L    00
000030C0= 00000000                3136  ATTACK_Y             DC.L    00
000030C4  =00000014               3137  ATTACK_HEIGHT        EQU     20
000030C4  =00000023               3138  ATTACK_WIDTH         EQU     35 
000030C4                          3139  
000030C4= 00                      3140  CURRENTLYTHROWING   DC.B    00
000030C6= 0000                    3141  THROW_COOLDOWN      DC.W    00
000030C8= 0000                    3142  THROW_TIME          DC.W    00
000030CA= 00000000                3143  THROW_X             DC.L    00
000030CE= 00000000                3144  THROW_Y             DC.L    00
000030D2  =00000014               3145  THROW_HEIGHT        EQU     20
000030D2  =00000023               3146  THROW_WIDTH         EQU     35 
000030D2                          3147  THROW_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000030D6                          3148  THROW_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000030DA                          3149  
000030DA= 00                      3150  ENEMIES_DEFEATED     DC.B    00
000030DB= 00                      3151  ENEMY_HIT           DC.B    00
000030DC= 00                      3152  FLYENEMY_HIT        DC.B    00
000030DD                          3153  
000030DD= 0C                      3154  PLAYER_WIDTH      DC.B        12          ; Player Width
000030DE= 0C                      3155  PLAYER_HEIGHT     DC.B        12          ; Player Height
000030DF                          3156  
000030E0= 000C                    3157  ENEMY_WIDTH       DC.W        12          ; Enemy Width
000030E2= 000C                    3158  ENEMY_HEIGHT      DC.W        12          ; Enemy Height
000030E4                          3159  
000030E4= 0014                    3160  FLYENEMY_WIDTH    DC.W        20 
000030E6= 000C                    3161  FLYENEMY_HEIGHT   DC.W        12 
000030E8                          3162  
000030E8                          3163          
000030E8= 6A 75 6D 70 2E 77 ...   3164  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
000030F1= 67 61 6D 65 4F 76 ...   3165  GAMEOVER_WAV         DC.B    'gameOver.wav',0         ; Run Sound
000030FE= 68 69 74 48 75 72 ...   3166  HITHURT_WAV        DC.B    'hitHurt.wav',0        ; Collision Opps
0000310A= 68 69 74 2E 77 61 ...   3167  HIT_WAV        DC.B    'hit.wav',0        ; Collision Opps
00003112= 70 6F 77 65 72 55 ...   3168  POWERUP_WAV        DC.B    'powerUP.wav',0        ; Collision Opps
0000311E= 6C 65 76 65 6C 43 ...   3169  LEVELCHANGE_WAV        DC.B    'levelChange.wav',0        ; Collision Opps
0000312E                          3170  
0000312E= 3A0C                    3171  TRUNK   DC.W    $3A0C
00003130= 00C8                    3172  X   DC.W    200
00003132= 0190                    3173  Y   DC.W    400
00003134= 00C8                    3174  Z   DC.W    200
00003136= 0004                    3175  SCALER DC.W  4
00003138  =00000010               3176  ROWC    EQU    16
00003138= FFB0                    3177  WIDTH   DC.W    $FFB0
0000313A                          3178  
0000313A= 00000000                3179  timer           DC.L    0
0000313E                          3180  
0000313E                          3181      END    START        ; last line of source
0000313E                          3182  -------------------- end include --------------------

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AKEY                41
APPLEH              10
APPLEW              10
APRESSED            1DD8
ARC_DONE            2742
ATK_LTE_TO_ENEMY_Y_PLUS_H  2C6A
ATK_LTE_TO_FLYENEMY_Y_PLUS_H  2CD8
ATK_PLUS_H_LTE_TO_ATTACK_Y  2C86
ATK_PLUS_H_LTE_TO_FLYENEMY_Y  2CF4
ATK_X_LTE_TO_FLYENEMY_X_PLUS_W  2CA0
ATTACKMSG1          189D
ATTACKMSG2          18B9
ATTACK_COLLISION    2DE6
ATTACK_COOLDOWN     30B8
ATTACK_COOLDOWN_SUB  21F0
ATTACK_FLY_COLLISION  2E0E
ATTACK_HEIGHT       14
ATTACK_PLUS_W_LTE_TO_ENMY_X  2C4E
ATTACK_PLUS_W_LTE_TO_FLYENMY_X  2CBC
ATTACK_TIME         30BA
ATTACK_TIME_SUB     21E8
ATTACK_WIDTH        23
ATTACK_X            30BC
ATTACK_X_LTE_TO_ENEMY_X_PLUS_W  2C32
ATTACK_Y            30C0
BATTLE              1146
BATTLEINPUT         201C
BLACK               0
BLUE                FF0000
BROWN               19506D
BULLETH             5
BULLETW             5
CAMERAOFFSETX       1C26
CAMERAOFFSETY       1C2A
CAMERAX             1C2E
CAMERAY             1C32
CAMERAZOOM          1C36
CELLBRX             13EE
CELLBRY             13F2
CELLTLX             13E6
CELLTLY             13EA
CELLXRADIUS         1436
CELLYOFFSET         143E
CELLYRADIUS         143A
CENTERX             11EA
CENTERY             11EE
CHECKINCREMENT      1AAE
CHECK_ATTACK_COLLISIONS  2C2E
CHECK_ATTACK_COOLDOWN  21DA
CHECK_ATTACK_FLY_COLLISIONS  2C9C
CHECK_COLLISIONS    2AE8
CHECK_FLYENEMY_COLLISIONS  2B52
CHECK_HEALTH_COLLISIONS  2BC0
CHECK_THROW_COLLISION  2D0A
CHECK_THROW_DONE    21AC
CHECK_THROW_FLY_COLLISIONS  2D78
CLEARSCREEN         1164
COLLISION           1148
COLLISION_CHECK_DONE  2E36
COLOR1              201808
COLOR2              494320
COLOR3              56864B
COLOR4              7AC687
COLOR5              AFE5D0
COLORRED            463EBD
COMMONINPUT         1CD6
CONTINUE            2336
CRLF                1840
CURRENTHEALTH       11F6
CURRENTHPX          187E
CURRENTKEY          11D8
CURRENTLYATTACKING  30B6
CURRENTLYTHROWING   30C4
CURRENTPTS          11F2
CURRENTSPAWNX       1ADE
CURRENTSPAWNY       1AE2
CURRENT_KEY         3070
DELAY               1FF8
DIRT                4FAD
DKEY                44
DPRESSED            1E02
DRAW                1484
DRAWBATTLE          23B6
DRAWBG              161E
DRAWCELL            16F6
DRAWDIRT            2AC2
DRAWENEMIES         1682
DRAWENEMY           16B2
DRAWHEALTH          1524
DRAWPAUSE           14BC
DRAWPLAYER          164E
DRAWRECT            17B8
DRAWTEXT            157E
DRAWUIRECT          17FA
DRAW_ATTACK         284E
DRAW_BACKGROUND     2486
DRAW_ENEMY          28E2
DRAW_FLOOR          29EC
DRAW_FLOOR_L1       2AB8
DRAW_FLOOR_L2       2A7C
DRAW_FLOOR_L3       2A6A
DRAW_FLOOR_L4       2A58
DRAW_FLOOR_L5       2A46
DRAW_FLYENEMY       2926
DRAW_HEALTHPACK     296A
DRAW_HEALTHPACKS    3055
DRAW_HEALTHPACK_DONE  29E0
DRAW_HILL           23F6
DRAW_MSG            2FD3
DRAW_PLAYER         27FA
DRAW_PLYR_DATA      252E
DRAW_THROW          289E
END                 11B8
ENDCOLLIDE          1A96
ENDCOLLISION        13E4
ENDDRAW             1796
ENDDRAWPAUSE        1522
ENDFOLLOW           1C5C
ENDHEAL             11A6
ENDINITENEMY        1A98
ENDINPUT            1D78
ENDLOOP             1116
ENDMOVEMENT         1E18
ENDMSG              1854
ENDPROCESS          1A94
ENDTOGGLEFULLSCREEN  1832
ENEMIES_DEFEATED    30DA
ENEMY1X             1ABC
ENEMY1Y             1AC0
ENEMY2X             1AC4
ENEMY2Y             1AC8
ENEMY3X             1ACC
ENEMY3Y             1AD0
ENEMY4X             1AD4
ENEMY4Y             1AD8
ENEMYCOLCHECK       1954
ENEMYCOLLIDE        1A8E
ENEMYCOLLISION      2E58
ENEMYCOLOR          30A8
ENEMYDIR            1C24
ENEMYH              C
ENEMYHALFH          6
ENEMYHALFW          8
ENEMYINDEX          1ADC
ENEMYLEFTCOLCHECK   1A6C
ENEMYRIGHTCOLCHECK  1A7A
ENEMYSPAWNTIMER     1AA8
ENEMYTIME           1AA4
ENEMYW              10
ENEMYX              18E8
ENEMYY              18EC
ENEMY_HEIGHT        30E2
ENEMY_HIT           30DB
ENEMY_H_INIT        C
ENEMY_WIDTH         30E0
ENEMY_X             3090
ENEMY_Y             3094
ENMY_H_INIT         C
ENMY_W_INIT         C
ENTERHILL           1452
ENTERKEY            D
ESCAPE              1B
ESCAPEJUSTPRESSED   1D88
ESCAPEKEY           1B
ESCAPEPRESSED       1D7A
EXIT                2F88
EXIT_MSG            2FFC
FIRSTINIT           1004
FLYENEMYCOLOR       30AC
FLYENEMY_HEIGHT     30E6
FLYENEMY_HIT        30DC
FLYENEMY_WIDTH      30E4
FLYINGENEMY_X       30A0
FLYINGENEMY_Y       30A4
FLY_ENMY_H_INIT     C
FLY_ENMY_W_INIT     14
FOLLOWCAM           1C3A
GAME                1FEE
GAMELOOP            1FEE
GAMEOVER_INDEX      0
GAMEOVER_LOAD       2746
GAMEOVER_MSG        3008
GAMEOVER_WAV        30F1
GAME_OVER           2EDE
GETCURRENTENEMY     1B50
GETENEMY1           1B82
GETENEMY2           1B90
GETENEMY3           1B9E
GETENEMY4           1BAC
GND_FALSE           0
GND_MSG             2FEA
GND_TRUE            1
GOFULLSCREEN        1826
GREEN               566D19
HEAL                118A
HEALTHBARLOCY       1884
HEALTHBAROFFSETX    1882
HEALTHBRX           1876
HEALTHBRY           187A
HEALTHMSG           1866
HEALTHROW           1886
HEALTHTLX           186E
HEALTHTLY           1872
HEALTH_COLLISION    2E9E
HEALTH_PACK_H       C
HEALTH_PACK_W       C
HEALTH_X            3098
HEALTH_Y            309C
HEALTIME            1AA6
HITHURT_INDEX       2
HITHURT_LOAD        2782
HITHURT_WAV         30FE
HIT_INDEX           5
HIT_LOAD            27DC
HIT_WAV             310A
IDLE                2744
IDLE_MSG            2FBF
INCREMENT           1AAA
INITALLENEMIES      1AE6
INITDRAW            1452
INITENEMY           18F0
INITENEMYBL         1A32
INITENEMYBR         19FA
INITENEMYTL         198C
INITENEMYTR         19C4
INITIALIZECELL      1202
INITRUN             1E1A
INPUTKEYS           11D1
INPUTLOOP           2F82
INPUTTYPE           1CD4
IN_ENEMY            3053
IN_HPACK            3054
ISFOLLOW            1C38
ISFULLSCREEN        1852
ISPAUSED            11E0
IS_ATTACKING        2842
IS_PLAYER_ON_GND    26AC
IS_THROWING         2892
JMP_INDEX           1
JUMP                2700
JUMP_DONE           2722
JUMP_LOAD           2764
JUMP_MSG            2FB6
JUMP_WAV            30E8
KEY0                30
KEY0JUSTPRESSED     1D9C
KEY0PRESSED         1D8E
KEY1                31
KEY1PRESSED         1DB0
KEY2                32
KEY2PRESSED         1DB8
KEY3                33
KEYCODE_MSG         2FAB
KKEY                4B
LASTKEY             11DC
LAST_KEY            3074
LEVELCHANGE_INDEX   4
LEVELCHANGE_WAV     311E
LEVELS              305C
LEVEL_02            3058
LEVEL_03            305A
LIFEGREEN           44FF44
LIVES               30B4
LIVES_MSG           304A
LKEY                4C
LOOKLEFT            1
LOOKRIGHT           2
LOOP                110C
LVLCHANGE_LOAD      27BE
LVLTYPE             1C78
MAP                 1122
MAPINIT             10BE
MAPINPUT            1D00
MAPMOVEINPUT        1D26
MAXHEALTH           11FA
MENUINPUT           1CF4
MOVE_ENEMY          224E
MOVE_ENEMY_L2       2280
MOVE_ENEMY_L3       2296
MOVE_ENEMY_L4       22AC
MOVE_HEALTHPACK     2246
MOVE_PLAYER_LEFT    21F8
MOVE_PLAYER_RIGHT   2216
MOVE_THROW          217E
MOVE_TREE           223E
NEXTINIT            1012
NOINPUT             1CC6
PAUSED              1162
PAUSEDINPUT         1D62
PAUSEHALFHEIGHT     188C
PAUSEHALFWIDTH      1888
PAUSEMSG            1890
PERFORM_ATTACK      2338
PERFORM_JUMP        2712
PERFORM_THROW       2378
PERFORM_THROW_ARC   2736
PLAYERH             8
PLAYERTIME          1AA2
PLAYERW             8
PLAYERX             11E2
PLAYERY             11E6
PLAYER_DIR          308E
PLAYER_HEIGHT       30DE
PLAYER_SCORE        307E
PLAYER_WIDTH        30DD
PLAYER_X            3076
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  2AEC
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  2B08
PLAYER_Y            307A
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  2B24
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  2B3E
PLAY_GAMEOVER       2758
PLAY_HIT            27EE
PLAY_HITHURT        2794
PLAY_JUMP           2776
PLAY_LVLCHANGE      27D0
PLAY_POWERUP        27B2
PLX_LTE_TO_FLYENEMY_X_PLUS_W  2B56
PLX_LTE_TO_HEALTH_X_PLUS_W  2BC4
PLX_PLUS_W_LTE_TO_FLYENEMY_X  2B72
PLX_PLUS_W_LTE_TO_HEALTH_X  2BE0
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        3086
PLYR_H_INIT         C
PLYR_JUMP_V         FFFFFFED
PLYR_ON_GND         308A
PLYR_VELOCITY       3082
PLYR_W_INIT         14
PLY_LTE_TO_FLYENEMY_Y_PLUS_H  2B8E
PLY_LTE_TO_HEALTH_Y_PLUS_H  2BFC
PLY_PLUS_H_LTE_TO_FLYENEMY_Y  2BAA
PLY_PLUS_H_LTE_TO_HEALTH_Y  2C18
POINTS              30B5
POINTSGAIN          1
POINTSMSG           185E
POINTSROW           1887
POWERUP_INDEX       3
POWERUP_LOAD        27A0
POWERUP_WAV         3112
PRESSSTART          302C
PRINT               17A8
PRINTNUM            17B0
PROCESSENEMIES      1B26
PROCESSENEMIESLOOP  1B30
PROCESSENEMY        1922
PROCESSENEMYBL      1A4C
PROCESSENEMYBR      1A12
PROCESSENEMYTL      19A4
PROCESSENEMYTR      19DA
PROCESS_INPUT       20A4
PROCESS_RESTART     20D0
RANDOM              30B0
RED                 FF
RESET_ENEMY_POSITION  22C6
RESET_FLYENEMY_POSITION  22F0
RESET_HEALTH_POSITION  231E
RESET_THROW         21BC
RESET_TREE          2234
RESTART_MSG         3013
RKEY                52
ROWC                10
RUNACTIONKEYS       41444C20
SAVECURRENTENEMY    1BBA
SAVEENEMY1          1BEC
SAVEENEMY2          1BFA
SAVEENEMY3          1C08
SAVEENEMY4          1C16
SCALER              3136
SCORE_MSG           2FA2
SCREENH             1200
SCREENW             11FE
SCREEN_H            306E
SCREEN_W            306C
SETCURSOR           1802
SETFILLCOLOUR       17A0
SETFULLSCREEN       1838
SETPENCOLOUR        1798
SET_OFF_GROUND      26F4
SET_ON_GROUND       26CC
SKEY                53
SKY                 FFE2B0
SPACEBAR            20
SPACEKEY            20
SPAWN_HEALTHPACKS   3056
SPRESSED            1DEC
START               1000
STILL_COLLIDED      2EDC
STOP_HPACK_SPAWN    2ED2
TAKEDMG             11A8
TCCRS               B
TCDBL               5C
TCFONT              15
TCFULLSCREEN        21
TCINP               13
TCPENCLR            50
TCPENFIL            51
TCRECT              57
TCSCREEN            21
TCSCREENSIZE        0
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_REDRAW           5E
TC_SCREEN           21
TC_S_SIZE           0
TESTINPUT           1C7A
TESTMSG             11CC
THROW_ARC           2724
THROW_COOLDOWN      30C6
THROW_GRAVITY       30D6
THROW_HEIGHT        14
THROW_PLUS_W_LTE_TO_ENMY_X  2D2A
THROW_PLUS_W_LTE_TO_FLYENMY_X  2D98
THROW_TIME          30C8
THROW_VELOCITY      30D2
THROW_WIDTH         23
THROW_X             30CA
THROW_X_LTE_TO_ENEMY_X_PLUS_W  2D0E
THROW_X_LTE_TO_FLYENEMY_X_PLUS_W  2D7C
THROW_Y             30CE
THRW_DFLT_G         1
THRW_DFLT_V         0
THRW_H_INIT         F
THRW_JUMP_V         FFFFFFF0
THRW_W_INIT         F
TIMER               313A
TITLE               104E
TITLE1MSG           1092
TITLE2MSG           10A4
TITLELOOP           1084
TITLEMSG            303D
TOGGLEFOLLOW        1C5E
TOGGLEFULLSCREEN    180A
TOGGLEPAUSE         117A
TREET               3029
TREE_LEAVES_X       2500
TREE_LEAVES_Y       24F4
TREE_LOOP           24BC
TRUNK               312E
TRW_LTE_TO_ENEMY_Y_PLUS_H  2D46
TRW_LTE_TO_FLYENEMY_Y_PLUS_H  2DB4
TRW_PLUS_H_LTE_TO_FLYENEMY_Y  2DD0
TRW_PLUS_H_LTE_TO_THROW_Y  2D62
TURNONFOLLOW        1C70
UPDATE              20E0
UPDATE_MSG          2FC8
VARMSG              2FE5
V_MSG               2FE2
WASDKEYS            57415344
WASTETIME           1170
WHITE               FFFFFF
WIDTH               3138
WKEY                57
WPRESSED            1DC4
X                   3130
X_MSG               2FDC
Y                   3132
Y_MSG               2FDF
Z                   3134
ZKEY                5A
ZONE1BRX            13FE
ZONE1BRY            1402
ZONE1COLLISION      1338
ZONE1TLX            13F6
ZONE1TLY            13FA
ZONE2BRX            140E
ZONE2BRY            1412
ZONE2COLLISION      1366
ZONE2TLX            1406
ZONE2TLY            140A
ZONE3BRX            141E
ZONE3BRY            1422
ZONE3COLLISION      1390
ZONE3TLX            1416
ZONE3TLY            141A
ZONE4BRX            142E
ZONE4BRY            1432
ZONE4COLLISION      13BA
ZONE4TLX            1426
ZONE4TLY            142A
ZONEHEIGHT          1446
ZONEMSG             144A
ZONEWIDTH           1442
ZPRESSED            1DA2
_00000000           1CA8
_00000001           1CB6
_00000002           1CC4
_00000003           1D3E
_00000004           1D4A
_00000005           1D56
_00000006           1D62
_00000007           203A
_00000008           204C
_00000009           205E
_0000000A           2070
_0000000B           2084
