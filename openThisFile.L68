00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/02/2025 16:44:03

00000000                             1  ; this file starts the program.
00000000                             2  ; contains the title screen, includes all other files
00000000                             3  
00001000                             4      org $1000
00001000                             5  start:
00001000  6000 0002                  6      bra firstInit
00001004                             7  
00001004                             8  firstInit:
00001004                             9      ; Enable the screen back buffer(see easy 68k help)
00001004  103C 005C                 10      MOVE.B  #tcdbl,D0          ; 92 Enables Double Buffer
00001008  123C 0011                 11      MOVE.B  #17,        D1          ; Combine Tasks
0000100C  4E4F                      12      TRAP    #15                     ; Trap (Perform action)
0000100E                            13      
0000100E  6000 0002                 14      bra nextInit
00001012                            15      
00001012                            16  nextInit:
00001012                            17      
00001012  103C 0021                 18      MOVE.B  #tcScreen, D0           ; access screen information
00001016  223C 00000000             19      MOVE.L  #tcScreenSize, D1       ; placing 0 in D1 triggers loading screen size information
0000101C  4E4F                      20      TRAP    #15                     ; interpret D0 and D1 for screen size
0000101E  33C1 00001200             21      MOVE.W  D1,         screenH     ; place screen height in memory location
00001024  4841                      22      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001026  33C1 000011FE             23      MOVE.W  D1,         screenW     ; place screen width in memory location
0000102C                            24      
0000102C  13FC 0000 000011E0        25      move.b #$00, isPaused
00001034                            26  
00001034  33FC 0000 00001C78        27      move.w #0, lvlType
0000103C                            28      
0000103C  4282                      29      clr.l d2
0000103E  303C 0015                 30      move #tcFont, d0
00001042  223C 00AFE5D0             31      move.l #color5, d1
00001048  4E4F                      32      trap #15
0000104A                            33      
0000104A  6000 0002                 34      bra title
0000104E                            35  
0000104E                            36  title:
0000104E  4EB9 0000161E             37      jsr drawBg
00001054                            38      
00001054  323C 1F0D                 39      move.w #$1f0d, d1
00001058  4EB9 00001802             40      jsr setCursor
0000105E  43F9 00001092             41      lea title1msg, a1
00001064  4EB9 000017A8             42      jsr print
0000106A                            43      
0000106A  323C 1C0F                 44      move.w #$1c0f, d1
0000106E  4EB9 00001802             45      jsr setCursor
00001074  43F9 000010A4             46      lea title2msg, a1
0000107A  4EB9 000017A8             47      jsr print
00001080                            48      
00001080                            49      
00001080  6000 0002                 50      bra titleLoop
00001084                            51      
00001084                            52  titleLoop:
00001084                            53       ; Enable back buffer
00001084  103C 005E                 54      MOVE.B  #94,        D0
00001088  4E4F                      55      TRAP    #15
0000108A                            56      
0000108A  4EB9 00001C7A             57      jsr testInput
00001090                            58      
00001090  60F2                      59      bra titleLoop
00001092                            60  
00001092                            61  
00001092= 2D 20 43 45 4C 4C ...     62  title1Msg dc.b '- CELL DEFENDER -',0
000010A4                            63  
000010A4= 50 72 65 73 73 20 ...     64  title2msg dc.b 'Press "enter" to start...',0
000010BE                            65  
000010BE                            66  ; include other files 
000010BE                            67   include "map/main.x68"
000010BE                            68  ; this file contains the main game loop
000010BE                            69  
000010BE                            70  mapInit:
000010BE  33FC 0001 00001C78        71      move.w #1, lvlType
000010C6                            72      
000010C6                            73          ; Place the Player at the center of the screen
000010C6  4281                      74      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C8  3239 000011FE             75      MOVE.W  screenW,   D1          ; Place Screen width in D1
000010CE  82FC 0002                 76      DIVU    #02,        D1          ; divide by 2 for center on X Axis
000010D2  23C1 000011E2             77      MOVE.L  D1,         playerX    ; Players X Position
000010D8  23C1 000011EA             78      move.l d1, centerx
000010DE                            79  
000010DE  4281                      80      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E0  3239 00001200             81      MOVE.W  screenH,   D1          ; Place Screen width in D1
000010E6  82FC 0002                 82      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010EA  23C1 000011E6             83      MOVE.L  D1,         playerY    ; Players Y Position
000010F0  23C1 000011EE             84      move.l d1, centerY
000010F6                            85  
000010F6  4EB9 00001202             86      jsr initializeCell
000010FC  4EB9 00001452             87      jsr initDraw
00001102  4EB9 00001AE6             88      jsr initAllEnemies
00001108                            89  
00001108  6000 0002                 90      bra loop
0000110C                            91  
0000110C                            92  loop:
0000110C                            93      ;jsr clearscreen
0000110C  4EB9 00001122             94      jsr map ; if in map, do map stuff
00001112                            95      ; if in battle, do battle stuff
00001112                            96  
00001112  6000 0002                 97      bra endLoop
00001116                            98  endLoop:
00001116  4A79 000011F6             99      tst currentHealth
0000111C  6600 009A                100      bne end
00001120  60EA                     101      bra loop        ; loop
00001122                           102  
00001122                           103  map:
00001122  4EB9 00001484            104      jsr draw
00001128  4EB9 00001C7A            105      jsr testinput
0000112E                           106      
0000112E                           107      ; test paused
0000112E  4A39 000011E0            108      tst.b isPaused
00001134  6600 002C                109      bne paused
00001138                           110  
00001138                           111      ; process
00001138  4EB9 00001AAA            112      jsr increment
0000113E  4EB9 00001B26            113      jsr processEnemies
00001144                           114      ;jsr enemyColCheck
00001144                           115      ;jsr collision
00001144  4E75                     116      rts
00001146                           117  
00001146                           118  battle:
00001146  4E75                     119      rts
00001148                           120  
00001148                           121  collision:
00001148  4EB9 00001338            122      jsr zone1collision
0000114E  4EB9 00001366            123      jsr zone2collision
00001154  4EB9 00001390            124      jsr zone3collision
0000115A  4EB9 000013BA            125      jsr zone4collision
00001160  4E75                     126      rts
00001162                           127  
00001162                           128  paused:
00001162  60B2                     129      bra endLoop
00001164                           130      
00001164                           131  clearscreen:
00001164                           132      ; Clear the screen
00001164  103C 000B                133      MOVE.B  #tccrs,D0          ; Set Cursor Position
00001168  323C FF00                134      MOVE.W  #$FF00,     D1          ; Clear contents
0000116C  4E4F                     135      TRAP    #15
0000116E  4E75                     136      rts
00001170                           137  
00001170                           138  wasteTime:
00001170                           139      ; value put into d5, keep subtracting 1 until d5 contains 0
00001170                           140      ; takes a lot of time to process
00001170  5345                     141      sub #1, d5
00001172  BA7C 0000                142      cmp #0, d5
00001176  66F8                     143      bne wasteTime
00001178  4E75                     144      rts
0000117A                           145  
0000117A                           146  togglePause:
0000117A  1A39 000011E0            147      move.b isPaused, d5
00001180  4605                     148      not.b d5
00001182  13C5 000011E0            149      move.b d5, isPaused
00001188  4E75                     150      rts
0000118A                           151  
0000118A                           152  
0000118A                           153  ; heal up by one hp
0000118A                           154  heal:
0000118A  2439 000011F6            155      move.l currentHealth, d2
00001190  B4B9 000011FA            156      cmp.l maxHealth, d2
00001196  6700 000E                157      beq endHeal
0000119A  5282                     158      add.l #1, d2
0000119C  23C2 000011F6            159      move.l d2, currentHealth
000011A2  6000 0002                160      bra endHeal
000011A6                           161  endHeal:
000011A6  4E75                     162      rts
000011A8                           163  
000011A8                           164  takeDmg:
000011A8  2239 000011F6            165      move.l currentHealth, d1
000011AE  5381                     166      sub.l #1, d1
000011B0  23C1 000011F6            167      move.l d1, currentHealth
000011B6  4E75                     168      rts
000011B8                           169  
000011B8                           170  ; runs if game is cut short w/ ESC key
000011B8                           171  end:
000011B8  4EB8 1164                172      jsr clearscreen
000011BC                           173      
000011BC  43F9 00001854            174      lea endmsg, a1
000011C2  4EB9 000017A8            175      jsr print
000011C8  FFFF FFFF                176      simhalt
000011CC                           177  
000011CC= 74 65 73 74 00           178  testMsg dc.b 'test',0
000011D1                           179  
000011D1                           180  
000011D1= 14 57 41 53 44 00        181  inputkeys dc.b 20,87,65,83,68,0
000011D7                           182  
000011D8                           183  currentkey ds.l 01
000011DC                           184  lastkey ds.l 01
000011E0                           185  isPaused ds.b 01
000011E1                           186  
000011E2                           187  playerX ds.l 01
000011E6                           188  playerY ds.l 01
000011EA                           189  
000011EA                           190  centerX ds.l 01
000011EE                           191  centerY ds.l 01
000011F2                           192  
000011F2= 00000000                 193  currentPts dc.l 0
000011F6                           194  
000011F6= 000000C8                 195  currentHealth dc.l 200
000011FA= 000000C8                 196  maxHealth dc.l 200
000011FE                           197  
000011FE                           198  screenW        DS.w    01  ; Reserve Space for Screen Width
00001200                           199  screenH        DS.w    01  ; Reserve Space for Screen Height
00001202                           200  
00001202                           201  
00001202                           202  -------------------- end include --------------------
00001202                           203   include "map/shapeSizes.x68"
00001202                           204  ; this file contains some const values
00001202                           205  
00001202  =00000008                206  playerW equ 08
00001202  =00000008                207  playerH equ 08
00001202                           208  
00001202  =0000000C                209  enemyH equ 12
00001202  =00000010                210  enemyW equ 16
00001202  =00000006                211  enemyHalfH equ 6
00001202  =00000008                212  enemyHalfW equ 8
00001202                           213  
00001202  =00000005                214  bulletH equ 05
00001202  =00000005                215  bulletW equ 05
00001202                           216  
00001202  =00000010                217  appleH equ 16
00001202  =00000010                218  appleW equ 16
00001202                           219  
00001202  =00000001                220  pointsGain equ 01
00001202  =00000001                221  -------------------- end include --------------------
00001202                           222   include "map/trapCodes.x68"
00001202                           223  ; traps
00001202  =0000000B                224  tccrs  EQU 11       ; Trap code cursor position
00001202  =0000005C                225  tcdbl  EQU 92       ; Double Buffer Screen Trap Code
00001202  =00000013                226  tcinp equ 19        ; get input trap code
00001202  =00000021                227  tcScreen EQU 33    ; Screen size information trap code
00001202  =00000000                228  tcScreenSize EQU 00    ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001202                           229                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001202  =00000015                230  tcFont equ 21       ; change font style/colour
00001202  =00000050                231  tcPenClr equ 80     ; change pen colour
00001202  =00000051                232  tcPenFil equ 81     ; change pen fill
00001202  =00000057                233  tcRect equ 87       ; draw rectangle
00001202                           234  
00001202  =00000021                235  tcFullScreen equ 33
00001202  =00000021                236  -------------------- end include --------------------
00001202                           237   include "map/inputKeyCodes.x68"
00001202                           238  ; this file contains relevant input keycodes
00001202                           239  
00001202  =0000001B                240  escapekey equ $1b ; pause
00001202  =00000020                241  spacekey equ $20
00001202  =0000000D                242  enterKey equ $0d
00001202                           243  
00001202  =00000057                244  wkey equ $57
00001202  =00000041                245  akey equ $41
00001202  =00000053                246  skey equ $53
00001202  =00000044                247  dkey equ $44
00001202                           248  
00001202  =0000005A                249  zkey equ $5a ; toggle follow cam
00001202                           250  
00001202  =00000030                251  key0 equ $30 ; toggle fullscreen
00001202  =00000031                252  key1 equ $31 
00001202  =00000032                253  key2 equ $32
00001202  =00000033                254  key3 equ $33
00001202                           255  
00001202  =57415344                256  wasdKeys equ $57415344 ; movement keys
00001202  =41444C20                257  runActionKeys equ $41444C20 ; run actions
00001202  =41444C20                258  -------------------- end include --------------------
00001202                           259   include "map/colours.x68"
00001202                           260  ; this file contains relevant color values
00001202                           261  
00001202                           262  ; 6ive colours: ranging from dark to light, plus one for contrast
00001202                           263  ; color1: darkest
00001202                           264  ; color5: lightest
00001202                           265  ; colorRed: contrast red colour
00001202  =00201808                266  color1 equ $00201808
00001202  =00494320                267  color2 equ $00494320
00001202  =0056864B                268  color3 equ $0056864b
00001202  =007AC687                269  color4 equ $007ac687
00001202  =00AFE5D0                270  color5 equ $00afe5d0
00001202                           271  
00001202  =00463EBD                272  colorRed equ $00463ebd
00001202  =00463EBD                273  -------------------- end include --------------------
00001202                           274   include "map/cell.x68"
00001202                           275  ; this file contains cell data
00001202                           276  
00001202                           277  ; cell contains:
00001202                           278      ; big square boundary
00001202                           279      ; 2 square attack zones - top corners
00001202                           280      ; 1 square heal zone - bottom
00001202                           281  
00001202                           282  initializeCell: ; initialize values for cell and zones
00001202                           283  
00001202                           284      ; this subroutine gathers top-left and bottom-right bounds for the cell,
00001202                           285      ; as well as each zone
00001202                           286  
00001202                           287      ; these bounds are used to draw and process
00001202                           288  
00001202                           289      ;--------RECTANGLE TRAP CODE:
00001202                           290      ; d1: top left X
00001202                           291      ; d2: top left Y
00001202                           292  
00001202                           293      ; d3: bottom right X
00001202                           294      ; d4: bottom right Y
00001202                           295      
00001202                           296  
00001202                           297      ;--------get cell bounds
00001202                           298      ; TL
00001202  2238 11EA                299      move.l centerX, d1      ; move centerX to d1
00001206  92B9 00001436            300      sub.l cellXradius, d1     ; add/sub based on cell radius
0000120C  23C1 000013E6            301      move.l d1, celltlX      ; save to relevant location
00001212                           302  
00001212  2238 11EE                303      move.l centerY, d1
00001216  D2B9 0000143E            304      add.l cellYoffset, d1
0000121C  92B9 0000143A            305      sub.l cellYradius, d1
00001222  23C1 000013EA            306      move.l d1, celltlY
00001228                           307  
00001228                           308      ; BR
00001228  2238 11EA                309      move.l centerX, d1
0000122C  D2B9 00001436            310      add.l cellXradius, d1
00001232  D2B8 0008                311      add.l playerH, d1
00001236  23C1 000013EE            312      move.l d1, cellbrX
0000123C                           313  
0000123C  2238 11EE                314      move.l centerY, d1
00001240  D2B9 0000143E            315      add.l cellYoffset, d1
00001246  D2B9 0000143A            316      add.l cellYradius, d1
0000124C  23C1 000013F2            317      move.l d1, cellbrY
00001252                           318  
00001252                           319  
00001252                           320      ;--------get zone 1 bounds
00001252                           321      ; TL
00001252  23F9 000013E6 000013F6   322      move.l celltlX, zone1tlX
0000125C                           323  
0000125C  23F9 000013EA 000013FA   324      move.l celltlY, zone1tlY
00001266                           325  
00001266                           326      ; BR
00001266  2239 000013F6            327      move.l zone1tlX, d1
0000126C  D2B9 00001442            328      add.l zoneWidth, d1
00001272  23C1 000013FE            329      move.l d1, zone1brX
00001278                           330  
00001278  2239 000013FA            331      move.l zone1tly, d1
0000127E  D2B9 00001446            332      add.l zoneHeight, d1
00001284  23C1 00001402            333      move.l d1, zone1brY
0000128A                           334  
0000128A                           335  
0000128A                           336      ;--------get zone 2 bounds
0000128A                           337      ; TL
0000128A  2239 000013EE            338      move.l cellbrX, d1
00001290  92B9 00001442            339      sub.l zoneWidth, d1
00001296  23C1 00001406            340      move.l d1, zone2tlX
0000129C                           341  
0000129C  23F9 000013EA 0000140A   342      move.l celltlY, zone2tlY
000012A6                           343  
000012A6                           344      ; BR
000012A6  23F9 000013EE 0000140E   345      move.l cellbrx, zone2brX
000012B0                           346  
000012B0  2239 000013EA            347      move.l celltlY, d1
000012B6  D2B9 00001446            348      add.l zoneHeight, d1
000012BC  23C1 00001412            349      move.l d1, zone2brY
000012C2                           350  
000012C2                           351  
000012C2                           352      ;--------get zone 3 bounds
000012C2                           353      ; TL
000012C2  2239 000013EE            354      move.l cellbrX, d1
000012C8  92B9 00001442            355      sub.l zoneWidth, d1
000012CE  23C1 00001416            356      move.l d1, zone3tlX
000012D4                           357  
000012D4  2239 000013F2            358      move.l cellbrY, d1
000012DA  92B9 00001446            359      sub.l zoneHeight, d1
000012E0  23C1 0000141A            360      move.l d1, zone3tlY
000012E6                           361  
000012E6                           362      ; BR
000012E6  23F9 000013EE 0000141E   363      move.l cellbrX, zone3brX
000012F0                           364  
000012F0  23F9 000013F2 00001422   365      move.l cellbrY, zone3brY
000012FA                           366  
000012FA                           367      ;--------get zone 4 bounds
000012FA                           368      ; TL
000012FA  2239 000013E6            369      move.l celltlX, d1
00001300  23C1 00001426            370      move.l d1, zone4tlX
00001306                           371  
00001306  2239 000013F2            372      move.l cellbrY, d1
0000130C  92B9 00001446            373      sub.l zoneHeight, d1
00001312  23C1 0000142A            374      move.l d1, zone4tlY
00001318                           375  
00001318                           376      ; BR
00001318  2239 000013E6            377      move.l celltlX, d1
0000131E  D2B9 00001442            378      add.l zoneWidth, d1
00001324  23C1 0000142E            379      move.l d1, zone4brX
0000132A                           380  
0000132A  2239 000013F2            381      move.l cellbrY, d1
00001330  23C1 00001432            382      move.l d1, zone4brY
00001336                           383  
00001336  4E75                     384      rts
00001338                           385  
00001338                           386  zone1collision:
00001338  2438 11E2                387      move.l playerX, d2
0000133C  2638 11E6                388      move.l playerY, d3
00001340                           389  
00001340                           390      ; check x
00001340  B4B9 000013FE            391      cmp.l zone1brX, d2
00001346  6E00 009C                392      bgt endCollision
0000134A                           393      ; check y
0000134A  B6B9 00001402            394      cmp.l zone1brY, d3
00001350  6E00 0092                395      bgt endCollision
00001354                           396  
00001354                           397  
00001354                           398      ; at this point, player is confirmed in zone 1
00001354  43F9 0000144A            399      lea zoneMsg, a1
0000135A  4EB9 000017A8            400      jsr print
00001360                           401  
00001360                           402      ; need to go to enemy thing
00001360  6000 0AB8                403      bra initRun
00001364                           404  
00001364  4E75                     405      rts
00001366                           406  
00001366                           407  zone2collision:
00001366  2438 11E2                408      move.l playerX, d2
0000136A  2638 11E6                409      move.l playerY, d3
0000136E                           410  
0000136E                           411      ; check x
0000136E  B4B9 00001406            412      cmp.l zone2tlX, d2
00001374  6D00 006E                413      blt endCollision
00001378                           414      ; check y
00001378  B6B9 00001402            415      cmp.l zone1brY, d3
0000137E  6E00 0064                416      bgt endCollision
00001382                           417  
00001382  43F9 0000144A            418      lea zoneMsg, a1
00001388  4EB9 000017A8            419      jsr print
0000138E                           420  
0000138E                           421      ; at this point, player is confirmed in zone 2
0000138E                           422  
0000138E  4E75                     423      rts
00001390                           424  
00001390                           425  zone3collision:
00001390  2438 11E2                426      move.l playerX, d2
00001394  2638 11E6                427      move.l playerY, d3
00001398                           428  
00001398                           429      ; check x
00001398  B4B9 00001416            430      cmp.l zone3tlX, d2
0000139E  6D00 0044                431      blt endCollision
000013A2                           432      ; check y
000013A2  B6B9 0000141A            433      cmp.l zone3tlY, d3
000013A8  6D00 003A                434      blt endCollision
000013AC                           435  
000013AC                           436      ; at this point, player is confirmed in zone 3
000013AC                           437  
000013AC  43F9 0000144A            438      lea zoneMsg, a1
000013B2  4EB9 000017A8            439      jsr print
000013B8                           440      
000013B8  4E75                     441      rts
000013BA                           442  
000013BA                           443  zone4collision:
000013BA  2438 11E2                444      move.l playerX, d2
000013BE  2638 11E6                445      move.l playerY, d3
000013C2                           446  
000013C2                           447      ; check x
000013C2  B4B9 0000142E            448      cmp.l zone4brX, d2
000013C8  6E00 001A                449      bgt endCollision
000013CC                           450      ; check y
000013CC  B6B9 0000142A            451      cmp.l zone4tlY, d3
000013D2  6D00 0010                452      blt endCollision
000013D6                           453  
000013D6                           454      ; at this point, player is confirmed in zone 4
000013D6                           455  
000013D6  43F9 0000144A            456      lea zoneMsg, a1
000013DC  4EB9 000017A8            457      jsr print
000013E2  4E75                     458      rts
000013E4                           459  
000013E4                           460  endCollision:
000013E4  4E75                     461      rts
000013E6                           462  
000013E6                           463  ;-cell top-left bounds
000013E6                           464  celltlX ds.l 01
000013EA                           465  celltlY ds.l 01
000013EE                           466  ; cell bottom-right bounds
000013EE                           467  cellbrX ds.l 01
000013F2                           468  cellbrY ds.l 01
000013F6                           469  
000013F6                           470  ;----------------------zone 1 top-left bounds
000013F6                           471  zone1tlX ds.l 01
000013FA                           472  zone1tlY ds.l 01
000013FE                           473  ; zone 1 bottom-right bounds
000013FE                           474  zone1brX ds.l 01
00001402                           475  zone1brY ds.l 01
00001406                           476  
00001406                           477  ;----------------------zone 2 top-left bounds
00001406                           478  zone2tlX ds.l 01
0000140A                           479  zone2tlY ds.l 01
0000140E                           480  ; zone 2 bottom-right bounds
0000140E                           481  zone2brX ds.l 01
00001412                           482  zone2brY ds.l 01
00001416                           483  
00001416                           484  ;----------------------zone 3 top-left bounds
00001416                           485  zone3tlX ds.l 01
0000141A                           486  zone3tlY ds.l 01
0000141E                           487  ; zone 3 bottom-right bounds
0000141E                           488  zone3brX ds.l 01
00001422                           489  zone3brY ds.l 01
00001426                           490  
00001426                           491  ;----------------------zone 4 top-left bounds
00001426                           492  zone4tlX ds.l 01
0000142A                           493  zone4tlY ds.l 01
0000142E                           494  ; zone 4 bottom-right bounds
0000142E                           495  zone4brX ds.l 01
00001432                           496  zone4brY ds.l 01
00001436                           497  
00001436                           498  ; horizontal and vertical radius of main cell (half width)
00001436= 00000064                 499  cellXradius dc.l 100
0000143A= 00000050                 500  cellYradius dc.l 80
0000143E                           501  
0000143E                           502  ; how lower from center it is
0000143E= 0000003C                 503  cellYoffset dc.l 60
00001442                           504  
00001442                           505  ; width of zone
00001442= 00000037                 506  zoneWidth dc.l 55
00001446= 0000002D                 507  zoneHeight dc.l 45
0000144A                           508  
0000144A= 49 4E 20 5A 4F 4E ...    509  zoneMsg dc.b 'IN ZONE',0
00001452                           510  
00001452                           511  enterHill:
00001452                           512  
00001452                           513  
00001452                           514  
00001452                           515  -------------------- end include --------------------
00001452                           516   include "map/draw.x68"
00001452                           517  ; this file contains all draw functions
00001452                           518  
00001452                           519  initDraw:
00001452                           520      ; get health rectangle bounds
00001452                           521  
00001452                           522      ;HEIGHT
00001452  3239 00001884            523      move.w healthBarLocY, d1
00001458  23C1 00001872            524      move.l d1, healthTlY
0000145E  0681 0000000F            525      add.l #15, d1
00001464  23C1 0000187A            526      move.l d1, healthBrY
0000146A                           527  
0000146A                           528      ;WIDTH
0000146A  4281                     529      clr.l d1
0000146C  3239 00001882            530      move.w healthBarOffsetX, d1
00001472                           531      ;move.l maxHealth, d2
00001472                           532      ;divu #2, d2
00001472                           533      ;add.l maxHealth, d1
00001472  23C1 0000186E            534      move.l d1, healthTlX
00001478                           535  
00001478  D2B8 11FA                536      add.l maxhealth, d1
0000147C  23C1 00001876            537      move.l d1, healthBrX
00001482                           538      
00001482  4E75                     539      rts
00001484                           540  
00001484                           541  
00001484                           542  draw:
00001484                           543       ; Enable back buffer
00001484  103C 005E                544      MOVE.B  #94,        D0
00001488  4E4F                     545      TRAP    #15
0000148A                           546  
0000148A  4EB9 00001C3A            547      jsr followCam
00001490  4EB9 0000161E            548      jsr drawBg
00001496  4EB9 00001682            549      jsr drawEnemies
0000149C  4EB9 000016F6            550      jsr drawCell
000014A2  4EB9 0000164E            551      jsr drawPlayer
000014A8  4EB9 0000157E            552      jsr drawText
000014AE  4EB9 00001524            553      jsr drawHealth
000014B4  4EB9 000014BC            554      jsr drawPause
000014BA  4E75                     555      rts
000014BC                           556  
000014BC                           557  drawPause:
000014BC  4A38 11E0                558      tst.b isPaused
000014C0  6700 0060                559      beq endDrawPause
000014C4                           560  
000014C4  223C 00AFE5D0            561      move.l #color5, d1
000014CA  4EB9 00001798            562      jsr setPenColour
000014D0  223C 00201808            563      move.l #color1, d1
000014D6  4EB9 000017A0            564      jsr setFillColour
000014DC                           565  
000014DC                           566      ; get rect bounds
000014DC                           567  
000014DC  2238 11EA                568      move.l centerX, d1
000014E0  2438 11EE                569      move.l centerY, d2
000014E4  92B9 00001888            570      sub.l pauseHalfWidth, d1
000014EA  94B9 0000188C            571      sub.l pauseHalfHeight, d2
000014F0                           572  
000014F0  2638 11EA                573      move.l centerX, d3
000014F4  2838 11EE                574      move.l centerY, d4
000014F8  D6B9 00001888            575      add.l pauseHalfWidth, d3
000014FE  D8B9 0000188C            576      add.l pauseHalfHeight, d4
00001504                           577  
00001504  4EB9 000017FA            578      jsr drawUiRect
0000150A                           579  
0000150A                           580      ; draw text
0000150A  323C 2208                581      move.w #$2208, d1
0000150E  4EB9 00001802            582      jsr setCursor
00001514  43F9 00001890            583      lea pauseMsg, a1
0000151A  4EB9 000017A8            584      jsr print
00001520                           585  
00001520  4E75                     586      rts
00001522                           587  endDrawPause:
00001522  4E75                     588      rts
00001524                           589  
00001524                           590  drawHealth:
00001524  223C 007AC687            591      move.l #color4, d1
0000152A  4EB9 00001798            592      jsr setPenColour
00001530  223C 00494320            593      move.l #color2, d1
00001536  4EB9 000017A0            594      jsr setFillColour
0000153C                           595  
0000153C  2239 0000186E            596      move.l healthTlX, d1
00001542  2439 00001872            597      move.l healthTlY, d2
00001548                           598  
00001548  2639 00001876            599      move.l healthBrX, d3
0000154E  2839 0000187A            600      move.l healthBrY, d4
00001554  4EB9 000017FA            601      jsr drawUiRect
0000155A                           602  
0000155A                           603      ; DRAW FULL PART OF HP BAR
0000155A  2639 0000186E            604      move.l healthtlX, d3
00001560  D6B8 11F6                605      add.l currentHealth, d3
00001564                           606  
00001564  223C 0056864B            607      move.l #color3, d1 ; change colour
0000156A  4EB9 000017A0            608      jsr setFillColour
00001570                           609  
00001570  2239 0000186E            610      move.l healthTlX, d1 ; set value in d1 back to what its supposed to be
00001576  4EB9 000017FA            611      jsr drawUiRect
0000157C  4E75                     612      rts
0000157E                           613  
0000157E                           614  drawText:
0000157E                           615      ; set colours
0000157E  223C 00AFE5D0            616      move.l #color5, d1
00001584  4EB9 00001798            617      jsr setPenColour
0000158A  223C 00201808            618      move.l #color1, d1
00001590  4EB9 000017A0            619      jsr setFillColour
00001596                           620      ; PLAYER SCORE MSG
00001596  323C 0200                621      move.w #$200, d1
0000159A  D239 00001887            622      add.b pointsRow, d1
000015A0  4EB9 00001802            623      jsr setCursor
000015A6  43F9 0000185E            624      lea pointsMsg, a1
000015AC  4EB9 000017A8            625      jsr print
000015B2                           626      ; PLAYER SCORE
000015B2  223C 00000A00            627      move.l #$a00, d1
000015B8  D239 00001887            628      add.b pointsRow, d1
000015BE  4EB9 00001802            629      jsr setCursor
000015C4  2238 11F2                630      move.l currentPts, d1
000015C8  4EB9 000017B0            631      jsr printNum
000015CE                           632  
000015CE                           633      ; HEALTH
000015CE  323C 0200                634      move.w #$200, d1
000015D2  D239 00001886            635      add.b healthRow, d1
000015D8  4EB9 00001802            636      jsr setCursor
000015DE  43F9 00001866            637      lea healthMsg, a1
000015E4  4EB9 000017A8            638      jsr print
000015EA                           639  
000015EA                           640      ; ANTHILL
000015EA  323C 1005                641      move.w #$1005, d1
000015EE  4EB9 00001802            642      jsr setCursor
000015F4  43F9 0000189D            643      lea attackMsg1, a1
000015FA  4EB9 000017A8            644      jsr print
00001600  5241                     645      add.w #1, d1
00001602  4EB9 00001802            646      jsr setCursor
00001608  43F9 000018B9            647      lea attackMsg2, a1
0000160E  4EB9 000017A8            648      jsr print
00001614                           649  
00001614                           650  
00001614                           651      ; reset cursor
00001614  7200                     652      move.l #0, d1
00001616  4EB9 00001802            653      jsr setCursor
0000161C  4E75                     654      rts
0000161E                           655  
0000161E                           656  drawBg:
0000161E                           657      ; set colours
0000161E  223C 00494320            658      move.l #color2, d1
00001624  4EB9 00001798            659      jsr setPenColour
0000162A  223C 00201808            660      move.l #color1, d1
00001630  4EB9 000017A0            661      jsr setFillColour
00001636                           662  
00001636                           663      ; clear d3 and d4 (screen W and H are words)
00001636  4283                     664      clr.l d3
00001638  4284                     665      clr.l d4
0000163A                           666  
0000163A                           667      ; put the stuff in the registers, draw rect
0000163A  7200                     668      move.l #0, d1
0000163C  7400                     669      move.l #0, d2
0000163E  3638 11FE                670      move.w screenW, d3
00001642  3838 1200                671      move.w screenH, d4
00001646  4EB9 000017FA            672      jsr drawUiRect
0000164C  4E75                     673      rts
0000164E                           674  
0000164E                           675  drawPlayer:
0000164E                           676      ; Set white
0000164E  223C 00AFE5D0            677      MOVE.L #color5, d1
00001654  4EB9 00001798            678      jsr setPenColour
0000165A  223C 00201808            679      move.l #color1, d1
00001660  4EB9 000017A0            680      jsr setFillColour
00001666                           681      
00001666                           682      ; Set X, Y, Width and Height
00001666  2238 11E2                683      MOVE.L  playerX,   D1          ; X
0000166A  2438 11E6                684      MOVE.L  playerY,   D2          ; Y
0000166E  2638 11E2                685      MOVE.L  playerX,   D3
00001672  5083                     686      ADD.L   #playerW,   D3      ; Width
00001674  2838 11E6                687      MOVE.L  playerY,   D4 
00001678  5084                     688      ADD.L   #playerH,   D4      ; Height
0000167A                           689      
0000167A                           690      ; Draw Player
0000167A  4EB9 000017B8            691      jsr drawRect
00001680  4E75                     692      RTS
00001682                           693  
00001682                           694  drawEnemies:
00001682  4EB9 00001B82            695      jsr getEnemy1
00001688  4EB9 000016B2            696      jsr drawEnemy
0000168E  4EB9 00001B90            697      jsr getEnemy2
00001694  4EB9 000016B2            698      jsr drawEnemy
0000169A  4EB9 00001B9E            699      jsr getEnemy3
000016A0  4EB9 000016B2            700      jsr drawEnemy
000016A6  4EB9 00001BAC            701      jsr getEnemy4
000016AC  4EB9 000016B2            702      jsr drawEnemy
000016B2                           703  
000016B2                           704  drawEnemy:
000016B2                           705      ; set colour
000016B2  223C 00AFE5D0            706      move.l #color5, d1
000016B8  4EB9 00001798            707      jsr setPenColour
000016BE  223C 00463EBD            708      move.l #colorRed, d1
000016C4  4EB9 000017A0            709      jsr setFillColour
000016CA                           710  
000016CA                           711      ; set rect values
000016CA  2239 000018E8            712      move.l enemyX, d1
000016D0  2439 000018EC            713      move.l enemyY, d2
000016D6  2639 000018E8            714      move.l enemyX, d3
000016DC  2839 000018EC            715      move.l enemyY, d4
000016E2  0683 00000010            716      add.l #enemyW, d3
000016E8  0684 0000000C            717      add.l #enemyH, d4
000016EE                           718  
000016EE  4EB9 000017B8            719      jsr drawRect
000016F4  4E75                     720      rts
000016F6                           721  
000016F6                           722  drawCell:
000016F6                           723      ;---------------draw main cell
000016F6                           724      ; change colours
000016F6  223C 007AC687            725      move.l #color4, d1
000016FC  4EB9 00001798            726      jsr setPenColour
00001702  223C 00494320            727      move.l #color2, d1
00001708  4EB9 000017A0            728      jsr setFillColour
0000170E                           729  
0000170E  2238 13E6                730      move.l celltlX, d1
00001712  2438 13EA                731      move.l celltlY, d2
00001716  2638 13EE                732      move.l cellbrX, d3
0000171A  2838 13F2                733      move.l cellbrY, d4
0000171E  4EB9 000017B8            734      jsr drawRect
00001724                           735  
00001724                           736      ; change colours
00001724  223C 007AC687            737      move.l #color4, d1
0000172A  4EB9 00001798            738      jsr setPenColour
00001730  223C 0056864B            739      move.l #color3, d1
00001736  4EB9 000017A0            740      jsr setFillColour
0000173C                           741      ;---------------draw zone 1
0000173C  2238 13F6                742      move.l zone1tlX, d1
00001740  2438 13FA                743      move.l zone1tlY, d2
00001744  2638 13FE                744      move.l zone1brX, d3
00001748  2838 1402                745      move.l zone1brY, d4
0000174C  4EB9 000017B8            746      jsr drawRect
00001752                           747  
00001752                           748      ;---------------draw zone 2
00001752  2238 1406                749      move.l zone2tlX, d1
00001756  2438 140A                750      move.l zone2tlY, d2
0000175A  2638 140E                751      move.l zone2brX, d3
0000175E  2838 1412                752      move.l zone2brY, d4
00001762  4EB9 000017B8            753      jsr drawRect
00001768                           754      
00001768                           755      ;---------------draw zone 3
00001768  2238 1416                756      move.l zone3tlX, d1
0000176C  2438 141A                757      move.l zone3tlY, d2
00001770  2638 141E                758      move.l zone3brX, d3
00001774  2838 1422                759      move.l zone3brY, d4
00001778  4EB9 000017B8            760      jsr drawRect
0000177E                           761  
0000177E                           762      ;---------------draw zone 4
0000177E  2238 1426                763      move.l zone4tlX, d1
00001782  2438 142A                764      move.l zone4tlY, d2
00001786  2638 142E                765      move.l zone4brX, d3
0000178A  2838 1432                766      move.l zone4brY, d4
0000178E  4EB9 000017B8            767      jsr drawRect
00001794                           768  
00001794                           769      ; done
00001794  4E75                     770      rts
00001796                           771  
00001796                           772  endDraw:
00001796  4E75                     773      rts
00001798                           774  
00001798                           775  setPenColour:
00001798  103C 0050                776      move.b #tcPenClr, d0
0000179C  4E4F                     777      trap #15
0000179E  4E75                     778      rts
000017A0                           779  
000017A0                           780  setFillColour:
000017A0  103C 0051                781      move.b #tcPenFil, d0
000017A4  4E4F                     782      trap #15
000017A6  4E75                     783      rts
000017A8                           784  
000017A8                           785  print:
000017A8  303C 000D                786      move #13, d0
000017AC  4E4F                     787      trap #15
000017AE  4E75                     788      rts
000017B0                           789  
000017B0                           790  printNum:
000017B0  303C 0003                791      move #3, d0
000017B4  4E4F                     792      trap #15
000017B6  4E75                     793      rts
000017B8                           794  
000017B8                           795  drawRect:
000017B8                           796      ; if not follow, draw like normal
000017B8  4A79 00001C38            797      tst.w isFollow
000017BE  6700 003A                798      beq drawUiRect
000017C2                           799  
000017C2                           800      ; offset by camera
000017C2  92B9 00001C2E            801      sub.l cameraX, d1
000017C8  94B9 00001C32            802      sub.l cameraY, d2
000017CE  96B9 00001C2E            803      sub.l cameraX, d3
000017D4  98B9 00001C32            804      sub.l cameraY, d4
000017DA                           805      ; zoom by camera
000017DA  C2F9 00001C36            806      mulu cameraZoom, d1
000017E0  C4F9 00001C36            807      mulu cameraZoom, d2
000017E6  C6F9 00001C36            808      mulu cameraZoom, d3
000017EC  C8F9 00001C36            809      mulu cameraZoom, d4
000017F2                           810  
000017F2                           811      ; draw rect function
000017F2  103C 0057                812      MOVE.B  #tcRect, d0
000017F6  4E4F                     813      TRAP    #15
000017F8  4E75                     814      rts
000017FA                           815  
000017FA                           816  drawUiRect:
000017FA  103C 0057                817      MOVE.B  #tcRect, d0
000017FE  4E4F                     818      TRAP    #15
00001800  4E75                     819      rts
00001802                           820  
00001802                           821  setCursor:
00001802  103C 000B                822      MOVE.B  #tcCrs, d0
00001806  4E4F                     823      TRAP    #15
00001808  4E75                     824      rts
0000180A                           825  
0000180A                           826  toggleFullScreen:
0000180A  4281                     827      clr.l d1
0000180C  3239 00001852            828      move.w isFullScreen, d1
00001812  0C01 0001                829      cmpi.b #1, d1
00001816  6700 000E                830      beq goFullScreen
0000181A                           831  
0000181A                           832      ; go windowed
0000181A  7201                     833      move.l #1, d1
0000181C  4EB9 00001838            834      jsr setFullScreen
00001822                           835  
00001822  6000 000E                836      bra endToggleFullScreen
00001826                           837  goFullScreen:
00001826  5201                     838      add.b #1, d1
00001828  4EB9 00001838            839      jsr setFullScreen
0000182E  6000 0002                840      bra endToggleFullScreen
00001832                           841  endToggleFullScreen:
00001832  33C1 00001852            842      move.w d1, isFullScreen
00001838                           843  
00001838                           844  setFullScreen:
00001838  303C 0021                845      move #tcFullScreen, d0
0000183C  4E4F                     846      trap #15
0000183E  4E75                     847      rts
00001840                           848  
00001840                           849  ; INSTANT NEW LINE
00001840                           850  crlf:
00001840  303C 0006                851      move #6, d0
00001844  323C 000D                852      move #13, d1
00001848  4E4F                     853      trap #15
0000184A  323C 000A                854      move #10, d1
0000184E  4E4F                     855      trap #15
00001850  4E75                     856      rts
00001852                           857  
00001852= 0001                     858  isFullScreen dc.w 1
00001854                           859  
00001854= 47 41 4D 45 20 4F ...    860  endMsg dc.b 'GAME OVER', 0
0000185E= 50 4F 49 4E 54 53 ...    861  pointsMsg dc.b 'POINTS:', 0
00001866= 48 45 41 4C 54 48 ...    862  healthMsg dc.b 'HEALTH:', 0
0000186E                           863  
0000186E                           864  healthTlX ds.l 01
00001872                           865  healthTlY ds.l 01
00001876                           866  healthBrX ds.l 01
0000187A                           867  healthBrY ds.l 01
0000187E                           868  
0000187E                           869  currentHpX ds.l 01
00001882                           870  
00001882                           871  ; health stuff
00001882= 0050                     872  healthBarOffsetX dc.w 80
00001884= 0010                     873  healthBarLocY dc.w 16
00001886                           874  
00001886= 01                       875  healthRow dc.b 01
00001887= 03                       876  pointsRow dc.b 03
00001888                           877  
00001888                           878  ; pause stuff
00001888= 0000006E                 879  pauseHalfWidth dc.l 110
0000188C= 00000082                 880  pauseHalfHeight dc.l 130
00001890= 47 41 4D 45 20 50 ...    881  pauseMsg dc.b 'GAME PAUSED!', 0
0000189D                           882  
0000189D                           883  ; move to level stuff
0000189D= 41 4E 20 41 4E 54 ...    884  attackMsg1 dc.b 'AN ANTHILL IS UNDER ATTACK!',0
000018B9= 4D 4F 56 45 20 54 ...    885  attackMsg2 dc.b 'MOVE TOWARD IT AND PRESS "ENTER" TO DEFEND IT!',0
000018E8                           886  
000018E8                           887  -------------------- end include --------------------
000018E8                           888   include "map/enemies.x68"
000018E8                           889  ; this file contains enemy data
000018E8                           890  
000018E8                           891  ; variable data for current enemy
000018E8                           892  enemyX ds.l 01
000018EC                           893  enemyY ds.l 01
000018F0                           894  
000018F0                           895  ; enemy initialization: set position, health
000018F0                           896  ; 3 longs require 3 mem locations
000018F0                           897  ; call srts, then take values outside them
000018F0                           898  
000018F0                           899  ; GENERAL INIT/PROCESS
000018F0                           900  ; before these srts are called, enemyDir is given a value
000018F0                           901  ; 0: tl
000018F0                           902  ; 1: tr
000018F0                           903  ; 2: br
000018F0                           904  ; 3: bl
000018F0                           905  
000018F0                           906  initEnemy:
000018F0                           907      ; init based on which direction
000018F0  4A79 00001C24            908      tst enemyDir
000018F6  6700 0094                909      beq initEnemytl
000018FA                           910  
000018FA  0C79 0001 00001C24       911      cmpi #1, enemyDir
00001902  6700 00C0                912      beq initEnemytr
00001906                           913  
00001906  0C79 0002 00001C24       914      cmpi #2, enemyDir
0000190E  6700 00EA                915      beq initEnemybr
00001912                           916  
00001912  0C79 0003 00001C24       917      cmpi #3, enemyDir
0000191A  6700 0116                918      beq initEnemyBl
0000191E                           919  
0000191E                           920      ; no valid direction placed. just put enemy at the top
0000191E  6000 006C                921      bra initEnemyTl
00001922                           922  
00001922                           923  processEnemy:
00001922                           924  
00001922                           925      ; process based on direction
00001922  4A79 00001C24            926      tst enemyDir
00001928  6700 007A                927      beq processEnemyTl
0000192C  0C79 0001 00001C24       928      cmpi #1, enemyDir
00001934  6700 00A4                929      beq processEnemytr
00001938  0C79 0002 00001C24       930      cmpi #2, enemyDir
00001940  6700 00D0                931      beq processEnemybr
00001944  0C79 0003 00001C24       932      cmpi #3, enemyDir
0000194C  6700 00FE                933      beq processEnemyBl
00001950                           934  
00001950                           935      ; no valid direction placed. just put enemy at the top
00001950  6000 0052                936      bra processEnemyTl
00001954                           937  
00001954                           938  enemyColCheck:
00001954  3439 00001C24            939      move.w enemyDir, d2
0000195A                           940      ; colCheck based on direction
0000195A  0C79 0000 00001C24       941      cmpi #0, enemyDir
00001962  6700 0108                942      beq enemyLeftColCheck
00001966                           943  
00001966  0C79 0001 00001C24       944      cmpi #1, enemyDir
0000196E  6700 00FC                945      beq enemyLeftColCheck
00001972                           946  
00001972  0C79 0002 00001C24       947      cmpi #2, enemyDir
0000197A  6700 00FE                948      beq enemyRightColCheck
0000197E                           949  
0000197E  0C79 0003 00001C24       950      cmpi #3, enemyDir
00001986  6700 00F2                951      beq enemyRightColCheck
0000198A                           952  
0000198A                           953      ; no valid direction. nothing we can do atp
0000198A  4E75                     954      rts
0000198C                           955  
0000198C                           956  ;-------------------------------ENEMY TOP
0000198C                           957  initEnemytl:
0000198C  21FC 00000000 18EC       958      move.l #0, enemyY
00001994  21FC 00000000 18E8       959      move.l #0, enemyX
0000199C  4EB9 00001A98            960      jsr endInitEnemy
000019A2  4E75                     961      rts
000019A4                           962  processEnemyTl:
000019A4  3A39 00001AA4            963      move.w enemyTime, d5
000019AA  4EB9 00001AAE            964      jsr checkIncrement
000019B0  6600 00E2                965      bne endProcess
000019B4                           966  
000019B4  52B8 18EC                967      add.l #1, enemyY
000019B8  52B8 18E8                968      add.l #1, enemyX
000019BC                           969  
000019BC  4EB8 1954                970      jsr enemyColCheck
000019C0                           971  
000019C0  6000 00D2                972      bra endProcess
000019C4                           973  
000019C4                           974  ;-------------------------------ENEMY LEFT
000019C4                           975  initEnemytr:
000019C4  21F8 11FE 18E8           976      move.l screenW, enemyX
000019CA  21FC 00000000 18EC       977      move.l #0, enemyY
000019D2  4EB9 00001A98            978      jsr endInitEnemy
000019D8  4E75                     979      rts
000019DA                           980  processEnemytr:
000019DA  3A39 00001AA4            981      move.w enemyTime, d5
000019E0  4EB9 00001AAE            982      jsr checkIncrement
000019E6  6600 00AC                983      bne endProcess
000019EA                           984  
000019EA  52B8 18EC                985      add.l #1, enemyY
000019EE  53B8 18E8                986      sub.l #1, enemyX
000019F2                           987  
000019F2  4EB8 1954                988      jsr enemyColCheck
000019F6                           989  
000019F6  6000 009C                990      bra endProcess
000019FA                           991  
000019FA                           992  
000019FA                           993  
000019FA                           994  ;-------------------------------ENEMY RIGHT
000019FA                           995  initEnemybr:
000019FA  4282                     996      clr.l d2
000019FC  3438 11FE                997      move.w screenW, d2
00001A00  21C2 18E8                998      move.l d2, enemyX
00001A04                           999  
00001A04  21F8 1200 18EC          1000      move.l screenH, enemyY
00001A0A                          1001  
00001A0A  4EB9 00001A98           1002      jsr endInitEnemy
00001A10  4E75                    1003      rts
00001A12                          1004  processEnemybr:
00001A12  3A39 00001AA4           1005      move.w enemyTime, d5
00001A18  4EB9 00001AAE           1006      jsr checkIncrement
00001A1E  6600 0074               1007      bne endProcess
00001A22                          1008  
00001A22  53B8 18EC               1009      sub.l #1, enemyY
00001A26  53B8 18E8               1010      sub.l #1, enemyX
00001A2A                          1011  
00001A2A  4EB8 1954               1012      jsr enemyColCheck
00001A2E                          1013  
00001A2E  6000 0064               1014      bra endProcess
00001A32                          1015  
00001A32                          1016  ;-------------------------------ENEMY BOTTOM
00001A32                          1017  initEnemyBl:
00001A32  4282                    1018      clr.l d2
00001A34  3438 1200               1019      move.w screenH, d2
00001A38  21C2 18EC               1020      move.l d2, enemyY
00001A3C                          1021  
00001A3C  21FC 00000000 18E8      1022      move.l #0, enemyX
00001A44                          1023  
00001A44  4EB9 00001A98           1024      jsr endInitEnemy
00001A4A  4E75                    1025      rts
00001A4C                          1026  processEnemyBl:
00001A4C  3A39 00001AA4           1027      move.w enemyTime, d5
00001A52  4EB9 00001AAE           1028      jsr checkIncrement
00001A58  6600 003A               1029      bne endProcess
00001A5C                          1030  
00001A5C  53B8 18EC               1031      sub.l #1, enemyY
00001A60  52B8 18E8               1032      add.l #1, enemyX
00001A64                          1033  
00001A64  4EB8 1954               1034      jsr enemyColCheck
00001A68                          1035  
00001A68  6000 002A               1036      bra endProcess
00001A6C                          1037  
00001A6C                          1038  ;----------COLLISION
00001A6C                          1039  enemyLeftColCheck:
00001A6C  2438 13E6               1040      move.l celltlX, d2
00001A70                          1041      ;sub.l #enemyW, d2
00001A70  B4B8 18E8               1042      cmp.l enemyX, d2
00001A74  6700 0018               1043      beq enemyCollide
00001A78  4E75                    1044      rts
00001A7A                          1045  
00001A7A                          1046  enemyRightColCheck:
00001A7A  2438 13EE               1047      move.l cellbrx, d2
00001A7E  0482 00000010           1048      sub.l #enemyw, d2
00001A84  B4B8 18E8               1049      cmp.l enemyX, d2
00001A88  6700 0004               1050      beq enemyCollide
00001A8C  4E75                    1051      rts
00001A8E                          1052  
00001A8E                          1053  ;---------------OTHER STUFF
00001A8E                          1054  enemyCollide: ; enemy successfully reached the base
00001A8E  4EB8 18F0               1055      jsr initEnemy
00001A92  4E75                    1056      rts
00001A94                          1057  
00001A94                          1058  endProcess:
00001A94  4E75                    1059      rts
00001A96                          1060  endCollide:
00001A96  4E75                    1061      rts
00001A98                          1062  endInitEnemy:
00001A98  5DB8 18EC               1063      sub.l #enemyHalfH, enemyY
00001A9C  51B8 18E8               1064      sub.l #enemyHalfW, enemyX
00001AA0  4E75                    1065      rts
00001AA2                          1066  
00001AA2                          1067  -------------------- end include --------------------
00001AA2                          1068   include "map/timings.x68"
00001AA2                          1069  ; this file contains timing stuff
00001AA2                          1070  
00001AA2= 000A                    1071  playerTime dc.w 10
00001AA4= 001E                    1072  enemyTime dc.w 30
00001AA6= 0028                    1073  healTime dc.w 40
00001AA8= 07D0                    1074  enemySpawnTimer dc.w 2000
00001AAA                          1075  
00001AAA                          1076  increment: ; D6 permanently used up
00001AAA  5246                    1077      add.w #1, d6
00001AAC  4E75                    1078      rts
00001AAE                          1079  
00001AAE                          1080  checkIncrement: ; d5 has been given check value
00001AAE  3806                    1081      move.w d6, d4 ; dont wanna mess up d6
00001AB0  88C5                    1082      divu d5, d4
00001AB2  383C 0000               1083      move.w #0, d4
00001AB6  4844                    1084      swap d4
00001AB8                          1085      ; d4 low word contains modulo
00001AB8                          1086      ; compare w/ 0
00001AB8  4A44                    1087      tst d4
00001ABA                          1088      ; thingy contains whether they were equal
00001ABA  4E75                    1089      rts
00001ABA  4E75                    1090  -------------------- end include --------------------
00001ABC                          1091   include "map/enemyManager.x68"
00001ABC                          1092  ;ENEMY 1
00001ABC= 00000000                1093  enemy1x dc.l 00
00001AC0= 00000000                1094  enemy1y dc.l 00
00001AC4                          1095  
00001AC4                          1096  ;ENEMY 2
00001AC4= 00000032                1097  enemy2x dc.l 50
00001AC8= 00000032                1098  enemy2y dc.l 50
00001ACC                          1099  
00001ACC                          1100  ;ENEMY 3
00001ACC= 00000064                1101  enemy3x dc.l 100
00001AD0= 00000064                1102  enemy3y dc.l 100
00001AD4                          1103  
00001AD4                          1104  ;ENEMY 4
00001AD4= 00000096                1105  enemy4x dc.l 150
00001AD8= 00000096                1106  enemy4y dc.l 150
00001ADC                          1107  
00001ADC= 01                      1108  enemyIndex dc.b 1
00001ADD                          1109  
00001ADD                          1110  ; current enemy spawn
00001ADE                          1111  currentSpawnX ds.l 01
00001AE2                          1112  currentSpawnY ds.l 01
00001AE6                          1113  
00001AE6                          1114  initAllEnemies:
00001AE6  21FC 00000000 1ABC      1115      move.l #0, enemy1x
00001AEE  21FC 00000000 1AC0      1116      move.l #0, enemy1y
00001AF6                          1117  
00001AF6  21FC 00000032 1AC4      1118      move.l #50, enemy2x
00001AFE  21FC 00000032 1AC8      1119      move.l #50, enemy2y
00001B06                          1120  
00001B06  21FC 00000064 1ACC      1121      move.l #100, enemy3x
00001B0E  21FC 00000064 1AD0      1122      move.l #100, enemy3y
00001B16                          1123  
00001B16  21FC 00000096 1AD4      1124      move.l #150, enemy4x
00001B1E  21FC 00000096 1AD8      1125      move.l #150, enemy4y
00001B26                          1126  
00001B26                          1127  processEnemies:
00001B26  31FC 0001 1ADC          1128      move.w #1, enemyIndex
00001B2C  6000 0002               1129      bra processEnemiesLoop
00001B30                          1130  processEnemiesLoop:
00001B30  4EB9 00001B50           1131      jsr getCurrentEnemy
00001B36  4EB8 1922               1132      jsr processEnemy
00001B3A  4EB9 00001BBA           1133      jsr saveCurrentEnemy
00001B40  5278 1ADC               1134      add.w #1, enemyIndex
00001B44                          1135  
00001B44  3438 1ADC               1136      move.w enemyIndex, d2
00001B48  0C42 0005               1137      cmpi.w #5, d2
00001B4C  66E2                    1138      bne processEnemiesLoop
00001B4E  4E75                    1139      rts
00001B50                          1140  
00001B50                          1141  
00001B50                          1142  getCurrentEnemy:
00001B50  3438 1ADC               1143      move.w enemyIndex, d2
00001B54  0C42 0001               1144      cmpi.w #1, d2
00001B58  6700 0028               1145      beq getEnemy1
00001B5C                          1146  
00001B5C  3438 1ADC               1147      move.w enemyIndex, d2
00001B60  0C42 0002               1148      cmpi.w #2, d2
00001B64  6700 002A               1149      beq getEnemy2
00001B68                          1150  
00001B68  3438 1ADC               1151      move.w enemyIndex, d2
00001B6C  0C42 0003               1152      cmpi.w #3, d2
00001B70  6700 002C               1153      beq getEnemy3
00001B74                          1154  
00001B74  3438 1ADC               1155      move.w enemyIndex, d2
00001B78  0C42 0004               1156      cmpi.w #4, d2
00001B7C  6700 002E               1157      beq getEnemy4
00001B80  4E75                    1158      rts
00001B82                          1159  getEnemy1:
00001B82  21F8 1ABC 18E8          1160      move.l enemy1x, enemyX
00001B88  21F8 1AC0 18EC          1161      move.l enemy1y, enemyY
00001B8E  4E75                    1162      rts
00001B90                          1163  getEnemy2:
00001B90  21F8 1AC4 18E8          1164      move.l enemy2x, enemyX
00001B96  21F8 1AC8 18EC          1165      move.l enemy2y, enemyY
00001B9C  4E75                    1166      rts
00001B9E                          1167  getEnemy3:
00001B9E  21F8 1ACC 18E8          1168      move.l enemy3x, enemyX
00001BA4  21F8 1AD0 18EC          1169      move.l enemy3y, enemyY
00001BAA  4E75                    1170      rts
00001BAC                          1171  getEnemy4:
00001BAC  21F8 1AD4 18E8          1172      move.l enemy4x, enemyX
00001BB2  21F8 1AD8 18EC          1173      move.l enemy4y, enemyY
00001BB8  4E75                    1174      rts
00001BBA                          1175  
00001BBA                          1176  saveCurrentEnemy:
00001BBA  3438 1ADC               1177      move.w enemyIndex, d2
00001BBE  0C42 0001               1178      cmpi.w #1, d2
00001BC2  6700 0028               1179      beq saveEnemy1
00001BC6                          1180  
00001BC6  3438 1ADC               1181      move.w enemyIndex, d2
00001BCA  0C42 0002               1182      cmpi.w #2, d2
00001BCE  6700 002A               1183      beq saveEnemy2
00001BD2                          1184  
00001BD2  3438 1ADC               1185      move.w enemyIndex, d2
00001BD6  0C42 0003               1186      cmpi.w #3, d2
00001BDA  6700 002C               1187      beq saveEnemy3
00001BDE                          1188  
00001BDE  3438 1ADC               1189      move.w enemyIndex, d2
00001BE2  0C42 0004               1190      cmpi.w #4, d2
00001BE6  6700 002E               1191      beq saveEnemy4
00001BEA  4E75                    1192      rts
00001BEC                          1193  
00001BEC                          1194  saveEnemy1:
00001BEC  21F8 18E8 1ABC          1195      move.l enemyx, enemy1X
00001BF2  21F8 18EC 1AC0          1196      move.l enemyy, enemy1Y
00001BF8  4E75                    1197      rts
00001BFA                          1198  saveEnemy2:
00001BFA  21F8 18E8 1AC4          1199      move.l enemyx, enemy2X
00001C00  21F8 18EC 1AC8          1200      move.l enemyy, enemy2Y
00001C06  4E75                    1201      rts
00001C08                          1202  saveEnemy3:
00001C08  21F8 18E8 1ACC          1203      move.l enemyx, enemy3X
00001C0E  21F8 18EC 1AD0          1204      move.l enemyy, enemy3Y
00001C14  4E75                    1205      rts
00001C16                          1206  saveEnemy4:
00001C16  21F8 18E8 1AD4          1207      move.l enemyx, enemy4X
00001C1C  21F8 18EC 1AD8          1208      move.l enemyy, enemy4Y
00001C22  4E75                    1209      rts
00001C24                          1210  
00001C24                          1211  ; current enemy dir
00001C24= 0000                    1212  enemyDir dc.w 0000
00001C24= 0000                    1213  -------------------- end include --------------------
00001C26                          1214   include "map/camera.x68"
00001C26                          1215  ; this file contains camera information
00001C26                          1216  
00001C26= 000000A0                1217  cameraOffsetX dc.l 160
00001C2A= 00000078                1218  cameraOffsetY dc.l 120
00001C2E= 00000000                1219  cameraX dc.l 0
00001C32= 00000000                1220  cameraY dc.l 0
00001C36= 0002                    1221  cameraZoom dc.w 02
00001C38                          1222  
00001C38= 0000                    1223  isFollow dc.w 0
00001C3A                          1224  
00001C3A                          1225  followCam:
00001C3A  4A78 1C38               1226      tst isFollow
00001C3E  6700 001C               1227      beq endFollow
00001C42                          1228  
00001C42  2438 11E2               1229      move.l playerX, d2
00001C46  2638 11E6               1230      move.l playerY, d3
00001C4A  94B8 1C26               1231      sub.l cameraOffsetX, d2
00001C4E  96B8 1C2A               1232      sub.l cameraOffsetY, d3
00001C52                          1233  
00001C52  21C2 1C2E               1234      move.l d2, cameraX
00001C56  21C3 1C32               1235      move.l d3, cameraY
00001C5A  4E75                    1236      RTS
00001C5C                          1237  endFollow:
00001C5C  4E75                    1238      rts
00001C5E                          1239  
00001C5E                          1240  toggleFollow:
00001C5E  3438 1C38               1241      move.w isFollow, d2
00001C62  4A42                    1242      tst.w d2
00001C64  6700 000A               1243      beq turnOnFollow
00001C68  31FC 0000 1C38          1244      move.w #0, isFollow
00001C6E  4E75                    1245      rts
00001C70                          1246  
00001C70                          1247  turnOnFollow:
00001C70  31FC 0001 1C38          1248      move.w #1, isFollow
00001C76  4E75                    1249      rts
00001C76  4E75                    1250  -------------------- end include --------------------
00001C78                          1251   include "map/input.x68"
00001C78= 0000                    1252  lvlType dc.w 0
00001C7A                          1253  
00001C7A                          1254  ; types:
00001C7A                          1255  ; 0: menu
00001C7A                          1256  ; 1: map
00001C7A                          1257  ; 2: run
00001C7A                          1258  
00001C7A                          1259  testinput:
00001C7A                          1260      ; getting previous key
00001C7A  11F8 11D8 11DC          1261      move.b currentkey, lastkey
00001C80                          1262  
00001C80                          1263      ; set d1 to $0000 0000
00001C80  7200                    1264      move.l #0, d1
00001C82                          1265  
00001C82                          1266      ; put "get input" code into d0
00001C82  103C 0013               1267      move.b #tcinp, d0
00001C86  4E4F                    1268      trap #15
00001C88  11C1 11D8               1269      move.b d1, currentkey
00001C8C  4E4F                    1270      trap #15
00001C8E                          1271      
00001C8E                          1272      ; AT THIS POINT, CURRENT KEY CONTAINS THE CURRENT/LAST KEY PRESSED,
00001C8E                          1273      ; AND D1 CONTAINS WHETHER OR NOT IT IS STILL PRESSED
00001C8E                          1274      
00001C8E                          1275      ; test if no input
00001C8E  0C01 0000               1276      cmpi.b #0, d1
00001C92  6700 0032               1277      beq noinput     ; if no input, move to noinput
00001C96                          1278      
00001C96  4EB9 00001CD6           1279      jsr commonInput ; happens in any level
00001C9C                          1280  
00001C9C                          1281  
00001C9C  4A78 1C78               1282      TST.w lvlType
00001CA0                          1283      IF <EQ> THEN
00001CA4  6100 004E               1284          BSR menuInput ; happens in menu
00001CA8                          1285      endi
00001CA8  0C78 0001 1C78          1286      cmp.w #1, lvlType
00001CAE                          1287      IF <EQ> THEN
00001CB2  6100 004C               1288          BSR mapInput ; happens in map
00001CB6                          1289      endi
00001CB6  0C78 0002 1C78          1290      cmp.w #2, lvlType
00001CBC                          1291      IF <EQ> THEN
00001CC0  6100 0326               1292          BSR runInput ; happens in run
00001CC4                          1293      ENDI
00001CC4                          1294      
00001CC4  4E75                    1295      rts             ; return to loop
00001CC6                          1296  
00001CC6                          1297  noinput:
00001CC6                          1298      ; go back to loop
00001CC6  11FC 0000 11D8          1299      move.b #0, currentKey
00001CCC  11FC 0000 11DC          1300      move.b #0, lastkey
00001CD2  4E75                    1301      rts
00001CD4                          1302  
00001CD4= 0001                    1303  inputType dc.w 1
00001CD6                          1304  
00001CD6                          1305  commonInput:
00001CD6                          1306      ; at this point, keycode in currentkey is pressed
00001CD6                          1307  
00001CD6                          1308      ; OPTIONS
00001CD6  0C38 001B 11D8          1309      cmpi.b #escapeKey, currentkey ; pause
00001CDC  6700 009C               1310      beq escapepressed
00001CE0  0C38 0030 11D8          1311      cmpi.b #key0, currentKey ; fullscreen
00001CE6  6700 00A6               1312      beq key0pressed
00001CEA                          1313  
00001CEA  4A38 11E0               1314      tst.b isPaused
00001CEE  6600 0072               1315      bne pausedInput
00001CF2  4E75                    1316      RTS
00001CF4                          1317  
00001CF4                          1318  menuInput:
00001CF4  0C38 000D 11D8          1319      cmpi.b #enterKey, currentKey
00001CFA  6700 F3C2               1320      beq mapInit
00001CFE  4E75                    1321      rts
00001D00                          1322  
00001D00                          1323  mapinput:
00001D00                          1324      ; at this point, keycode in currentkey is pressed
00001D00                          1325  
00001D00                          1326      ; map buttons
00001D00  0C38 005A 11D8          1327      cmpi.b #zKey, currentKey
00001D06  6700 009A               1328      beq zPressed
00001D0A                          1329  
00001D0A                          1330      ; only move player if correct time
00001D0A  3A38 1AA2               1331      move.w playerTime, d5
00001D0E  4EB8 1AAE               1332      jsr checkIncrement
00001D12  6600 0064               1333      bne endInput
00001D16                          1334  
00001D16                          1335      ; only when not paused
00001D16                          1336  
00001D16  0C38 000D 11D8          1337      cmpi.b #enterKey, currentKey
00001D1C  6700 F42A               1338      beq collision
00001D20                          1339  
00001D20  6000 0004               1340      bra mapMoveInput
00001D24                          1341  
00001D24                          1342      ;cmpi.b #wkey, currentkey ; W:UP
00001D24                          1343      ;beq wpressed
00001D24                          1344      ;cmpi.b #akey, currentkey ; A:LEFT
00001D24                          1345      ;beq apressed
00001D24                          1346      ;cmpi.b #skey, currentkey ; S:DOWN
00001D24                          1347      ;beq spressed
00001D24                          1348      ;cmpi.b #dkey, currentkey ; D:RIGHT
00001D24                          1349      ;beq dpressed
00001D24  4E75                    1350      RTS
00001D26                          1351  
00001D26                          1352  mapMoveInput:
00001D26  223C 57415344           1353      move.l #wasdKeys, d1
00001D2C  103C 0013               1354      move.b #tcinp, d0
00001D30  4E4F                    1355      trap #15
00001D32                          1356  
00001D32  0801 0018               1357      BTST.L  #24,D1
00001D36                          1358      IF <NE> THEN
00001D3A  6100 0088               1359          BSR    wPressed
00001D3E                          1360      ENDI
00001D3E                          1361  
00001D3E                          1362      ;MOVE.L  CURRENT_KEY, D1
00001D3E  0801 0010               1363      BTST.L  #16,D1
00001D42                          1364      IF <NE> THEN
00001D46  6100 0090               1365          BSR    aPressed
00001D4A                          1366      ENDI
00001D4A                          1367  
00001D4A                          1368      ;MOVE.L  CURRENT_KEY, D1
00001D4A  0801 0008               1369      BTST.L  #8,D1
00001D4E                          1370      IF <NE> THEN
00001D52  6100 0098               1371          BSR    sPressed
00001D56                          1372      ENDI
00001D56                          1373  
00001D56                          1374      ;MOVE.L  CURRENT_KEY, D1
00001D56  0801 0000               1375      BTST.L  #0,D1
00001D5A                          1376      IF <NE> THEN
00001D5E  6100 00A2               1377          BSR    dPressed
00001D62                          1378      ENDI
00001D62                          1379  
00001D62                          1380  pausedInput:
00001D62  0C38 0031 11D8          1381      cmpi.b #key1, currentkey
00001D68  6700 0046               1382      beq key1pressed
00001D6C                          1383  
00001D6C  0C38 0032 11D8          1384      cmpi.b #key2, currentkey
00001D72  6700 0044               1385      beq key2pressed
00001D76                          1386  
00001D76                          1387      ;cmpi.b #key3, currentkey
00001D76                          1388      ;beq key3pressed
00001D76                          1389  
00001D76  4E75                    1390      rts
00001D78                          1391  
00001D78                          1392  endInput:
00001D78  4E75                    1393      rts
00001D7A                          1394  
00001D7A                          1395  ; INPUTS
00001D7A                          1396  escapePressed:
00001D7A  1A38 11DC               1397      move.b lastkey, d5
00001D7E  BA38 11D8               1398      cmp.b currentKey, d5
00001D82  6600 0004               1399      bne escapeJustPressed
00001D86  4E75                    1400      rts
00001D88                          1401  escapeJustPressed:
00001D88  4EB8 117A               1402      jsr togglePause
00001D8C  4E75                    1403      rts
00001D8E                          1404  
00001D8E                          1405  key0pressed:
00001D8E  1A38 11DC               1406      move.b lastkey, d5
00001D92  BA38 11D8               1407      cmp.b currentKey, d5
00001D96  6600 0004               1408      bne key0justPressed
00001D9A  4E75                    1409      rts
00001D9C                          1410  key0justPressed:
00001D9C  4EB8 180A               1411      jsr toggleFullScreen
00001DA0  4E75                    1412      rts
00001DA2                          1413  
00001DA2                          1414  zPressed:
00001DA2  1A38 11DC               1415      move.b lastkey, d5
00001DA6  BA38 11D8               1416      cmp.b currentKey, d5
00001DAA  6600 FEB2               1417      bne toggleFollow ; z just pressed
00001DAE  4E75                    1418      rts
00001DB0                          1419  
00001DB0                          1420  key1pressed: ; quit
00001DB0  4EB8 117A               1421      jsr togglePause
00001DB4  6000 F402               1422      bra end
00001DB8                          1423  key2pressed: ; main menu
00001DB8  4EB8 117A               1424      jsr togglePause
00001DBC  4EB8 1164               1425      jsr clearscreen
00001DC0  6000 F23E               1426      bra start
00001DC4                          1427  
00001DC4                          1428  ; MOVEMENT INPUT: MUST STAY WITHIN CELL BOUNDARIES
00001DC4                          1429  wpressed:
00001DC4  2638 11E6               1430      move.l playerY, d3 ; check boundary with proposed movement
00001DC8  5383                    1431      sub.l #1, D3
00001DCA  B6B8 13EA               1432      cmp.l celltlY, d3
00001DCE  6700 0048               1433      beq endMovement
00001DD2                          1434  
00001DD2  53B8 11E6               1435      sub.l #1, playerY
00001DD6  4E75                    1436      rts
00001DD8                          1437  apressed:
00001DD8  2638 11E2               1438      move.l playerX, d3 ; check boundary with proposed movement
00001DDC  5383                    1439      sub.l #1, D3
00001DDE  B6B8 13E6               1440      cmp.l celltlX, d3
00001DE2  6700 0034               1441      beq endMovement
00001DE6                          1442  
00001DE6  53B8 11E2               1443      sub.l #1, playerX
00001DEA  4E75                    1444      rts
00001DEC                          1445  spressed:
00001DEC  2638 11E6               1446      move.l playerY, d3 ; check boundary with proposed movement
00001DF0  5283                    1447      add.l #1, D3
00001DF2  5083                    1448      add.l #playerH, d3 ; player size taken into consideration
00001DF4  B6B8 13F2               1449      cmp.l cellBrY, d3
00001DF8  6700 001E               1450      beq endMovement
00001DFC                          1451  
00001DFC  52B8 11E6               1452      add.l #1, playerY
00001E00  4E75                    1453      rts
00001E02                          1454  dpressed:
00001E02  2638 11E2               1455      move.l playerX, d3 ; check boundary with proposed movement
00001E06  5283                    1456      add.l #1, D3
00001E08  5083                    1457      add.l #playerW, d3 ; player size taken into consideration
00001E0A  B6B8 13EE               1458      cmp.l cellBrX, d3
00001E0E  6700 0008               1459      beq endMovement
00001E12                          1460  
00001E12  52B8 11E2               1461      add.l #1, playerX
00001E16  4E75                    1462      rts
00001E18                          1463  
00001E18                          1464  endMovement:
00001E18  4E75                    1465      rts
00001E18  4E75                    1466  -------------------- end include --------------------
00001E1A                          1467  
00001E1A                          1468   include "Running/RUNtestMelee2.x68"
00001E1A                          1469  
00001E1A  =00000021               1470  TC_SCREEN   EQU         33          ; Screen size information trap code
00001E1A  =00000000               1471  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001E1A                          1472                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001E1A  =00000013               1473  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001E1A  =0000005C               1474  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001E1A  =0000000B               1475  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001E1A                          1476  
00001E1A  =0000005E               1477  TC_REDRAW   EQU         94          ; Redraw Screen
00001E1A  =00000009               1478  TC_EXIT     EQU         09          ; Exit Trapcode
00001E1A                          1479  
00001E1A  =00000014               1480  PLYR_W_INIT EQU         20          ; Players initial Width
00001E1A  =0000000C               1481  PLYR_H_INIT EQU         12          ; Players initial Height
00001E1A                          1482  
00001E1A  =00000000               1483  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001E1A  =FFFFFFED               1484  PLYR_JUMP_V EQU         -19          ; Player Jump Velocity
00001E1A  =00000001               1485  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001E1A                          1486  
00001E1A  =00000001               1487  GND_TRUE    EQU         01          ; Player on Ground True
00001E1A  =00000000               1488  GND_FALSE   EQU         00          ; Player on Ground False
00001E1A                          1489  
00001E1A  =00000000               1490  GAMEOVER_INDEX   EQU             00          ; Player Run Sound Index  
00001E1A  =00000001               1491  JMP_INDEX   EQU             01          ; Player Jump Sound Index  
00001E1A  =00000002               1492  HITHURT_INDEX  EQU          02          ; Player Opps Sound Index
00001E1A  =00000003               1493  POWERUP_INDEX  EQU          03          ; Player Opps Sound Index
00001E1A  =00000004               1494  LEVELCHANGE_INDEX  EQU      04          ; Player Opps Sound Index
00001E1A                          1495  
00001E1A  =0000000C               1496  ENMY_W_INIT EQU         12          ; Enemy initial Width
00001E1A  =0000000C               1497  ENMY_H_INIT EQU         12          ; Enemy initial Height
00001E1A  =0000000C               1498  ENEMY_H_INIT EQU         12          ; Enemy initial Height
00001E1A                          1499  
00001E1A  =00000014               1500  FLY_ENMY_W_INIT  EQU         20          ; Enemy initial Width
00001E1A  =0000000C               1501  FLY_ENMY_H_INIT  EQU         12          ; Enemy initial Height
00001E1A                          1502  
00001E1A  =0000000C               1503  HEALTH_PACK_W    EQU         12          ; Enemy initial Width
00001E1A  =0000000C               1504  HEALTH_PACK_H    EQU         12          ; Enemy initial Height
00001E1A                          1505  
00001E1A  =00000002               1506  LOOKRIGHT   EQU         02          ; Look Right
00001E1A  =00000001               1507  LOOKLEFT    EQU         01          ; Look Left
00001E1A  =00FFFFFF               1508  WHITE           EQU     $00FFFFFF
00001E1A  =00000000               1509  BLACK           EQU     $00000000
00001E1A  =000000FF               1510  RED             EQU     $000000FF
00001E1A  =00FF0000               1511  BLUE            EQU     $00FF0000
00001E1A  =00566D19               1512  GREEN           EQU     $00566D19
00001E1A  =0044FF44               1513  LIFEGREEN       EQU     $0044FF44
00001E1A  =0019506D               1514  BROWN           EQU     $0019506D         ; Brown   
00001E1A  =00FFE2B0               1515  SKY             EQU     $00FFE2B0         ; Sky Blue
00001E1A                          1516  
00001E1A  =00000020               1517  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001E1A  =0000001B               1518  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001E1A  =00000052               1519  Rkey           EQU         $52         ; R ASCII Keycode
00001E1A  =00000041               1520  Akey           EQU         $41         ; A ASCII Keycode
00001E1A  =00000053               1521  Skey           EQU         $53         ; S ASCII Keycode
00001E1A  =00000044               1522  Dkey           EQU         $44         ; D ASCII Keycode
00001E1A  =0000004C               1523  Lkey           EQU         $4C         ; L ASCII Keycode
00001E1A                          1524  
00001E1A                          1525  INITRUN:
00001E1A  31FC 0002 1C78          1526      move.w #2, lvlType
00001E20                          1527  
00001E20                          1528      ; Initialise Sounds
00001E20  6100 07A8               1529      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001E24  6100 0786               1530      BSR     GAMEOVER_LOAD                ; Load Run Sound into Memory
00001E28  6100 07BE               1531      BSR     HITHURT_LOAD               ; Load Opps (Collision) Sound into Memory
00001E2C  6100 07D8               1532      BSR     POWERUP_LOAD               ; Load Opps (Collision) Sound into Memory
00001E30  6100 07F2               1533      BSR     LVLCHANGE_LOAD               ; Load Opps (Collision) Sound into Memory
00001E34                          1534  
00001E34                          1535      ; Screen Size
00001E34  103C 0021               1536      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001E38  7200                    1537      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001E3A  4E4F                    1538      TRAP    #15                     ; interpret D0 and D1 for screen size
00001E3C  33C1 00002D64           1539      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001E42  4841                    1540      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001E44  33C1 00002D62           1541      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001E4A                          1542  
00001E4A                          1543      ; Place the Player at the center of the screen
00001E4A  B381                    1544      EOR.L    D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E4C  3239 00002D62           1545      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001E52  82FC 0002               1546      DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001E56  23C1 00002D6C           1547      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001E5C                          1548  
00001E5C  B381                    1549      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E5E  3239 00002D64           1550      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001E64  82FC 0002               1551      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001E68  23C1 00002D70           1552      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001E6E                          1553  
00001E6E                          1554      ; Set the player starting width and height
00001E6E  13FC 0014 00002DBD      1555      MOVE.B  #PLYR_W_INIT,        PLAYER_WIDTH ; Players Width
00001E76  13FC 000C 00002DBE      1556      MOVE.B  #PLYR_H_INIT,        PLAYER_HEIGHT ; Players Width
00001E7E                          1557  
00001E7E  B381                    1558      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E80  3239 00002D64           1559      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001E86  82FC 0002               1560      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001E8A  23C1 00002D70           1561      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001E90                          1562  
00001E90                          1563      ; Initialise Player Score
00001E90  B381                    1564      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E92  7200                    1565      MOVE.L  #00,        D1          ; Init Score
00001E94  23C1 00002D74           1566      MOVE.L  D1,         PLAYER_SCORE
00001E9A                          1567  
00001E9A                          1568      ; Initialise Player Velocity
00001E9A  B381                    1569      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001E9C  123C 0000               1570      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001EA0  23C1 00002D78           1571      MOVE.L  D1,         PLYR_VELOCITY
00001EA6                          1572  
00001EA6                          1573      ; Initialise Player Gravity
00001EA6  B381                    1574      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EA8  7201                    1575      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001EAA  23C1 00002D7C           1576      MOVE.L  D1,         PLYR_GRAVITY
00001EB0                          1577  
00001EB0                          1578      ; Initialize Player on Ground
00001EB0  23FC 00000001 00002D80  1579      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001EBA                          1580  
00001EBA                          1581      ; Initial Position for Enemy
00001EBA  B381                    1582      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EBC  3239 00002D62           1583      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001EC2  23C1 00002D86           1584      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001EC8                          1585  
00001EC8  B381                    1586      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001ECA  3239 00002D64           1587      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001ED0  82FC 0002               1588      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001ED4  23C1 00002D8A           1589      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001EDA                          1590  
00001EDA                          1591      ; Initialise the starting enemy width and height
00001EDA  33FC 000C 00002DC0      1592      MOVE.W  #12,        ENEMY_WIDTH ; Enemy Width
00001EE2  33FC 000C 00002DC2      1593      MOVE.W  #12,        ENEMY_HEIGHT ; Enemy Height
00001EEA                          1594  
00001EEA                          1595      ; Initial Position for Flying Enemy
00001EEA  B381                    1596      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EEC  3239 00002D62           1597      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001EF2  23C1 00002D96           1598      MOVE.L  D1,         FLYINGENEMY_X     ; Enemy X Position
00001EF8                          1599  
00001EF8  B381                    1600      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001EFA  3239 00002D64           1601      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001F00  82FC 0002               1602      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001F04  0441 003C               1603      SUB.W   #60,        D1
00001F08  23C1 00002D9A           1604      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
00001F0E                          1605      
00001F0E                          1606      ; Initial Flying enemy width and height
00001F0E  33FC 0014 00002DC4      1607      MOVE.W  #20,        FLYENEMY_WIDTH ; Enemy Width
00001F16  33FC 000C 00002DC6      1608      MOVE.W  #12,        FLYENEMY_HEIGHT ; Enemy Height
00001F1E                          1609      ; Initial Position for Health pack
00001F1E  B381                    1610      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F20  3239 00002D62           1611      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001F26  0481 FFFFFFFF           1612      SUB.L   #-1,        D1
00001F2C  23C1 00002D8E           1613      MOVE.L  D1,         HEALTH_X     ; Enemy X Position
00001F32                          1614  
00001F32  B381                    1615      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001F34  3239 00002D64           1616      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001F3A  82FC 0002               1617      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001F3E  23C1 00002D92           1618      MOVE.L  D1,         HEALTH_Y     ; Enemy Y Position
00001F44                          1619  
00001F44                          1620  
00001F44  45F9 00002D52           1621      LEA    LEVELS,      A2
00001F4A  13FC 0005 00002DAA      1622      MOVE.B  #05,        LIVES
00001F52  13FC 0002 00002DAB      1623      MOVE.B  #02,        POINTS
00001F5A  13FC 0000 00002D4B      1624      MOVE.B  #00,        DRAW_HEALTHPACKS
00001F62  13FC 0000 00002D4C      1625      MOVE.B  #00,        SPAWN_HEALTHPACKS
00001F6A  33FC 0140 00002E0C      1626      MOVE.W  #320,       Z
00001F72  33FC 0004 00002E0E      1627      MOVE.W  #4,         SCALER   
00001F7A  33FC FFB0 00002E10      1628      MOVE.W  #-80,       WIDTH     
00001F82                          1629  
00001F82  4281                    1630      CLR.L   D1
00001F84                          1631      ; load tree 
00001F84  7032                    1632      MOVE.L  #50,D0
00001F86  4E4F                    1633      TRAP    #15
00001F88  43F9 00002E12           1634      LEA     titleBmp,A1
00001F8E  7033                    1635      MOVE.L  #51,D0
00001F90  4E4F                    1636      TRAP    #15
00001F92                          1637      
00001F92  43F9 00002E26           1638      LEA     SPRITE_DATA,A1
00001F98  243C 000007B6           1639      MOVE.L  #1974,D2
00001F9E  7035                    1640      MOVE.L  #53,D0
00001FA0  4E4F                    1641      TRAP #15
00001FA2                          1642  
00001FA2                          1643  
00001FA2                          1644      ; Enable the screen back buffer(see easy 68k help)
00001FA2  103C 005C               1645      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001FA6  123C 0011               1646      MOVE.B  #17,        D1          ; Combine Tasks
00001FAA  4E4F                    1647      TRAP    #15                     ; Trap (Perform action)
00001FAC                          1648          
00001FAC                          1649      ; Clear the screen (see easy 68k help)
00001FAC  103C 000B               1650      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001FB0  323C FF00               1651      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001FB4  4E4F                    1652      TRAP    #15                     ; Trap (Perform action)
00001FB6                          1653  
00001FB6                          1654  
00001FB6  6000 0002               1655      bra gameloop
00001FBA                          1656  
00001FBA                          1657  GAME:
00001FBA                          1658     
00001FBA                          1659  STARTSCREEN:
00001FBA                          1660           
00001FBA                          1661      ;MOVE.L     #$01090000,D2
00001FBA                          1662      ;MOVE.L     #$00FFFFFF,D1
00001FBA                          1663      ;MOVE.B     #21,D0
00001FBA                          1664      ;TRAP       #15
00001FBA                          1665       
00001FBA                          1666       ;INCLUDE    "ROTATINGSQUARE.X68"
00001FBA                          1667       ;MOVE.B     #04,D0
00001FBA                          1668       ;TRAP       #15
00001FBA                          1669      
00001FBA                          1670  GAMELOOP:
00001FBA                          1671      ; Main Gameloop
00001FBA  23FC 00000BB8 00002E22  1672      MOVE.L      #3000,timer
00001FC4                          1673  DELAY:     
00001FC4  53B9 00002E22           1674      SUBI.L      #1,timer            ; decrement timer by 1 to simulate a delay
00001FCA  4AB9 00002E22           1675      TST.L       timer            ; compare 0 to the value of timer
00001FD0  66F2                    1676      BNE         DELAY               ; branch back to DELAY if the previous compare was not equal
00001FD2                          1677  
00001FD2  6100 0014               1678      BSR     runINPUT                   ; Check Keyboard Input
00001FD6  6100 00C2               1679      BSR     UPDATE                  ; Update positions and points
00001FDA  6100 0556               1680      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
00001FDE  6100 08F6               1681      BSR     CHECK_COLLISIONS        ; Check for Collisions
00001FE2  6100 02EC               1682      BSR     DRAWrun                    ; Draw the Scene
00001FE6                          1683                  ; Loop back to GameLoop
00001FE6  60D2                    1684      BRA     GAMELOOP    
00001FE8                          1685      
00001FE8                          1686  RunINPUT:
00001FE8  103C 0013               1687      MOVE.B  #TC_KEYCODE, D0          ; Check for pressed keys
00001FEC  223C 41444C20           1688      MOVE.L  #runActionKeys, D1          ; Check for A, D, L and Spacebar
00001FF2  4E4F                    1689      TRAP    #15                     ; Trap (Perform action)
00001FF4  23C1 00002D66           1690      MOVE.L  D1,         CURRENT_KEY ; Put Current Key in Memory
00001FFA                          1691  
00001FFA  0801 0018               1692      BTST.L  #24,D1
00001FFE                          1693      IF <NE> THEN
00002002  6100 014E               1694          BSR    MOVE_PLAYER_LEFT
00002006                          1695      ENDI
00002006                          1696  
00002006  2239 00002D66           1697      MOVE.L  CURRENT_KEY, D1
0000200C  0801 0010               1698      BTST.L  #16,D1
00002010                          1699      IF <NE> THEN
00002014  6100 015A               1700          BSR    MOVE_PLAYER_RIGHT
00002018                          1701      ENDI
00002018                          1702  
00002018  2239 00002D66           1703      MOVE.L  CURRENT_KEY, D1
0000201E  0801 0008               1704      BTST.L  #8,D1
00002022                          1705      IF <NE> THEN
00002026  6100 026A               1706          BSR    PERFORM_ATTACK
0000202A                          1707      ENDI
0000202A                          1708  
0000202A  2239 00002D66           1709      MOVE.L  CURRENT_KEY, D1
00002030  0801 0000               1710      BTST.L  #0,D1
00002034                          1711      IF <NE> THEN
00002038  6100 054C               1712          BSR    JUMP
0000203C                          1713      ENDI
0000203C  4E75                    1714      rts
0000203E                          1715  
0000203E                          1716      ; Process Input
0000203E  4281                    1717      CLR.L   D1                      ; Clear Data Register
00002040  4282                    1718      CLR.L   D2
00002042  103C 0013               1719      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
00002046  4E4F                    1720      TRAP    #15                     ; Trap (Perform action)
00002048  1401                    1721      MOVE.B  D1,         D2          ; Move last key D1 to D2
0000204A  B43C 0000               1722      CMP.B   #00,        D2          ; Key is pressed
0000204E  6700 000E               1723      BEQ     PROCESS_INPUT           ; Process Key
00002052  4E4F                    1724      TRAP    #15                     ; Trap for Last Key
00002054                          1725      ; Check if key still pressed
00002054  B23C 00FF               1726      CMP.B   #$FF,       D1          ; Is it still pressed
00002058  6700 0004               1727      BEQ     PROCESS_INPUT           ; Process Last Key
0000205C  4E75                    1728      RTS                             ; Return to subroutine
0000205E                          1729  PROCESS_INPUT:
0000205E  23C2 00002D66           1730      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00002064                          1731  
00002064                          1732      ; pause
00002064  0CB9 0000001B 00002D66  1733      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
0000206E  6700 FD0A               1734      BEQ     escapePressed
00002072                          1735  
00002072  4A38 11E0               1736      tst.b isPaused
00002076  6600 FCEA               1737      bne pausedInput
0000207A                          1738  
0000207A  4A39 00002DAA           1739      TST.B   LIVES
00002080  6700 0008               1740      BEQ     PROCESS_RESTART
00002084  6000 0524               1741      BRA     IDLE                    ; Or Idle
00002088  4E75                    1742      RTS                             ; Return to subroutine
0000208A                          1743  
0000208A                          1744  PROCESS_RESTART:
0000208A  0CB9 00000052 00002D66  1745      CMP.L   #Rkey,  CURRENT_KEY ; Is Current Key R
00002094  6700 FD84               1746      BEQ     INITrun
00002098  4E75                    1747      RTS                             ; Return to subroutine
0000209A                          1748  UPDATE:
0000209A                          1749      ; Update the Players Positon based on Velocity and Gravity
0000209A  4281                    1750      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000209C  2239 00002D78           1751      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
000020A2  2439 00002D7C           1752      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
000020A8  D282                    1753      ADD.L   D2,         D1          ; Add Gravity to Velocity
000020AA  23C1 00002D78           1754      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
000020B0  D2B9 00002D70           1755      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
000020B6  23C1 00002D70           1756      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position
000020BC  23C1 00002DB6           1757      MOVE.L  D1,         ATTACK_Y 
000020C2                          1758  
000020C2                          1759  
000020C2                          1760      ; Move the Enemy
000020C2  4281                    1761      CLR.L   D1                      ; Clear the contents of D0
000020C4  2239 00002D86           1762      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
000020CA  B2BC 00000000           1763      CMP.L   #00,        D1
000020D0  6F00 014E               1764      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
000020D4  6100 00D2               1765      BSR     MOVE_ENEMY              ; Move the Enemy
000020D8                          1766  
000020D8                          1767      ; Move flying enemy
000020D8  4281                    1768      CLR.L   D1                      ; Clear the contents of D0
000020DA  2239 00002D96           1769      MOVE.L  FLYINGENEMY_X,    D1          ; Move the Enemy X Position to D0
000020E0  B2BC 00000000           1770      CMP.L   #00,        D1
000020E6  6F00 0162               1771      BLE     RESET_FLYENEMY_POSITION    ; Reset Enemy if off Screen
000020EA                          1772  
000020EA  0CB9 00000000 00002D8E  1773      CMP.L   #00,        HEALTH_X
000020F4  6F00 0182               1774      BLE     RESET_HEALTH_POSITION
000020F8  6100 00A6               1775      BSR     MOVE_HEALTHPACK
000020FC                          1776  
000020FC  B381                    1777      EOR.L   D1,D1
000020FE  3239 00002E10           1778      MOVE.W  WIDTH,D1
00002104  B279 00002E0C           1779      CMP.W   Z,D1
0000210A  6C00 0082               1780      BGE     RESET_TREE
0000210E  6100 0088               1781      BSR     MOVE_TREE
00002112                          1782  
00002112  6100 0020               1783      BSR     CHECK_ATTACK_COOLDOWN
00002116                          1784  
00002116  4A79 00002DB0           1785      TST.W   ATTACK_TIME
0000211C  6600 0024               1786      BNE     ATTACK_TIME_SUB
00002120  13FC 0000 00002DAC      1787      MOVE.B  #00,        CURRENTLYATTACKING
00002128  23FC 000001E0 00002DB6  1788      MOVE.L  #480,        ATTACK_Y
00002132                          1789  
00002132  4E75                    1790      RTS                             ; Return to subroutine  
00002134                          1791  
00002134                          1792  CHECK_ATTACK_COOLDOWN:
00002134  0C79 0000 00002DAE      1793      CMP.W   #0, ATTACK_COOLDOWN
0000213C  6E00 000C               1794      BGT     ATTACK_COOLDOWN_SUB
00002140  4E75                    1795      RTS
00002142                          1796  
00002142                          1797  ATTACK_TIME_SUB:
00002142  5579 00002DB0           1798      SUB.W   #02,        ATTACK_TIME
00002148  4E75                    1799      RTS   
0000214A                          1800  ATTACK_COOLDOWN_SUB:
0000214A  5579 00002DAE           1801      SUB.W   #02,        ATTACK_COOLDOWN
00002150  4E75                    1802      RTS                            
00002152                          1803  
00002152                          1804  MOVE_PLAYER_LEFT:
00002152  13FC 0001 00002D84      1805      MOVE.B  #LOOKLEFT,        PLAYER_DIR
0000215A  2239 00002D6C           1806      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
00002160  5581                    1807      SUB.L   #02,        D1          ; Move Player Left
00002162  23C1 00002D6C           1808      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
00002168  55B9 00002DB2           1809      SUB.L   #02,        ATTACK_X
0000216E  4E75                    1810      RTS                             ; Return to subroutine    
00002170                          1811  
00002170                          1812  MOVE_PLAYER_RIGHT:
00002170  13FC 0002 00002D84      1813      MOVE.B  #LOOKRIGHT,        PLAYER_DIR
00002178  2239 00002D6C           1814      MOVE.L  PLAYER_X,   D1          ; Fetch Player X Position
0000217E  5481                    1815      ADD.L   #02,        D1          ; Move Player Right
00002180  23C1 00002D6C           1816      MOVE.L  D1,         PLAYER_X    ; Update Players X Position
00002186  54B9 00002DB2           1817      ADD.L   #02,        ATTACK_X
0000218C  4E75                    1818      RTS                             ; Return to subroutine
0000218E                          1819  
0000218E                          1820  RESET_TREE:
0000218E  33FC 0280 00002E0C      1821      MOVE.W  #640,Z
00002196  4E75                    1822      RTS
00002198                          1823  
00002198                          1824  MOVE_TREE:
00002198  5379 00002E0C           1825      SUB.W  #01,Z
0000219E  4E75                    1826      RTS
000021A0                          1827  
000021A0                          1828  MOVE_HEALTHPACK:
000021A0  55B9 00002D8E           1829      SUB.L   #02,        HEALTH_X
000021A6  4E75                    1830      RTS
000021A8                          1831  
000021A8                          1832  MOVE_ENEMY:
000021A8  45F9 00002D52           1833      LEA     LEVELS,      A2
000021AE  2A39 00002D74           1834      MOVE.L  PLAYER_SCORE,   D5
000021B4  2C1A                    1835      MOVE.L  (A2)+,       D6
000021B6  BA86                    1836      CMP.L   D6,   D5
000021B8  6E00 004C               1837      BGT     MOVE_ENEMY_L4
000021BC  2C1A                    1838      MOVE.L  (A2)+,       D6
000021BE  BA86                    1839      CMP.L   D6,   D5
000021C0  6E00 002E               1840      BGT     MOVE_ENEMY_L3
000021C4  2C1A                    1841      MOVE.L  (A2)+,       D6
000021C6  BA86                    1842      CMP.L   D6,   D5
000021C8  6E00 0010               1843      BGT     MOVE_ENEMY_L2
000021CC  57B9 00002D96           1844      SUB.L   #03,        FLYINGENEMY_X
000021D2  55B9 00002D86           1845      SUB.L   #02,        ENEMY_X     ; Move enemy by X Value
000021D8  4E75                    1846      RTS
000021DA                          1847  
000021DA                          1848  MOVE_ENEMY_L2:
000021DA  57B9 00002D96           1849      SUB.L   #03,        FLYINGENEMY_X
000021E0  59B9 00002D86           1850      SUB.L   #04,        ENEMY_X     ; Move enemy by X Value
000021E6  13FC 0003 00002DAB      1851      MOVE.B  #03,        POINTS
000021EE  4E75                    1852      RTS
000021F0                          1853  
000021F0                          1854  MOVE_ENEMY_L3:
000021F0  5FB9 00002D96           1855      SUB.L   #07,        FLYINGENEMY_X
000021F6  5BB9 00002D86           1856      SUB.L   #05,        ENEMY_X     ; Move enemy by X Value
000021FC  13FC 0005 00002DAB      1857      MOVE.B  #05,        POINTS
00002204  4E75                    1858      RTS
00002206                          1859  
00002206                          1860  MOVE_ENEMY_L4:
00002206  04B9 0000000A 00002D96  1861      SUB.L   #10,        FLYINGENEMY_X
00002210  51B9 00002D86           1862      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
00002216  13FC 000A 00002DAB      1863      MOVE.B  #10,        POINTS
0000221E  4E75                    1864      RTS
00002220                          1865  RESET_ENEMY_POSITION:
00002220  4281                    1866      CLR.L   D1       
00002222  3239 00002D64           1867      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002228  82FC 0002               1868      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000222C  23C1 00002D8A           1869      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00002232  13FC 0000 00002DBB      1870      MOVE.B  #0,         ENEMY_HIT
0000223A                          1871  
0000223A  B381                    1872      EOR.L  D1,D1                      ; Clear contents of D1 (XOR is faster)
0000223C  3239 00002D62           1873      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002242  23C1 00002D86           1874      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00002248  4E75                    1875      RTS
0000224A                          1876  
0000224A                          1877  RESET_FLYENEMY_POSITION:
0000224A  B381                    1878      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000224C  3239 00002D64           1879      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00002252  82FC 0002               1880      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002256  0441 003C               1881      SUB.W   #60,        D1
0000225A  23C1 00002D9A           1882      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
00002260  13FC 0000 00002DBC      1883      MOVE.B  #0,         FLYENEMY_HIT
00002268                          1884  
00002268  4281                    1885      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000226A  3239 00002D62           1886      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002270  23C1 00002D96           1887      MOVE.L  D1,         FLYINGENEMY_X     ; FLY Enemy X Position
00002276  4E75                    1888      RTS
00002278                          1889      
00002278                          1890  RESET_HEALTH_POSITION:
00002278  13FC 0001 00002D4B      1891      MOVE.B  #01,        DRAW_HEALTHPACKS
00002280  4281                    1892      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002282  3239 00002D62           1893      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00002288  23C1 00002D8E           1894      MOVE.L  D1,         HEALTH_X     ; healthpack X Position
0000228E  4E75                    1895      RTS
00002290                          1896  
00002290                          1897  CONTINUE:
00002290  4E75                    1898      RTS
00002292                          1899  
00002292                          1900  PERFORM_ATTACK:
00002292  4A79 00002DAE           1901      TST.W    ATTACK_COOLDOWN
00002298  66F6                    1902      BNE      CONTINUE
0000229A                          1903      
0000229A  13FC 0001 00002DAC      1904      MOVE.B   #01, CURRENTLYATTACKING
000022A2  33FC 0032 00002DB0      1905      MOVE.W   #50, ATTACK_TIME
000022AA  33FC 004C 00002DAE      1906      MOVE.W   #76, ATTACK_COOLDOWN
000022B2                          1907  
000022B2  23F9 00002D6C 00002DB2  1908      MOVE.L   PLAYER_X,ATTACK_X
000022BC  06B9 00000014 00002DB2  1909      ADDI.L   #PLYR_W_INIT,ATTACK_X
000022C6  23F9 00002D70 00002DB6  1910      MOVE.L   PLAYER_Y,ATTACK_Y
000022D0                          1911      ;SUBI.L   #PLYR_H_INIT-20,ATTACK_Y
000022D0                          1912  DRAWRun: 
000022D0                          1913      ; Enable back buffer
000022D0  103C 005E               1914      MOVE.B  #TC_REDRAW,        D0
000022D4  4E4F                    1915      TRAP    #15
000022D6                          1916  
000022D6                          1917      ; Clear the screen
000022D6  103C 000B               1918      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000022DA  323C FF00               1919      MOVE.W  #$FF00,     D1          ; Clear contents
000022DE  4E4F                    1920      TRAP    #15                     ; Trap (Perform action)
000022E0                          1921  
000022E0  123C 0001               1922      MOVE.B  #1,D1
000022E4  103C 005D               1923      MOVE.B  #93,D0
000022E8  4E4F                    1924      TRAP    #15
000022EA                          1925      
000022EA  4EB8 14BC               1926      jsr drawPause
000022EE                          1927  
000022EE  6100 001C               1928      BSR     DRAW_BACKGROUND         
000022F2  6100 00C0               1929      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000022F6  6100 034A               1930      BSR     DRAW_PLAYER             ; Draw Player
000022FA  6100 03D4               1931      BSR     DRAW_ENEMY              ; Draw Enemy
000022FE  6100 0414               1932      BSR     DRAW_FLYENEMY
00002302  6100 0454               1933      BSR     DRAW_HEALTHPACK
00002306  6100 04D2               1934      BSR     DRAW_FLOOR              ; Draw Floor
0000230A  4E75                    1935      RTS                             ; Return to subroutine
0000230C                          1936  
0000230C                          1937  
0000230C                          1938  DRAW_BACKGROUND:
0000230C  4281                    1939      CLR.L       D1
0000230E  223C 00FFE2B0           1940      MOVE.L      #SKY,D1
00002314  103C 0051               1941      MOVE.B      #81,D0
00002318  4E4F                    1942      TRAP        #15
0000231A                          1943  
0000231A  7200                    1944      MOVE.L      #00, D1
0000231C  7400                    1945      MOVE.L      #00, D2
0000231E  7059                    1946      MOVE.L      #89, D0
00002320  4E4F                    1947      TRAP        #15
00002322                          1948      
00002322  223C 0019506D           1949      MOVE.L     #BROWN,D1
00002328  243C 01110000           1950      MOVE.L     #$01110000,D2
0000232E  103C 0015               1951      MOVE.B     #21,D0
00002332  4E4F                    1952      TRAP       #15
00002334                          1953      
00002334                          1954  
00002334  B381                    1955      EOR.L      D1,D1
00002336  143C 0005               1956      MOVE.B     #5,D2
0000233A  33FC 300B 00002E06      1957      MOVE.W     #$300B,TRUNK
00002342                          1958  TREE_LOOP:
00002342  700B                    1959      MOVE.L     #TC_CURSR_P,D0
00002344  3239 00002E06           1960      MOVE.W     TRUNK,D1
0000234A  5379 00002E06           1961      SUBQ.W      #01,TRUNK
00002350  4E4F                    1962      TRAP       #15
00002352                          1963     
00002352  43F9 00002D1F           1964      LEA         TREET, A1
00002358  700E                    1965      MOVE.L      #14, D0
0000235A  4E4F                    1966      TRAP        #15
0000235C                          1967  
0000235C  5302                    1968      SUBQ.B      #01,D2
0000235E  B43C 0000               1969      CMP.B       #00,D2
00002362  66DE                    1970      BNE         TREE_LOOP
00002364                          1971  
00002364  223C 00566D19           1972      MOVE.L     #GREEN,D1
0000236A  243C 01110000           1973      MOVE.L     #$01110000,D2
00002370  103C 0015               1974      MOVE.B     #21,D0
00002374  4E4F                    1975      TRAP       #15
00002376                          1976  
00002376  163C 0005               1977      MOVE.B     #5,D3
0000237A                          1978  TREE_LEAVES_Y:
0000237A  13FC 002D 00002E06      1979      MOVE.B     #$2D,TRUNK
00002382  143C 0008               1980      MOVE.B     #8,D2
00002386                          1981  TREE_LEAVES_X:
00002386  700B                    1982      MOVE.L     #TC_CURSR_P,D0
00002388  3239 00002E06           1983      MOVE.W     TRUNK,D1
0000238E  5239 00002E06           1984      ADDQ.B     #01,TRUNK
00002394  4E4F                    1985      TRAP       #15
00002396                          1986     
00002396  7240                    1987      MOVE.L      #$40, D1
00002398  7006                    1988      MOVE.L      #6, D0
0000239A  4E4F                    1989      TRAP        #15
0000239C                          1990  
0000239C  5302                    1991      SUBQ.B      #01,D2
0000239E  B43C 0000               1992      CMP.B       #00,D2
000023A2  66E2                    1993      BNE         TREE_LEAVES_X
000023A4  5303                    1994      SUB.B       #01,D3
000023A6  5379 00002E06           1995      SUB.W       #01,TRUNK
000023AC  B63C 0000               1996      CMP.B       #00,D3
000023B0  66C8                    1997      BNE         TREE_LEAVES_Y
000023B2  4E75                    1998      RTS
000023B4                          1999  DRAW_PLYR_DATA:
000023B4  B381                    2000      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
000023B6  B582                    2001      EOR.L    D2,D2
000023B8                          2002  
000023B8                          2003  
000023B8  7200                    2004      MOVE.L  #BLACK,     D1
000023BA  103C 0015               2005      MOVE.B  #21,        D0          ; Set Text Color
000023BE  4E4F                    2006      TRAP    #15                     ; Trap (Perform action)
000023C0                          2007  
000023C0  223C 00FFE2B0           2008      MOVE.L  #SKY,       D1          ; Set Text Color
000023C6  7051                    2009      MOVE.L  #81,        D0          ; Set Text Color
000023C8  4E4F                    2010      TRAP    #15                     ; Trap (Perform action)
000023CA                          2011  
000023CA                          2012      ; Player Score Message
000023CA  103C 000B               2013      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000023CE  323C 0201               2014      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000023D2  4E4F                    2015      TRAP    #15                     ; Trap (Perform action)
000023D4  43F9 00002C98           2016      LEA     SCORE_MSG,  A1          ; Score Message
000023DA  303C 000D               2017      MOVE    #13,        D0          ; No Line feed
000023DE  4E4F                    2018      TRAP    #15                     ; Trap (Perform action)
000023E0                          2019  
000023E0                          2020      ; Player Score Value
000023E0  103C 000B               2021      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000023E4  323C 0901               2022      MOVE.W  #$0901,     D1          ; Col 09, Row 01
000023E8  4E4F                    2023      TRAP    #15                     ; Trap (Perform action)
000023EA  103C 0003               2024      MOVE.B  #03,        D0          ; Display number at D1.L
000023EE  2239 00002D74           2025      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000023F4  4E4F                    2026      TRAP    #15                     ; Trap (Perform action)
000023F6                          2027      
000023F6                          2028      ; Player X Message
000023F6  103C 000B               2029      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000023FA  323C 0202               2030      MOVE.W  #$0202,     D1          ; Col 02, Row 02
000023FE  4E4F                    2031      TRAP    #15                     ; Trap (Perform action)
00002400  43F9 00002CD2           2032      LEA     X_MSG,      A1          ; X Message
00002406  303C 000D               2033      MOVE    #13,        D0          ; No Line feed
0000240A  4E4F                    2034      TRAP    #15                     ; Trap (Perform action)
0000240C                          2035      
0000240C                          2036      ; Player X
0000240C  103C 000B               2037      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00002410  323C 0502               2038      MOVE.W  #$0502,     D1          ; Col 05, Row 02
00002414  4E4F                    2039      TRAP    #15                     ; Trap (Perform action)
00002416  103C 0003               2040      MOVE.B  #03,        D0          ; Display number at D1.L
0000241A  2239 00002D8E           2041      MOVE.L  HEALTH_X,   D1          ; Move X to D1.L
00002420  4E4F                    2042      TRAP    #15                     ; Trap (Perform action)
00002422                          2043      
00002422                          2044      ; Player Y Message
00002422  103C 000B               2045      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002426  323C 1002               2046      MOVE.W  #$1002,     D1          ; Col 10, Row 02
0000242A  4E4F                    2047      TRAP    #15                     ; Trap (Perform action)
0000242C  43F9 00002CD5           2048      LEA     Y_MSG,      A1          ; Y Message
00002432  303C 000D               2049      MOVE    #13,        D0          ; No Line feed
00002436  4E4F                    2050      TRAP    #15                     ; Trap (Perform action)
00002438                          2051      
00002438                          2052      ; Player Y
00002438  103C 000B               2053      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000243C  323C 1202               2054      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00002440  4E4F                    2055      TRAP    #15                     ; Trap (Perform action)
00002442  103C 0003               2056      MOVE.B  #03,        D0          ; Display number at D1.L
00002446  2239 00002D9A           2057      MOVE.L  FLYINGENEMY_Y,   D1          ; Move X to D1.L
0000244C  4E4F                    2058      TRAP    #15                     ; Trap (Perform action) 
0000244E                          2059  
0000244E                          2060      ; Player Velocity Message
0000244E  103C 000B               2061      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002452  323C 0203               2062      MOVE.W  #$0203,     D1          ; Col 02, Row 03
00002456  4E4F                    2063      TRAP    #15                     ; Trap (Perform action)
00002458  43F9 00002CD8           2064      LEA     V_MSG,      A1          ; Velocity Message
0000245E  303C 000D               2065      MOVE    #13,        D0          ; No Line feed
00002462  4E4F                    2066      TRAP    #15                     ; Trap (Perform action)
00002464                          2067      
00002464                          2068      ; Player Velocity
00002464  103C 000B               2069      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002468  323C 0503               2070      MOVE.W  #$0503,     D1          ; Col 05, Row 03
0000246C  4E4F                    2071      TRAP    #15                     ; Trap (Perform action)
0000246E  103C 0003               2072      MOVE.B  #03,        D0          ; Display number at D1.L
00002472  2239 00002D78           2073      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
00002478  4E4F                    2074      TRAP    #15                     ; Trap (Perform action)
0000247A                          2075      
0000247A                          2076      ; Player Gravity Message
0000247A  103C 000B               2077      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000247E  323C 1003               2078      MOVE.W  #$1003,     D1          ; Col 10, Row 03
00002482  4E4F                    2079      TRAP    #15                     ; Trap (Perform action)
00002484  43F9 00002CDB           2080      LEA     VARMSG,      A1          ; G Message
0000248A  303C 000D               2081      MOVE    #13,        D0          ; No Line feed
0000248E  4E4F                    2082      TRAP    #15                     ; Trap (Perform action)
00002490                          2083      
00002490                          2084      ; Player Gravity
00002490  103C 000B               2085      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002494  323C 1903               2086      MOVE.W  #$1903,     D1          ; Col 12, Row 03
00002498  4E4F                    2087      TRAP    #15                     ; Trap (Perform action)
0000249A  103C 0003               2088      MOVE.B  #03,        D0          ; Display number at D1.L
0000249E  4281                    2089      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000024A0  1239 00002DAE           2090      MOVE.B  ATTACK_COOLDOWN,D1         ; Move Gravity to D1.L
000024A6  4E4F                    2091      TRAP    #15                     ; Trap (Perform action)
000024A8                          2092  
000024A8                          2093      ; Player On Ground Message
000024A8  103C 000B               2094      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000024AC  323C 0204               2095      MOVE.W  #$0204,     D1          ; Col 10, Row 03
000024B0  4E4F                    2096      TRAP    #15                     ; Trap (Perform action)
000024B2  43F9 00002CE0           2097      LEA     GND_MSG,    A1          ; On Ground Message
000024B8  303C 000D               2098      MOVE    #13,        D0          ; No Line feed
000024BC  4E4F                    2099      TRAP    #15                     ; Trap (Perform action)
000024BE                          2100      
000024BE                          2101      ; Player On Ground
000024BE  103C 000B               2102      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000024C2  323C 1504               2103      MOVE.W  #$1504,     D1          ; Col 06, Row 04
000024C6  4E4F                    2104      TRAP    #15                     ; Trap (Perform action)
000024C8  103C 0003               2105      MOVE.B  #03,        D0          ; Display number at D1.L
000024CC  4281                    2106      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000024CE  1239 00002DBA           2107      MOVE.B  ENEMIES_DEFEATED,     D1          ; Move Play on Ground ? to D1.L
000024D4  4E4F                    2108      TRAP    #15                     ; Trap (Perform action)
000024D6                          2109  
000024D6                          2110      ; Show Keys Pressed
000024D6  103C 000B               2111      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000024DA  323C 2001               2112      MOVE.W  #$2001,     D1          ; Col 20, Row 1
000024DE  4E4F                    2113      TRAP    #15                     ; Trap (Perform action)
000024E0  43F9 00002CA1           2114      LEA     KEYCODE_MSG, A1         ; Keycode
000024E6  303C 000D               2115      MOVE    #13,        D0          ; No Line feed
000024EA  4E4F                    2116      TRAP    #15                     ; Trap (Perform action)
000024EC                          2117  
000024EC                          2118      ; Show KeyCode
000024EC  103C 000B               2119      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000024F0  323C 3001               2120      MOVE.W  #$3001,     D1          ; Col 30, Row 1
000024F4  4E4F                    2121      TRAP    #15                     ; Trap (Perform action)    
000024F6  2239 00002D66           2122      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
000024FC  103C 0003               2123      MOVE.B  #03,        D0          ; Display the contents of D1
00002500  4E4F                    2124      TRAP    #15                     ; Trap (Perform action)
00002502                          2125  
00002502                          2126      ; Show Lives msg
00002502  103C 000B               2127      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002506  323C 0207               2128      MOVE.W  #$0207,     D1          ; Col 02, Row 06
0000250A  4E4F                    2129      TRAP    #15                     ; Trap (Perform action)
0000250C  43F9 00002D40           2130      LEA     LIVES_MSG,   A1          ; Draw
00002512  303C 000D               2131      MOVE    #13,        D0          ; No Line feed
00002516  4E4F                    2132      TRAP    #15                     ; Trap (Perform action)  
00002518                          2133      
00002518                          2134      ; Show Lives msg
00002518  103C 000B               2135      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000251C  323C 0A07               2136      MOVE.W  #$0A07,     D1          ; Col 30, Row 1
00002520  4E4F                    2137      TRAP    #15                     ; Trap (Perform action)   
00002522  B381                    2138      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
00002524  1239 00002DAA           2139      MOVE.B  LIVES,      D1          ; Move Key Pressed to D1
0000252A  103C 0003               2140      MOVE.B  #03,        D0          ; Display the contents of D1
0000252E  4E4F                    2141      TRAP    #15                     ; Trap (Perform action)
00002530                          2142  
00002530  4E75                    2143      RTS
00002532                          2144  IS_PLAYER_ON_GND:
00002532                          2145      ; Check if Player is on Ground
00002532  4281                    2146      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002534  4282                    2147      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00002536  3239 00002D64           2148      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1  
0000253C  82FC 0002               2149      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00002540  2439 00002D70           2150      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00002546  B441                    2151      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00002548  6C00 0008               2152      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
0000254C  6D00 002C               2153      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00002550  4E75                    2154      RTS                             ; Return to subroutine
00002552                          2155  
00002552                          2156  
00002552                          2157  SET_ON_GROUND:
00002552  4281                    2158      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002554  3239 00002D64           2159      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000255A  82FC 0002               2160      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000255E  23C1 00002D70           2161      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00002564  4281                    2162      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002566  7200                    2163      MOVE.L  #00,        D1          ; Player Velocity
00002568  23C1 00002D78           2164      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000256E  23FC 00000001 00002D80  2165      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00002578  4E75                    2166      RTS
0000257A                          2167  
0000257A                          2168  SET_OFF_GROUND:
0000257A  23FC 00000000 00002D80  2169      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00002584  4E75                    2170      RTS                             ; Return to subroutine
00002586                          2171  JUMP:
00002586  0CB9 00000001 00002D80  2172      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
00002590  6700 0006               2173      BEQ     PERFORM_JUMP            ; Do Jump
00002594  6000 0012               2174      BRA     JUMP_DONE               ;
00002598                          2175  PERFORM_JUMP:
00002598  6100 0042               2176      BSR     PLAY_JUMP               ; Play jump sound
0000259C  23FC FFFFFFED 00002D78  2177      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000025A6  4E75                    2178      RTS                             ; Return to subroutine
000025A8                          2179  JUMP_DONE:
000025A8  4E75                    2180      RTS                             ; Return to subroutine
000025AA                          2181  
000025AA                          2182  IDLE:
000025AA  4E75                    2183      RTS                             ; Return to subroutine
000025AC                          2184  
000025AC                          2185  GAMEOVER_LOAD:
000025AC  43F9 00002DD1           2186      LEA     GAMEOVER_WAV,    A1          ; Load Wav File into A1
000025B2  323C 0000               2187      MOVE    #GAMEOVER_INDEX, D1          ; Assign it INDEX
000025B6  303C 004A               2188      MOVE    #74,        D0          ; Load into memory
000025BA  4E4F                    2189      TRAP    #15                     ; Trap (Perform action)
000025BC  4E75                    2190      RTS                             ; Return to subroutine
000025BE                          2191  
000025BE                          2192  PLAY_GAMEOVER:
000025BE  323C 0000               2193      MOVE    #GAMEOVER_INDEX, D1          ; Load Sound INDEX
000025C2  303C 004B               2194      MOVE    #75,        D0          ; Play Sound
000025C6  4E4F                    2195      TRAP    #15                     ; Trap (Perform action)
000025C8  4E75                    2196      RTS                             ; Return to subroutine
000025CA                          2197  
000025CA                          2198  JUMP_LOAD:
000025CA  43F9 00002DC8           2199      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000025D0  323C 0001               2200      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000025D4  303C 004A               2201      MOVE    #74,        D0          ; Load into memory
000025D8  4E4F                    2202      TRAP    #15                     ; Trap (Perform action)
000025DA  4E75                    2203      RTS                             ; Return to subroutine
000025DC                          2204  
000025DC                          2205  PLAY_JUMP:
000025DC  323C 0001               2206      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000025E0  303C 004B               2207      MOVE    #75,        D0          ; Play Sound
000025E4  4E4F                    2208      TRAP    #15                     ; Trap (Perform action)
000025E6  4E75                    2209      RTS                             ; Return to subroutine
000025E8                          2210  
000025E8                          2211  HITHURT_LOAD:
000025E8  43F9 00002DDE           2212      LEA     HITHURT_WAV,   A1          ; Load Wav File into A1
000025EE  323C 0002               2213      MOVE    #HITHURT_INDEX,D1          ; Assign it INDEX
000025F2  303C 004A               2214      MOVE    #74,        D0          ; Load into memory
000025F6  4E4F                    2215      TRAP    #15                     ; Trap (Perform action)
000025F8  4E75                    2216      RTS                             ; Return to subroutine
000025FA                          2217  
000025FA                          2218  PLAY_HITHURT:
000025FA  323C 0002               2219      MOVE    #HITHURT_INDEX,D1          ; Load Sound INDEX
000025FE  303C 004B               2220      MOVE    #75,        D0          ; Play Sound
00002602  4E4F                    2221      TRAP    #15                     ; Trap (Perform action)
00002604  4E75                    2222      RTS                             ; Return to subroutine
00002606                          2223  
00002606                          2224  POWERUP_LOAD:
00002606  43F9 00002DEA           2225      LEA     POWERUP_WAV,   A1          ; Load Wav File into A1
0000260C  323C 0003               2226      MOVE    #POWERUP_INDEX,D1          ; Assign it INDEX
00002610  303C 004A               2227      MOVE    #74,        D0          ; Load into memory
00002614  4E4F                    2228      TRAP    #15                     ; Trap (Perform action)
00002616  4E75                    2229      RTS                             ; Return to subroutine
00002618                          2230  
00002618                          2231  PLAY_POWERUP:
00002618  323C 0003               2232      MOVE    #POWERUP_INDEX,D1          ; Load Sound INDEX
0000261C  303C 004B               2233      MOVE    #75,        D0          ; Play Sound
00002620  4E4F                    2234      TRAP    #15                     ; Trap (Perform action)
00002622  4E75                    2235      RTS                             ; Return to subroutine
00002624                          2236  
00002624                          2237  LVLCHANGE_LOAD:
00002624  43F9 00002DF6           2238      LEA     LEVELCHANGE_WAV,   A1          ; Load Wav File into A1
0000262A  323C 0004               2239      MOVE    #LEVELCHANGE_INDEX,D1          ; Assign it INDEX
0000262E  303C 004A               2240      MOVE    #74,        D0          ; Load into memory
00002632  4E4F                    2241      TRAP    #15                     ; Trap (Perform action)
00002634  4E75                    2242      RTS                             ; Return to subroutine
00002636                          2243  
00002636                          2244  PLAY_LVLCHANGE:
00002636  323C 0004               2245      MOVE    #LEVELCHANGE_INDEX,D1          ; Load Sound INDEX
0000263A  303C 004B               2246      MOVE    #75,        D0          ; Play Sound
0000263E  4E4F                    2247      TRAP    #15                     ; Trap (Perform action)
00002640  4E75                    2248      RTS                             ; Return to subroutine
00002642                          2249  
00002642                          2250  DRAW_PLAYER:
00002642                          2251      ; Set Pixel Colors
00002642  7200                    2252      MOVE.L  #BLACK,     D1          ; Set Background color
00002644  103C 0050               2253      MOVE.B  #80,        D0          ; Task for Background Color
00002648  4E4F                    2254      TRAP    #15                     ; Trap (Perform action)
0000264A                          2255      ; Reset Pixel Colors
0000264A  7200                    2256      MOVE.L  #BLACK,     D1          ; Set Background color
0000264C  103C 0051               2257      MOVE.B  #81,        D0          ; Task for Background Color
00002650  4E4F                    2258      TRAP    #15                     ; Trap (Perform action)
00002652                          2259  
00002652                          2260      ; Set X, Y, Width and Height
00002652  2239 00002D6C           2261      MOVE.L  PLAYER_X,   D1          ; X
00002658  2439 00002D70           2262      MOVE.L  PLAYER_Y,   D2
0000265E                          2263      
0000265E  2639 00002D6C           2264      MOVE.L  PLAYER_X,   D3
00002664  B984                    2265      EOR.L   D4,D4
00002666  1839 00002DBD           2266      MOVE.B   PLAYER_WIDTH,   D4      ; Width
0000266C  D684                    2267      ADD.L   D4,D3
0000266E  2839 00002D70           2268      MOVE.L  PLAYER_Y,   D4 
00002674  9839 00002DBE           2269      SUB.B   PLAYER_HEIGHT,   D4      ; Height          ; Y
0000267A                          2270      
0000267A                          2271      ; Draw Player
0000267A  103C 0057               2272      MOVE.B  #87,        D0          ; Draw Player
0000267E  4E4F                    2273      TRAP    #15                     ; Trap (Perform action)
00002680  4A39 00002DAC           2274      TST.B   CURRENTLYATTACKING
00002686  6600 0004               2275      BNE     DRAW_ATTACK
0000268A  4E75                    2276      RTS                             ; Return to subroutine
0000268C                          2277  
0000268C                          2278  DRAW_ATTACK:
0000268C                          2279  
0000268C                          2280      ; Set Pixel Colors
0000268C  223C 00FFFFFF           2281      MOVE.L  #WHITE,     D1          ; Set Background color
00002692  103C 0050               2282      MOVE.B  #80,        D0          ; Task for Background Color
00002696  4E4F                    2283      TRAP    #15                     ; Trap (Perform action)
00002698                          2284      ; Reset Pixel Colors
00002698  223C 00FFFFFF           2285      MOVE.L  #WHITE,     D1          ; Set Background color
0000269E  103C 0051               2286      MOVE.B  #81,        D0          ; Task for Background Color
000026A2  4E4F                    2287      TRAP    #15                     ; Trap (Perform action)
000026A4                          2288  
000026A4  2239 00002DB2           2289      MOVE.L  ATTACK_X,   D1          ; X
000026AA  2439 00002DB6           2290      MOVE.L  ATTACK_Y,   D2
000026B0                          2291      
000026B0  2639 00002DB2           2292      MOVE.L  ATTACK_X,   D3
000026B6  0683 00000023           2293      ADD.L   #ATTACK_WIDTH,   D3      ; Width
000026BC  2839 00002DB6           2294      MOVE.L  ATTACK_Y,   D4 
000026C2  0484 00000014           2295      SUB.L   #ATTACK_HEIGHT,   D4      ; Height          ; Y
000026C8                          2296      
000026C8                          2297      ; Draw Player
000026C8  103C 0057               2298      MOVE.B  #87,        D0          ; Draw Player
000026CC  4E4F                    2299      TRAP    #15                     ; Trap (Perform action)
000026CE  4E75                    2300      RTS                             ; Return to subroutine
000026D0                          2301  
000026D0                          2302  DRAW_ENEMY:
000026D0                          2303      ; Set Pixel Colors
000026D0  2239 00002D9E           2304      MOVE.L  ENEMYCOLOR,       D1          ; Set Background color
000026D6  103C 0050               2305      MOVE.B  #80,        D0          ; Task for Background Color
000026DA  4E4F                    2306      TRAP    #15                     ; Trap (Perform action)
000026DC                          2307  
000026DC                          2308      ; Reset Pixel Colors
000026DC  2239 00002D9E           2309      MOVE.L  ENEMYCOLOR,     D1          ; Set Background color
000026E2  103C 0051               2310      MOVE.B  #81,        D0          ; Task for Background Color
000026E6  4E4F                    2311      TRAP    #15                     ; Trap (Perform action)
000026E8                          2312  
000026E8                          2313      ; Set X, Y, Width and Height
000026E8  2239 00002D86           2314      MOVE.L  ENEMY_X,    D1          ; X
000026EE  2439 00002D8A           2315      MOVE.L  ENEMY_Y,    D2          ; Y
000026F4  2639 00002D86           2316      MOVE.L  ENEMY_X,    D3
000026FA  D679 00002DC0           2317      ADD.W   ENEMY_WIDTH,   D3      ; Width
00002700  2839 00002D8A           2318      MOVE.L  ENEMY_Y,    D4 
00002706  9879 00002DC2           2319      SUB.W   ENEMY_HEIGHT,   D4      ; Height
0000270C                          2320      
0000270C                          2321      ; Draw Enemy    
0000270C  103C 0057               2322      MOVE.B  #87,        D0          ; Draw Enemy
00002710  4E4F                    2323      TRAP    #15                     ; Trap (Perform action)
00002712  4E75                    2324      RTS                             ; Return to subroutine
00002714                          2325  
00002714                          2326  DRAW_FLYENEMY:
00002714                          2327      ; Set Pixel Colors
00002714  2239 00002DA2           2328      MOVE.L  FLYENEMYCOLOR,       D1          ; Set Background color
0000271A  103C 0050               2329      MOVE.B  #80,        D0          ; Task for Background Color
0000271E  4E4F                    2330      TRAP    #15                     ; Trap (Perform action)
00002720                          2331  
00002720                          2332      ; Reset Pixel Colors
00002720  2239 00002DA2           2333      MOVE.L  FLYENEMYCOLOR,     D1          ; Set Background color
00002726  103C 0051               2334      MOVE.B  #81,        D0          ; Task for Background Color
0000272A  4E4F                    2335      TRAP    #15                     ; Trap (Perform action)
0000272C                          2336  
0000272C                          2337      ; Set X, Y, Width and Height
0000272C  2239 00002D96           2338      MOVE.L  FLYINGENEMY_X,    D1          ; X
00002732  2439 00002D9A           2339      MOVE.L  FLYINGENEMY_Y,    D2          ; Y
00002738  2639 00002D96           2340      MOVE.L  FLYINGENEMY_X,    D3
0000273E  D679 00002DC4           2341      ADD.W   FLYENEMY_WIDTH,   D3      ; Width
00002744  2839 00002D9A           2342      MOVE.L  FLYINGENEMY_Y,    D4 
0000274A  9879 00002DC6           2343      SUB.W   FLYENEMY_HEIGHT,   D4      ; Height
00002750                          2344      
00002750                          2345      ; Draw Enemy    
00002750  103C 0057               2346      MOVE.B  #87,        D0          ; Draw Enemy
00002754  4E4F                    2347      TRAP    #15                     ; Trap (Perform action)
00002756  4E75                    2348      RTS  
00002758                          2349  
00002758                          2350  DRAW_HEALTHPACK:
00002758                          2351  
00002758  0C39 0000 00002D4C      2352      CMP.B   #00,     SPAWN_HEALTHPACKS
00002760  6700 006C               2353      BEQ     DRAW_HEALTHPACK_DONE
00002764  0C39 0000 00002D4B      2354      CMP.B   #00,     DRAW_HEALTHPACKS
0000276C  6700 0060               2355      BEQ     DRAW_HEALTHPACK_DONE
00002770                          2356      
00002770                          2357      ;BSR     RANDOM_NUMBER
00002770                          2358      ;CMP.L   #$80,  D1
00002770                          2359      ;BGT     DRAW_HEALTHPACK_DONE
00002770                          2360  
00002770  13FC 0001 00002D4B      2361      MOVE.B  #01,        DRAW_HEALTHPACKS
00002778  3239 00002D64           2362      MOVE.W  SCREEN_H,     D1
0000277E  82FC 0002               2363      DIVU.W    #02,        D1
00002782  C2BC 0000FFFF           2364      AND.L   #$0000FFFF,   D1
00002788  23C1 00002D92           2365      MOVE.L  D1,         HEALTH_Y
0000278E                          2366      ; Set Pixel Colors
0000278E  7200                    2367      MOVE.L  #BLACK,       D1          ; Set Background color
00002790  103C 0050               2368      MOVE.B  #80,        D0          ; Task for Background Color
00002794  4E4F                    2369      TRAP    #15                     ; Trap (Perform action)
00002796                          2370  
00002796                          2371      ; Reset Pixel Colors
00002796  223C 0044FF44           2372      MOVE.L  #LIFEGREEN,     D1          ; Set Background color
0000279C  103C 0051               2373      MOVE.B  #81,        D0          ; Task for Background Color
000027A0  4E4F                    2374      TRAP    #15                     ; Trap (Perform action)
000027A2                          2375  
000027A2                          2376      ; Set X, Y, Width and Height
000027A2  2239 00002D8E           2377      MOVE.L  HEALTH_X,    D1          ; X
000027A8  2439 00002D92           2378      MOVE.L  HEALTH_Y,    D2          ; Y
000027AE  2639 00002D8E           2379      MOVE.L  HEALTH_X,    D3
000027B4  0683 0000000C           2380      ADD.L   #HEALTH_PACK_W,   D3      ; Width
000027BA  2839 00002D92           2381      MOVE.L  HEALTH_Y,    D4 
000027C0  0484 0000000C           2382      SUB.L   #HEALTH_PACK_H,   D4      ; Height
000027C6                          2383      
000027C6                          2384      ; Draw Enemy    
000027C6  103C 0057               2385      MOVE.B  #87,        D0          ; Draw Enemy
000027CA  4E4F                    2386      TRAP    #15                     ; Trap (Perform action)
000027CC  4E75                    2387      RTS                             ; Return to subroutine
000027CE                          2388  
000027CE                          2389  DRAW_HEALTHPACK_DONE:
000027CE  23FC FFFFFFFF 00002D92  2390      MOVE.L  #-1, HEALTH_Y
000027D8  4E75                    2391      RTS
000027DA                          2392  
000027DA                          2393  DRAW_FLOOR:
000027DA                          2394      ; Set Pixel Colors
000027DA  223C 00566D19           2395      MOVE.L  #GREEN,     D1          ; Set Background color
000027E0  103C 0050               2396      MOVE.B  #80,        D0          ; Task for Background Color
000027E4  4E4F                    2397      TRAP    #15                     ; Trap (Perform action)
000027E6                          2398  
000027E6  223C 00566D19           2399      MOVE.L  #GREEN,     D1
000027EC  103C 0051               2400      MOVE.B  #81,        D0
000027F0  4E4F                    2401      TRAP    #15
000027F2                          2402  
000027F2                          2403      
000027F2                          2404      ; Set X, Y, X2, and Y2
000027F2  7200                    2405      MOVE.L  #0,   D1          ; X
000027F4  243C 000000F1           2406      MOVE.L  #241,  D2          ; Y
000027FA  263C 00000280           2407      MOVE.L  #640,   D3           
00002800  283C 000001E0           2408      MOVE.L  #480,   D4 
00002806                          2409      
00002806                          2410      ; Draw grass
00002806  103C 0057               2411      MOVE.B  #87,        D0          ; Draw Line
0000280A  4E4F                    2412      TRAP    #15                     ; Trap (Perform action)
0000280C                          2413  
0000280C                          2414      ; Set Pixel Colors
0000280C  223C 0019506D           2415      MOVE.L  #BROWN,     D1          ; Set Background color
00002812  103C 0050               2416      MOVE.B  #80,        D0          ; Task for Background Color
00002816  4E4F                    2417      TRAP    #15                     ; Trap (Perform action)
00002818                          2418  
00002818  223C 0019506D           2419      MOVE.L  #BROWN,     D1
0000281E  103C 0051               2420      MOVE.B  #81,        D0
00002822  4E4F                    2421      TRAP    #15
00002824                          2422  
00002824  45F9 00002D52           2423      LEA     LEVELS,      A2
0000282A  2A39 00002D74           2424      MOVE.L  PLAYER_SCORE,   D5
00002830                          2425      ;CMP.L   (A2)+,       D5
00002830                          2426      ;BGT     DRAW_FLOOR_L5
00002830                          2427      ;CMP.L   (A2)+,       D5
00002830                          2428      ;BGT     DRAW_FLOOR_L4
00002830                          2429      ;CMP.L   (A2)+,       D5
00002830                          2430      ;BGT     DRAW_FLOOR_L3
00002830                          2431      ;CMP.L   (A2)+,       D5
00002830                          2432      ;BGT     DRAW_FLOOR_L2
00002830  6000 0074               2433      BRA     DRAW_FLOOR_L1
00002834                          2434  
00002834                          2435  DRAW_FLOOR_L5:
00002834  33FC 000C 00002E0E      2436      MOVE.W  #12,SCALER
0000283C  243C 000001E0           2437      MOVE.L  #480,   D2          ; Y
00002842                          2438      ;MOVE.L  #135, FLYINGENEMY_Y
00002842                          2439      ;MOVE.W  #40, FLYENEMY_HEIGHT
00002842                          2440      ;MOVE.W  #65, FLYENEMY_WIDTH
00002842                          2441      ;MOVE.W  #40, ENEMY_HEIGHT
00002842                          2442      ;MOVE.W  #40, ENEMY_WIDTH
00002842  6000 006C               2443      BRA     DRAWDIRT
00002846                          2444      
00002846                          2445  DRAW_FLOOR_L4:
00002846  33FC 000A 00002E0E      2446      MOVE.W  #10,SCALER
0000284E  243C 000001E0           2447      MOVE.L  #480,   D2          ; Y
00002854                          2448      ;MOVE.L  #140, FLYINGENEMY_Y
00002854                          2449      ;MOVE.W  #45, FLYENEMY_HEIGHT
00002854                          2450      ;MOVE.W  #55, FLYENEMY_WIDTH
00002854                          2451      ;MOVE.W  #30, ENEMY_HEIGHT
00002854                          2452      ;MOVE.W  #30, ENEMY_WIDTH
00002854  6000 005A               2453      BRA     DRAWDIRT
00002858                          2454  DRAW_FLOOR_L3:
00002858  33FC 0008 00002E0E      2455      MOVE.W  #8,SCALER
00002860  243C 000001AE           2456      MOVE.L  #430,   D2          ; Y
00002866                          2457      ;MOVE.L  #160, FLYINGENEMY_Y
00002866                          2458      ;MOVE.W  #25, FLYENEMY_HEIGHT
00002866                          2459      ;MOVE.W  #35, FLYENEMY_WIDTH
00002866                          2460      ;MOVE.W  #25, ENEMY_HEIGHT
00002866                          2461      ;MOVE.W  #25, ENEMY_WIDTH
00002866  6000 0048               2462      BRA     DRAWDIRT
0000286A                          2463  DRAW_FLOOR_L2:
0000286A  33FC 0006 00002E0E      2464      MOVE.W  #6,SCALER
00002872  243C 0000014A           2465      MOVE.L  #330,   D2          ; Y
00002878  23FC 000000AA 00002D9A  2466      MOVE.L  #170, FLYINGENEMY_Y
00002882  33FC 000F 00002DC6      2467      MOVE.W  #15, FLYENEMY_HEIGHT
0000288A  33FC 0019 00002DC4      2468      MOVE.W  #25, FLYENEMY_WIDTH
00002892  33FC 000F 00002DC2      2469      MOVE.W  #15, ENEMY_HEIGHT
0000289A  33FC 000F 00002DC0      2470      MOVE.W  #15, ENEMY_WIDTH
000028A2                          2471  
000028A2  6000 000C               2472      BRA     DRAWDIRT
000028A6                          2473  DRAW_FLOOR_L1:
000028A6  243C 00000115           2474      MOVE.L  #277,   D2          ; Y
000028AC  6000 0002               2475      BRA     DRAWDIRT
000028B0                          2476  DRAWDIRT:
000028B0                          2477      ; Set X, Y, X2, and Y2
000028B0  7200                    2478      MOVE.L  #0,   D1          ; X
000028B2  263C 00000280           2479      MOVE.L  #640,   D3           
000028B8  283C 000001E0           2480      MOVE.L  #480,   D4 
000028BE                          2481      
000028BE                          2482      ; Draw Dirt
000028BE  103C 0057               2483      MOVE.B  #87,        D0          ; Draw Line
000028C2  4E4F                    2484      TRAP    #15                     ; Trap (Perform action)
000028C4                          2485  
000028C4                          2486  
000028C4                          2487      ; Reset Pixel Colors
000028C4  7200                    2488      MOVE.L  #$00000000,     D1          ; Set Background color
000028C6  103C 0050               2489      MOVE.B  #80,        D0          ; Task for Background Color
000028CA  4E4F                    2490      TRAP    #15                     ; Trap (Perform action)
000028CC                          2491  
000028CC                          2492      ; Reset Pixel Colors
000028CC  7200                    2493      MOVE.L  #$00000000,     D1          ; Set Background color
000028CE  103C 0051               2494      MOVE.B  #81,        D0          ; Task for Background Color
000028D2  4E4F                    2495      TRAP    #15                     ; Trap (Perform action)
000028D4                          2496  
000028D4  4E75                    2497      RTS                             ; Return to subroutine
000028D6                          2498  
000028D6                          2499  CHECK_COLLISIONS:
000028D6                          2500  
000028D6  4281                    2501      CLR.L   D1                      ; Clear D1
000028D8  4282                    2502      CLR.L   D2                      ; Clear D2
000028DA                          2503  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
000028DA  2239 00002D6C           2504      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000028E0  D239 00002DBD           2505      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
000028E6  2439 00002D86           2506      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
000028EC  B481                    2507      CMP.L   D1,         D2          ; Do the Overlap ?
000028EE  6F00 0006               2508      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
000028F2  6000 004C               2509      BRA     CHECK_FLYENEMY_COLLISIONS
000028F6                          2510  
000028F6                          2511  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
000028F6  2239 00002D6C           2512      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000028FC  2439 00002D86           2513      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00002902  D479 00002DC0           2514      ADD.W   ENEMY_WIDTH,D2          ; Set Enemy width X + Width
00002908  B481                    2515      CMP.L   D1,         D2          ; Do they OverLap ?
0000290A  6C00 0006               2516      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
0000290E  6000 0030               2517      BRA     CHECK_FLYENEMY_COLLISIONS  
00002912                          2518  
00002912                          2519  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00002912  2239 00002D70           2520      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002918  2439 00002D8A           2521      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
0000291E  D478 000C               2522      ADD.W   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00002922  B481                    2523      CMP.L   D1,         D2          ; Do they Overlap ?
00002924  6F00 0006               2524      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00002928  6000 0016               2525      BRA     CHECK_FLYENEMY_COLLISIONS
0000292C                          2526  
0000292C                          2527  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
0000292C  D238 000C               2528      ADD.B   PLYR_H_INIT,D1          ; Add Player Height to D1
00002930  2439 00002D8A           2529      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002936  B481                    2530      CMP.L   D1,         D2          ; Do they OverLap ?
00002938  6C00 0214               2531      BGE     COLLISIONRun             ; Collision !
0000293C  6000 0002               2532      BRA     CHECK_FLYENEMY_COLLISIONS
00002940                          2533  
00002940                          2534  CHECK_FLYENEMY_COLLISIONS:
00002940  4281                    2535      CLR.L   D1                      ; Clear D1
00002942  4282                    2536      CLR.L   D2                      ; Clear D2
00002944                          2537  PLX_LTE_TO_FLYENEMY_X_PLUS_W:
00002944  2239 00002D6C           2538      MOVE.L  PLAYER_X,   D1
0000294A  D239 00002DBD           2539      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00002950  2439 00002D96           2540      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002956  B481                    2541      CMP.L   D1,         D2                          ; Do the Overlap ?
00002958  6F00 0006               2542      BLE     PLX_PLUS_W_LTE_TO_FLYENEMY_X      ; Less than or Equal ?
0000295C  6000 0050               2543      BRA     CHECK_HEALTH_COLLISIONS
00002960                          2544  
00002960                          2545  PLX_PLUS_W_LTE_TO_FLYENEMY_X:           ; Check player is not  
00002960  2239 00002D6C           2546      MOVE.L  PLAYER_X,   D1
00002966  2439 00002D96           2547      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
0000296C  D479 00002DC4           2548      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002972  B481                    2549      CMP.L   D1,         D2                  ; Do they OverLap ?
00002974  6C00 0006               2550      BGE     PLY_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002978  6000 0034               2551      BRA     CHECK_HEALTH_COLLISIONS
0000297C                          2552  
0000297C                          2553  PLY_LTE_TO_FLYENEMY_Y_PLUS_H:     
0000297C  2239 00002D70           2554      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00002982  2439 00002D9A           2555      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002988  D479 00002DC6           2556      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
0000298E  B481                    2557      CMP.L   D1,         D2          ; Do they Overlap ?
00002990  6C00 0006               2558      BGE     PLY_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002994  6000 0018               2559      BRA     CHECK_HEALTH_COLLISIONS
00002998                          2560  
00002998                          2561  PLY_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002998  D239 00002DBE           2562      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
0000299E  2439 00002D9A           2563      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
000029A4  B481                    2564      CMP.L   D1,         D2          ; Do they OverLap ?
000029A6  6F00 01A6               2565      BLE     COLLISIONrun               ; Collision !
000029AA  6000 0002               2566      BRA     CHECK_HEALTH_COLLISIONS
000029AE                          2567  
000029AE                          2568  CHECK_HEALTH_COLLISIONS:
000029AE  4281                    2569      CLR.L   D1                      ; Clear D1
000029B0  4282                    2570      CLR.L   D2                      ; Clear D2
000029B2                          2571  PLX_LTE_TO_HEALTH_X_PLUS_W:
000029B2  2239 00002D6C           2572      MOVE.L  PLAYER_X,   D1
000029B8  D239 00002DBD           2573      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
000029BE  2439 00002D8E           2574      MOVE.L  HEALTH_X,    D2                    ; Move Enemy X to D2
000029C4  B481                    2575      CMP.L   D1,         D2                          ; Do the Overlap ?
000029C6  6F00 0006               2576      BLE     PLX_PLUS_W_LTE_TO_HEALTH_X      ; Less than or Equal ?
000029CA  6000 0050               2577      BRA     CHECK_ATTACK_COLLISIONS
000029CE                          2578  
000029CE                          2579  PLX_PLUS_W_LTE_TO_HEALTH_X:           ; Check player is not  
000029CE  2239 00002D6C           2580      MOVE.L  PLAYER_X,   D1
000029D4  2439 00002D8E           2581      MOVE.L  HEALTH_X,    D2            ; Move Enemy X to D2
000029DA  0682 0000000C           2582      ADD.L   #HEALTH_PACK_W,  D2                    ; Set Enemy width X + Width
000029E0  B481                    2583      CMP.L   D1,         D2                  ; Do they OverLap ?
000029E2  6C00 0006               2584      BGE     PLY_LTE_TO_HEALTH_Y_PLUS_H  ; Less than or Equal
000029E6  6000 0034               2585      BRA     CHECK_ATTACK_COLLISIONS
000029EA                          2586  PLY_LTE_TO_HEALTH_Y_PLUS_H:     
000029EA  2239 00002D70           2587      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000029F0  2439 00002D92           2588      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Y to D2
000029F6  0682 0000000C           2589      ADD.L   #HEALTH_PACK_H,D2          ; Set Enemy Height to D2
000029FC  B481                    2590      CMP.L   D1,         D2          ; Do they Overlap ?
000029FE  6C00 0006               2591      BGE     PLY_PLUS_H_LTE_TO_HEALTH_Y  ; Less than or Equal
00002A02  6000 0018               2592      BRA     CHECK_ATTACK_COLLISIONS
00002A06                          2593  
00002A06                          2594  PLY_PLUS_H_LTE_TO_HEALTH_Y:     ; Less than or Equal ?
00002A06  D239 00002DBE           2595      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00002A0C  2439 00002D92           2596      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Height to D2  
00002A12  B481                    2597      CMP.L   D1,         D2          ; Do they OverLap ?
00002A14  6F00 017E               2598      BLE     HEALTH_COLLISION               ; Collision !
00002A18  6000 0002               2599      BRA     CHECK_ATTACK_COLLISIONS
00002A1C                          2600  
00002A1C                          2601  CHECK_ATTACK_COLLISIONS:
00002A1C  4281                    2602      CLR.L   D1                      ; Clear D1
00002A1E  4282                    2603      CLR.L   D2                      ; Clear D2
00002A20                          2604  ATTACK_X_LTE_TO_ENEMY_X_PLUS_W:
00002A20  2239 00002DB2           2605      MOVE.L  ATTACK_X,   D1
00002A26  0681 00000023           2606      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002A2C  2439 00002D86           2607      MOVE.L  ENEMY_X,    D2                    ; Move Enemy X to D2
00002A32  B481                    2608      CMP.L   D1,         D2                          ; Do the Overlap ?
00002A34  6F00 0006               2609      BLE     ATTACK_PLUS_W_LTE_TO_ENMY_X      ; Less than or Equal ?
00002A38  6000 0050               2610      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002A3C                          2611  
00002A3C                          2612  ATTACK_PLUS_W_LTE_TO_ENMY_X:           ; Check player is not  
00002A3C  2239 00002DB2           2613      MOVE.L  ATTACK_X,   D1
00002A42  2439 00002D86           2614      MOVE.L  ENEMY_X,    D2            ; Move Enemy X to D2
00002A48  D479 00002DC0           2615      ADD.W   ENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002A4E  B481                    2616      CMP.L   D1,         D2                  ; Do they OverLap ?
00002A50  6C00 0006               2617      BGE     ATK_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00002A54  6000 0034               2618      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002A58                          2619  
00002A58                          2620  ATK_LTE_TO_ENEMY_Y_PLUS_H:     
00002A58  2239 00002DB6           2621      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002A5E  2439 00002D8A           2622      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00002A64  D479 00002DC2           2623      ADD.W   ENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002A6A  B481                    2624      CMP.L   D1,         D2          ; Do they Overlap ?
00002A6C  6C00 0006               2625      BGE     ATK_PLUS_H_LTE_TO_ATTACK_Y  ; Less than or Equal
00002A70  6000 0018               2626      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002A74                          2627  
00002A74                          2628  ATK_PLUS_H_LTE_TO_ATTACK_Y:     ; Less than or Equal ?
00002A74  0681 00002DB6           2629      ADD.L   #ATTACK_Y,D1          ; Add Player Height to D1
00002A7A  2439 00002D8A           2630      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00002A80  B481                    2631      CMP.L   D1,         D2          ; Do they OverLap ?
00002A82  6F00 0074               2632      BLE     ATTACK_COLLISION               ; Collision !
00002A86  6000 0002               2633      BRA     CHECK_ATTACK_FLY_COLLISIONS
00002A8A                          2634  
00002A8A                          2635  CHECK_ATTACK_FLY_COLLISIONS:
00002A8A  4281                    2636      CLR.L   D1                      ; Clear D1
00002A8C  4282                    2637      CLR.L   D2                      ; Clear D2
00002A8E                          2638  ATK_X_LTE_TO_FLYENEMY_X_PLUS_W:
00002A8E  2239 00002DB2           2639      MOVE.L  ATTACK_X,   D1
00002A94  0681 00000023           2640      ADD.L   #ATTACK_WIDTH,D1          ; Move Player Width to D1
00002A9A  2439 00002D96           2641      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00002AA0  B481                    2642      CMP.L   D1,         D2                          ; Do the Overlap ?
00002AA2  6F00 0006               2643      BLE     ATTACK_PLUS_W_LTE_TO_FLYENMY_X     ; Less than or Equal ?
00002AA6  6000 0084               2644      BRA     COLLISION_CHECK_DONE
00002AAA                          2645  
00002AAA                          2646  ATTACK_PLUS_W_LTE_TO_FLYENMY_X:           ; Check player is not  
00002AAA  2239 00002DB2           2647      MOVE.L  ATTACK_X,   D1
00002AB0  2439 00002D96           2648      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00002AB6  D479 00002DC4           2649      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00002ABC  B481                    2650      CMP.L   D1,         D2                  ; Do they OverLap ?
00002ABE  6C00 0006               2651      BGE     ATK_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00002AC2  6000 0068               2652      BRA     COLLISION_CHECK_DONE
00002AC6                          2653  
00002AC6                          2654  ATK_LTE_TO_FLYENEMY_Y_PLUS_H:     
00002AC6  2239 00002DB6           2655      MOVE.L  ATTACK_Y,   D1          ; Move Player Y to D1
00002ACC  2439 00002D9A           2656      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00002AD2  D479 00002DC6           2657      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00002AD8  B481                    2658      CMP.L   D1,         D2          ; Do they Overlap ?
00002ADA  6C00 0006               2659      BGE     ATK_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00002ADE  6000 004C               2660      BRA     COLLISION_CHECK_DONE
00002AE2                          2661  
00002AE2                          2662  ATK_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00002AE2  0681 00002DB6           2663      ADD.L   #ATTACK_Y,D1          ; Add Player Height to D1
00002AE8  2439 00002D9A           2664      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00002AEE  B481                    2665      CMP.L   D1,         D2          ; Do they OverLap ?
00002AF0  6F00 0020               2666      BLE     ATTACK_FLY_COLLISION               ; Collision !
00002AF4  6000 0036               2667      BRA     COLLISION_CHECK_DONE
00002AF8                          2668  
00002AF8                          2669  ;---
00002AF8                          2670  
00002AF8                          2671  ATTACK_COLLISION:
00002AF8  23FC 00000190 00002D8A  2672      MOVE.L  #400, ENEMY_Y
00002B02  13FC 0001 00002DBB      2673      MOVE.B  #01,  ENEMY_HIT
00002B0A  5239 00002DBA           2674      ADDI.B  #1,   ENEMIES_DEFEATED
00002B10  4E75                    2675      RTS
00002B12                          2676  
00002B12                          2677  ATTACK_FLY_COLLISION:
00002B12  23FC 00000190 00002D9A  2678      MOVE.L  #400, FLYINGENEMY_Y
00002B1C  13FC 0001 00002DBC      2679      MOVE.B  #01,  FLYENEMY_HIT
00002B24  5239 00002DBA           2680      ADDI.B  #1,   ENEMIES_DEFEATED
00002B2A  4E75                    2681      RTS
00002B2C                          2682  
00002B2C                          2683  COLLISION_CHECK_DONE:               ; No Collision Update points
00002B2C  4239 00002D49           2684      CLR.B   IN_ENEMY
00002B32  4239 00002D4A           2685      CLR.B   IN_HPACK
00002B38  4281                    2686      CLR.L   D1
00002B3A  1239 00002DAB           2687      MOVE.B  POINTS,    D1          ; Move points upgrade to D1
00002B40  D2B9 00002D74           2688      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00002B46  23C1 00002D74           2689      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00002B4C  4E75                    2690      RTS                             ; Return to subroutine
00002B4E                          2691  
00002B4E                          2692  
00002B4E                          2693  COLLISIONrun:
00002B4E  0C39 0001 00002D49      2694      CMP.B     #$01, IN_ENEMY
00002B56  6700 007A               2695      BEQ     STILL_COLLIDED
00002B5A  0C39 0001 00002D4B      2696      CMP.B   #01, DRAW_HEALTHPACKS
00002B62  6600 F714               2697      BNE     RESET_HEALTH_POSITION
00002B66  13FC 0001 00002D4B      2698      MOVE.B  #01, DRAW_HEALTHPACKS 
00002B6E  13FC 0001 00002D4C      2699      MOVE.B  #01, SPAWN_HEALTHPACKS 
00002B76  5339 00002DAA           2700      SUB.B   #1, LIVES
00002B7C  13FC 0001 00002D49      2701      MOVE.B  #$01, IN_ENEMY
00002B84  4A39 00002DAA           2702      TST.B   LIVES
00002B8A  6700 0048               2703      BEQ     GAME_OVER
00002B8E  6100 FA6A               2704      BSR     PLAY_HITHURT               ; Play Opps Wav
00002B92  4E75                    2705      RTS                             ; Return to subroutine
00002B94                          2706  
00002B94                          2707  HEALTH_COLLISION:
00002B94  0C39 0001 00002D4A      2708      CMP.B     #$01, IN_HPACK
00002B9C  6700 0034               2709      BEQ     STILL_COLLIDED
00002BA0  13FC 0000 00002D4B      2710      MOVE.B  #00, DRAW_HEALTHPACKS
00002BA8  6100 FA6E               2711      BSR     PLAY_POWERUP               ; Play Opps Wav
00002BAC  5239 00002DAA           2712      ADD.B   #1, LIVES
00002BB2  0C39 0005 00002DAA      2713      CMP.B   #05, LIVES
00002BBA  6C00 000C               2714      BGE     STOP_HPACK_SPAWN
00002BBE  13FC 0001 00002D4A      2715      MOVE.B  #$01, IN_HPACK
00002BC6  4E75                    2716      RTS
00002BC8                          2717  
00002BC8                          2718  STOP_HPACK_SPAWN:
00002BC8  13FC 0000 00002D4C      2719      MOVE.B  #00, SPAWN_HEALTHPACKS
00002BD0  4E75                    2720      RTS
00002BD2                          2721  
00002BD2                          2722  STILL_COLLIDED:
00002BD2  4E75                    2723      RTS
00002BD4                          2724  
00002BD4                          2725  GAME_OVER:
00002BD4  6100 E8AE               2726      BSR     DRAW                    ; Redraw the Scene
00002BD8  103C 005E               2727      MOVE.B  #TC_REDRAW,        D0
00002BDC  4E4F                    2728      TRAP    #15
00002BDE  6100 F9DE               2729      BSR     PLAY_GAMEOVER
00002BE2  4281                    2730      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00002BE4                          2731  
00002BE4  223C 00FFFFFF           2732      MOVE.L  #WHITE,     D1
00002BEA  103C 0015               2733      MOVE.B  #21,        D0          ; Set Text Color
00002BEE  243C 01130005           2734      MOVE.L  #$01130005, D2
00002BF4  4E4F                    2735      TRAP    #15                     ; Trap (Perform action)
00002BF6                          2736  
00002BF6  7200                    2737      MOVE.L  #BLACK,     D1
00002BF8  103C 0051               2738      MOVE.B  #81,        D0          ; Set Text Color
00002BFC  4E4F                    2739      TRAP    #15                     ; Trap (Perform action)
00002BFE                          2740  
00002BFE  103C 000B               2741      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002C02  323C FF00               2742      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00002C06  4E4F                    2743      TRAP    #15                     ; Trap (Perform action)
00002C08                          2744  
00002C08  103C 000B               2745      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002C0C  323C 1005               2746      MOVE.W  #$1005,     D1          ; Col 10, Row 03
00002C10  4E4F                    2747      TRAP    #15                     ; Trap (Perform action)
00002C12  43F9 00002CFE           2748      LEA     GAMEOVER_MSG,A1        ; Game Over Message
00002C18  303C 000D               2749      MOVE    #13,        D0          ; No Line feed
00002C1C  4E4F                    2750      TRAP    #15                     ; Trap (Perform action)
00002C1E                          2751  
00002C1E                          2752      ; Player Score Message
00002C1E  103C 000B               2753      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002C22  323C 0F06               2754      MOVE.W  #$0F06,     D1          ; Col 02, Row 01
00002C26  4E4F                    2755      TRAP    #15                     ; Trap (Perform action)
00002C28  43F9 00002C98           2756      LEA     SCORE_MSG,  A1          ; Score Message
00002C2E  303C 000D               2757      MOVE    #13,        D0          ; No Line feed
00002C32  4E4F                    2758      TRAP    #15                     ; Trap (Perform action)
00002C34                          2759  
00002C34                          2760      ; Player Score Value
00002C34  103C 000B               2761      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002C38  323C 1706               2762      MOVE.W  #$1706,     D1          ; Col 09, Row 01
00002C3C  4E4F                    2763      TRAP    #15                     ; Trap (Perform action)
00002C3E  103C 0003               2764      MOVE.B  #03,        D0          ; Display number at D1.L
00002C42  2239 00002D74           2765      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00002C48  4E4F                    2766      TRAP    #15                     ; Trap (Perform action)
00002C4A                          2767      
00002C4A                          2768  
00002C4A  223C 00FFFFFF           2769      MOVE.L  #WHITE,     D1
00002C50  103C 0015               2770      MOVE.B  #21,        D0          ; Set Text Color
00002C54  243C 03140000           2771      MOVE.L  #$03140000, D2
00002C5A  4E4F                    2772      TRAP    #15                     ; Trap (Perform action)
00002C5C                          2773  
00002C5C                          2774  
00002C5C                          2775      ; Restart
00002C5C  103C 000B               2776      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002C60  323C 0B08               2777      MOVE.W  #$0B08,     D1          ; Col 09, Row 01
00002C64  4E4F                    2778      TRAP    #15                     ; Trap (Perform action)
00002C66  43F9 00002D09           2779      LEA     RESTART_MSG,  A1          ; Score Message
00002C6C  303C 000D               2780      MOVE    #13,        D0          ; No Line feed
00002C70  4E4F                    2781      TRAP    #15                     ; Trap (Perform action)
00002C72                          2782  
00002C72                          2783      
00002C72  103C 005E               2784      MOVE.B  #TC_REDRAW,        D0
00002C76  4E4F                    2785      TRAP    #15
00002C78                          2786  
00002C78                          2787  INPUTLOOP:
00002C78  6100 F36E               2788      BSR     runINPUT
00002C7C  60FA                    2789      BRA     INPUTLOOP
00002C7E                          2790  
00002C7E                          2791  EXIT:
00002C7E                          2792      
00002C7E  103C 000B               2793      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00002C82  323C FF00               2794      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00002C86  4E4F                    2795      TRAP    #15                     ; Trap (Perform action)
00002C88                          2796  
00002C88  103C 005E               2797      MOVE.B  #TC_REDRAW,        D0
00002C8C  4E4F                    2798      TRAP    #15
00002C8E                          2799  
00002C8E  103C 0009               2800      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00002C92  4E4F                    2801      TRAP    #15                     ; Trap (Perform action)
00002C94  FFFF FFFF               2802      SIMHALT
00002C98                          2803  
00002C98= 53 63 6F 72 65 20 ...   2804  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00002CA1= 4B 65 79 43 6F 64 ...   2805  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
00002CAC= 4A 75 6D 70 2E 2E ...   2806  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00002CB5                          2807  
00002CB5= 49 64 6C 65 2E 2E ...   2808  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00002CBE= 55 70 64 61 74 65 ...   2809  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
00002CC9= 44 72 61 77 2E 2E ...   2810  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00002CD2                          2811  
00002CD2= 58 3A 00                2812  X_MSG           DC.B    'X:', 0             ; X Position Message
00002CD5= 59 3A 00                2813  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00002CD8= 56 3A 00                2814  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
00002CDB= 44 52 41 57 00          2815  VARMSG           DC.B    'DRAW', 0             ; Gravity Position Message
00002CE0= 45 4E 45 4D 49 45 ...   2816  GND_MSG         DC.B    'ENEMIES DEFEATED:', 0           ; On Ground Position Message
00002CF2                          2817  
00002CF2= 45 78 69 74 69 6E ...   2818  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00002CFE= 47 61 6D 65 20 4F ...   2819  GAMEOVER_MSG    DC.B    'Game Over!', 0      ; Game Over Message
00002D09= 50 72 65 73 73 20 ...   2820  RESTART_MSG    DC.B    'Press R to play again', 0      ; Game Over Message
00002D1F= 23 23 00                2821  TREET          DC.B     '##',0
00002D22                          2822  
00002D22= 45 6E 74 65 72 20 ...   2823  PRESSSTART      DC.B    'Enter 1 to start',0
00002D33= 41 4E 54 20 44 45 ...   2824  TITLEMSG        DC.B    'ANT DEFENDER',0
00002D40= 4C 69 76 65 73 20 ...   2825  LIVES_MSG       DC.B    'Lives : ',0        ; lives message
00002D49                          2826  
00002D49= 00                      2827  IN_ENEMY        DC.B      00                  ; marker for if the player is in the enemy
00002D4A= 00                      2828  IN_HPACK        DC.B      00                  ; marker for if the player is in the health pack
00002D4B= 00                      2829  DRAW_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are showing
00002D4C= 00                      2830  SPAWN_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are spawning
00002D4D                          2831  
00002D4E= 07D0                    2832  LEVEL_02        DC.W    2000
00002D50= 2710                    2833  LEVEL_03        DC.W    10000
00002D52                          2834  
00002D52= 00001B58 00000FA0 ...   2835  LEVELS:         DC.L    7000,4000,2000,1000
00002D62                          2836  
00002D62                          2837  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00002D64                          2838  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00002D66                          2839  
00002D66                          2840  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00002D6A                          2841  LAST_KEY        DS.W    01  ; Reserve Space for Current Key Pressed
00002D6C                          2842  
00002D6C                          2843  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00002D70                          2844  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00002D74                          2845  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00002D78                          2846  
00002D78                          2847  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00002D7C                          2848  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00002D80                          2849  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00002D84                          2850  
00002D84                          2851  ; 1, = left, 0 = right
00002D84                          2852  PLAYER_DIR      DS.B    01  ; Reserve Space for Player Direction
00002D85                          2853  
00002D86                          2854  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00002D8A                          2855  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00002D8E                          2856  
00002D8E                          2857  HEALTH_X         DS.L    01  ; Reserve Space for Health+ X Position
00002D92                          2858  HEALTH_Y         DS.L    01  ; Reserve Space for Health Y Position
00002D96                          2859  
00002D96                          2860  FLYINGENEMY_X         DS.L    01  ; Reserve Space for Flying Enemy X Position
00002D9A                          2861  FLYINGENEMY_Y         DS.L    01  ; Reserve Space for Flying Enemy Y Position
00002D9E                          2862  
00002D9E= 000000FF                2863  ENEMYCOLOR        DC.L        $000000FF
00002DA2= 00FF0000                2864  FLYENEMYCOLOR     DC.L        $00FF0000
00002DA6                          2865  
00002DA6                          2866  RANDOM            DS.L        01  ; Reserve Space for Random Number
00002DAA= 05                      2867  LIVES             DC.B        05  ; reserves space for player lives
00002DAB                          2868   
00002DAB= 02                      2869  POINTS            DC.B        02          ; Points added
00002DAC                          2870  
00002DAC= 00                      2871  CURRENTLYATTACKING   DC.B    00
00002DAE= 0000                    2872  ATTACK_COOLDOWN      DC.W    00
00002DB0= 0000                    2873  ATTACK_TIME          DC.W    00
00002DB2= 00000000                2874  ATTACK_X             DC.L    00
00002DB6= 00000000                2875  ATTACK_Y             DC.L    00
00002DBA  =00000014               2876  ATTACK_HEIGHT        EQU     20
00002DBA  =00000023               2877  ATTACK_WIDTH         EQU     35 
00002DBA                          2878  
00002DBA= 00                      2879  ENEMIES_DEFEATED     DC.B    00
00002DBB= 00                      2880  ENEMY_HIT           DC.B    00
00002DBC= 00                      2881  FLYENEMY_HIT        DC.B    00
00002DBD                          2882  
00002DBD= 0C                      2883  PLAYER_WIDTH      DC.B        12          ; Player Width
00002DBE= 0C                      2884  PLAYER_HEIGHT     DC.B        12          ; Player Height
00002DBF                          2885  
00002DC0= 000C                    2886  ENEMY_WIDTH       DC.W        12          ; Enemy Width
00002DC2= 000C                    2887  ENEMY_HEIGHT      DC.W        12          ; Enemy Height
00002DC4                          2888  
00002DC4= 0014                    2889  FLYENEMY_WIDTH    DC.W        20 
00002DC6= 000C                    2890  FLYENEMY_HEIGHT   DC.W        12 
00002DC8                          2891  
00002DC8                          2892          
00002DC8= 6A 75 6D 70 2E 77 ...   2893  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00002DD1= 67 61 6D 65 4F 76 ...   2894  GAMEOVER_WAV         DC.B    'gameOver.wav',0         ; Run Sound
00002DDE= 68 69 74 48 75 72 ...   2895  HITHURT_WAV        DC.B    'hitHurt.wav',0        ; Collision Opps
00002DEA= 70 6F 77 65 72 55 ...   2896  POWERUP_WAV        DC.B    'powerUP.wav',0        ; Collision Opps
00002DF6= 6C 65 76 65 6C 43 ...   2897  LEVELCHANGE_WAV        DC.B    'levelChange.wav',0        ; Collision Opps
00002E06                          2898  
00002E06= 3A0C                    2899  TRUNK   DC.W    $3A0C
00002E08= 00C8                    2900  X   DC.W    200
00002E0A= 0190                    2901  Y   DC.W    400
00002E0C= 00C8                    2902  Z   DC.W    200
00002E0E= 0004                    2903  SCALER DC.W  4
00002E10  =00000010               2904  ROWC    EQU    16
00002E10= FFB0                    2905  WIDTH   DC.W    $FFB0
00002E12                          2906  
00002E12                          2907  titleBmp
00002E12= 74 72 65 65 32 2E ...   2908      dc.b    'tree2.bmp',0
00002E1C                          2909  list
00002E1C= 2A 2E 62 6D 70 00       2910      dc.b    '*.bmp',0               * file type list
00002E22                          2911      ds.w    0                   * ensure even
00002E22                          2912  
00002E22                          2913  
00002E22= 00000000                2914  timer           DC.L    0
00002E26                          2915  SPRITE_DATA:
00002E26                          2916      END    START        ; last line of source
00002E26                          2917  -------------------- end include --------------------

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AKEY                41
APPLEH              10
APPLEW              10
APRESSED            1DD8
ATK_LTE_TO_ENEMY_Y_PLUS_H  2A58
ATK_LTE_TO_FLYENEMY_Y_PLUS_H  2AC6
ATK_PLUS_H_LTE_TO_ATTACK_Y  2A74
ATK_PLUS_H_LTE_TO_FLYENEMY_Y  2AE2
ATK_X_LTE_TO_FLYENEMY_X_PLUS_W  2A8E
ATTACKMSG1          189D
ATTACKMSG2          18B9
ATTACK_COLLISION    2AF8
ATTACK_COOLDOWN     2DAE
ATTACK_COOLDOWN_SUB  214A
ATTACK_FLY_COLLISION  2B12
ATTACK_HEIGHT       14
ATTACK_PLUS_W_LTE_TO_ENMY_X  2A3C
ATTACK_PLUS_W_LTE_TO_FLYENMY_X  2AAA
ATTACK_TIME         2DB0
ATTACK_TIME_SUB     2142
ATTACK_WIDTH        23
ATTACK_X            2DB2
ATTACK_X_LTE_TO_ENEMY_X_PLUS_W  2A20
ATTACK_Y            2DB6
BATTLE              1146
BLACK               0
BLUE                FF0000
BROWN               19506D
BULLETH             5
BULLETW             5
CAMERAOFFSETX       1C26
CAMERAOFFSETY       1C2A
CAMERAX             1C2E
CAMERAY             1C32
CAMERAZOOM          1C36
CELLBRX             13EE
CELLBRY             13F2
CELLTLX             13E6
CELLTLY             13EA
CELLXRADIUS         1436
CELLYOFFSET         143E
CELLYRADIUS         143A
CENTERX             11EA
CENTERY             11EE
CHECKINCREMENT      1AAE
CHECK_ATTACK_COLLISIONS  2A1C
CHECK_ATTACK_COOLDOWN  2134
CHECK_ATTACK_FLY_COLLISIONS  2A8A
CHECK_COLLISIONS    28D6
CHECK_FLYENEMY_COLLISIONS  2940
CHECK_HEALTH_COLLISIONS  29AE
CLEARSCREEN         1164
COLLISION           1148
COLLISIONRUN        2B4E
COLLISION_CHECK_DONE  2B2C
COLOR1              201808
COLOR2              494320
COLOR3              56864B
COLOR4              7AC687
COLOR5              AFE5D0
COLORRED            463EBD
COMMONINPUT         1CD6
CONTINUE            2290
CRLF                1840
CURRENTHEALTH       11F6
CURRENTHPX          187E
CURRENTKEY          11D8
CURRENTLYATTACKING  2DAC
CURRENTPTS          11F2
CURRENTSPAWNX       1ADE
CURRENTSPAWNY       1AE2
CURRENT_KEY         2D66
DELAY               1FC4
DKEY                44
DPRESSED            1E02
DRAW                1484
DRAWBG              161E
DRAWCELL            16F6
DRAWDIRT            28B0
DRAWENEMIES         1682
DRAWENEMY           16B2
DRAWHEALTH          1524
DRAWPAUSE           14BC
DRAWPLAYER          164E
DRAWRECT            17B8
DRAWRUN             22D0
DRAWTEXT            157E
DRAWUIRECT          17FA
DRAW_ATTACK         268C
DRAW_BACKGROUND     230C
DRAW_ENEMY          26D0
DRAW_FLOOR          27DA
DRAW_FLOOR_L1       28A6
DRAW_FLOOR_L2       286A
DRAW_FLOOR_L3       2858
DRAW_FLOOR_L4       2846
DRAW_FLOOR_L5       2834
DRAW_FLYENEMY       2714
DRAW_HEALTHPACK     2758
DRAW_HEALTHPACKS    2D4B
DRAW_HEALTHPACK_DONE  27CE
DRAW_MSG            2CC9
DRAW_PLAYER         2642
DRAW_PLYR_DATA      23B4
END                 11B8
ENDCOLLIDE          1A96
ENDCOLLISION        13E4
ENDDRAW             1796
ENDDRAWPAUSE        1522
ENDFOLLOW           1C5C
ENDHEAL             11A6
ENDINITENEMY        1A98
ENDINPUT            1D78
ENDLOOP             1116
ENDMOVEMENT         1E18
ENDMSG              1854
ENDPROCESS          1A94
ENDTOGGLEFULLSCREEN  1832
ENEMIES_DEFEATED    2DBA
ENEMY1X             1ABC
ENEMY1Y             1AC0
ENEMY2X             1AC4
ENEMY2Y             1AC8
ENEMY3X             1ACC
ENEMY3Y             1AD0
ENEMY4X             1AD4
ENEMY4Y             1AD8
ENEMYCOLCHECK       1954
ENEMYCOLLIDE        1A8E
ENEMYCOLOR          2D9E
ENEMYDIR            1C24
ENEMYH              C
ENEMYHALFH          6
ENEMYHALFW          8
ENEMYINDEX          1ADC
ENEMYLEFTCOLCHECK   1A6C
ENEMYRIGHTCOLCHECK  1A7A
ENEMYSPAWNTIMER     1AA8
ENEMYTIME           1AA4
ENEMYW              10
ENEMYX              18E8
ENEMYY              18EC
ENEMY_HEIGHT        2DC2
ENEMY_HIT           2DBB
ENEMY_H_INIT        C
ENEMY_WIDTH         2DC0
ENEMY_X             2D86
ENEMY_Y             2D8A
ENMY_H_INIT         C
ENMY_W_INIT         C
ENTERHILL           1452
ENTERKEY            D
ESCAPE              1B
ESCAPEJUSTPRESSED   1D88
ESCAPEKEY           1B
ESCAPEPRESSED       1D7A
EXIT                2C7E
EXIT_MSG            2CF2
FIRSTINIT           1004
FLYENEMYCOLOR       2DA2
FLYENEMY_HEIGHT     2DC6
FLYENEMY_HIT        2DBC
FLYENEMY_WIDTH      2DC4
FLYINGENEMY_X       2D96
FLYINGENEMY_Y       2D9A
FLY_ENMY_H_INIT     C
FLY_ENMY_W_INIT     14
FOLLOWCAM           1C3A
GAME                1FBA
GAMELOOP            1FBA
GAMEOVER_INDEX      0
GAMEOVER_LOAD       25AC
GAMEOVER_MSG        2CFE
GAMEOVER_WAV        2DD1
GAME_OVER           2BD4
GETCURRENTENEMY     1B50
GETENEMY1           1B82
GETENEMY2           1B90
GETENEMY3           1B9E
GETENEMY4           1BAC
GND_FALSE           0
GND_MSG             2CE0
GND_TRUE            1
GOFULLSCREEN        1826
GREEN               566D19
HEAL                118A
HEALTHBARLOCY       1884
HEALTHBAROFFSETX    1882
HEALTHBRX           1876
HEALTHBRY           187A
HEALTHMSG           1866
HEALTHROW           1886
HEALTHTLX           186E
HEALTHTLY           1872
HEALTH_COLLISION    2B94
HEALTH_PACK_H       C
HEALTH_PACK_W       C
HEALTH_X            2D8E
HEALTH_Y            2D92
HEALTIME            1AA6
HITHURT_INDEX       2
HITHURT_LOAD        25E8
HITHURT_WAV         2DDE
IDLE                25AA
IDLE_MSG            2CB5
INCREMENT           1AAA
INITALLENEMIES      1AE6
INITDRAW            1452
INITENEMY           18F0
INITENEMYBL         1A32
INITENEMYBR         19FA
INITENEMYTL         198C
INITENEMYTR         19C4
INITIALIZECELL      1202
INITRUN             1E1A
INPUTKEYS           11D1
INPUTLOOP           2C78
INPUTTYPE           1CD4
IN_ENEMY            2D49
IN_HPACK            2D4A
ISFOLLOW            1C38
ISFULLSCREEN        1852
ISPAUSED            11E0
IS_PLAYER_ON_GND    2532
JMP_INDEX           1
JUMP                2586
JUMP_DONE           25A8
JUMP_LOAD           25CA
JUMP_MSG            2CAC
JUMP_WAV            2DC8
KEY0                30
KEY0JUSTPRESSED     1D9C
KEY0PRESSED         1D8E
KEY1                31
KEY1PRESSED         1DB0
KEY2                32
KEY2PRESSED         1DB8
KEY3                33
KEYCODE_MSG         2CA1
LASTKEY             11DC
LAST_KEY            2D6A
LEVELCHANGE_INDEX   4
LEVELCHANGE_WAV     2DF6
LEVELS              2D52
LEVEL_02            2D4E
LEVEL_03            2D50
LIFEGREEN           44FF44
LIST                2E1C
LIVES               2DAA
LIVES_MSG           2D40
LKEY                4C
LOOKLEFT            1
LOOKRIGHT           2
LOOP                110C
LVLCHANGE_LOAD      2624
LVLTYPE             1C78
MAP                 1122
MAPINIT             10BE
MAPINPUT            1D00
MAPMOVEINPUT        1D26
MAXHEALTH           11FA
MENUINPUT           1CF4
MOVE_ENEMY          21A8
MOVE_ENEMY_L2       21DA
MOVE_ENEMY_L3       21F0
MOVE_ENEMY_L4       2206
MOVE_HEALTHPACK     21A0
MOVE_PLAYER_LEFT    2152
MOVE_PLAYER_RIGHT   2170
MOVE_TREE           2198
NEXTINIT            1012
NOINPUT             1CC6
PAUSED              1162
PAUSEDINPUT         1D62
PAUSEHALFHEIGHT     188C
PAUSEHALFWIDTH      1888
PAUSEMSG            1890
PERFORM_ATTACK      2292
PERFORM_JUMP        2598
PLAYERH             8
PLAYERTIME          1AA2
PLAYERW             8
PLAYERX             11E2
PLAYERY             11E6
PLAYER_DIR          2D84
PLAYER_HEIGHT       2DBE
PLAYER_SCORE        2D74
PLAYER_WIDTH        2DBD
PLAYER_X            2D6C
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  28DA
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  28F6
PLAYER_Y            2D70
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  2912
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  292C
PLAY_GAMEOVER       25BE
PLAY_HITHURT        25FA
PLAY_JUMP           25DC
PLAY_LVLCHANGE      2636
PLAY_POWERUP        2618
PLX_LTE_TO_FLYENEMY_X_PLUS_W  2944
PLX_LTE_TO_HEALTH_X_PLUS_W  29B2
PLX_PLUS_W_LTE_TO_FLYENEMY_X  2960
PLX_PLUS_W_LTE_TO_HEALTH_X  29CE
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        2D7C
PLYR_H_INIT         C
PLYR_JUMP_V         FFFFFFED
PLYR_ON_GND         2D80
PLYR_VELOCITY       2D78
PLYR_W_INIT         14
PLY_LTE_TO_FLYENEMY_Y_PLUS_H  297C
PLY_LTE_TO_HEALTH_Y_PLUS_H  29EA
PLY_PLUS_H_LTE_TO_FLYENEMY_Y  2998
PLY_PLUS_H_LTE_TO_HEALTH_Y  2A06
POINTS              2DAB
POINTSGAIN          1
POINTSMSG           185E
POINTSROW           1887
POWERUP_INDEX       3
POWERUP_LOAD        2606
POWERUP_WAV         2DEA
PRESSSTART          2D22
PRINT               17A8
PRINTNUM            17B0
PROCESSENEMIES      1B26
PROCESSENEMIESLOOP  1B30
PROCESSENEMY        1922
PROCESSENEMYBL      1A4C
PROCESSENEMYBR      1A12
PROCESSENEMYTL      19A4
PROCESSENEMYTR      19DA
PROCESS_INPUT       205E
PROCESS_RESTART     208A
RANDOM              2DA6
RED                 FF
RESET_ENEMY_POSITION  2220
RESET_FLYENEMY_POSITION  224A
RESET_HEALTH_POSITION  2278
RESET_TREE          218E
RESTART_MSG         2D09
RKEY                52
ROWC                10
RUNACTIONKEYS       41444C20
RUNINPUT            1FE8
SAVECURRENTENEMY    1BBA
SAVEENEMY1          1BEC
SAVEENEMY2          1BFA
SAVEENEMY3          1C08
SAVEENEMY4          1C16
SCALER              2E0E
SCORE_MSG           2C98
SCREENH             1200
SCREENW             11FE
SCREEN_H            2D64
SCREEN_W            2D62
SETCURSOR           1802
SETFILLCOLOUR       17A0
SETFULLSCREEN       1838
SETPENCOLOUR        1798
SET_OFF_GROUND      257A
SET_ON_GROUND       2552
SKEY                53
SKY                 FFE2B0
SPACEBAR            20
SPACEKEY            20
SPAWN_HEALTHPACKS   2D4C
SPRESSED            1DEC
SPRITE_DATA         2E26
START               1000
STARTSCREEN         1FBA
STILL_COLLIDED      2BD2
STOP_HPACK_SPAWN    2BC8
TAKEDMG             11A8
TCCRS               B
TCDBL               5C
TCFONT              15
TCFULLSCREEN        21
TCINP               13
TCPENCLR            50
TCPENFIL            51
TCRECT              57
TCSCREEN            21
TCSCREENSIZE        0
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_REDRAW           5E
TC_SCREEN           21
TC_S_SIZE           0
TESTINPUT           1C7A
TESTMSG             11CC
TIMER               2E22
TITLE               104E
TITLE1MSG           1092
TITLE2MSG           10A4
TITLEBMP            2E12
TITLELOOP           1084
TITLEMSG            2D33
TOGGLEFOLLOW        1C5E
TOGGLEFULLSCREEN    180A
TOGGLEPAUSE         117A
TREET               2D1F
TREE_LEAVES_X       2386
TREE_LEAVES_Y       237A
TREE_LOOP           2342
TRUNK               2E06
TURNONFOLLOW        1C70
UPDATE              209A
UPDATE_MSG          2CBE
VARMSG              2CDB
V_MSG               2CD8
WASDKEYS            57415344
WASTETIME           1170
WHITE               FFFFFF
WIDTH               2E10
WKEY                57
WPRESSED            1DC4
X                   2E08
X_MSG               2CD2
Y                   2E0A
Y_MSG               2CD5
Z                   2E0C
ZKEY                5A
ZONE1BRX            13FE
ZONE1BRY            1402
ZONE1COLLISION      1338
ZONE1TLX            13F6
ZONE1TLY            13FA
ZONE2BRX            140E
ZONE2BRY            1412
ZONE2COLLISION      1366
ZONE2TLX            1406
ZONE2TLY            140A
ZONE3BRX            141E
ZONE3BRY            1422
ZONE3COLLISION      1390
ZONE3TLX            1416
ZONE3TLY            141A
ZONE4BRX            142E
ZONE4BRY            1432
ZONE4COLLISION      13BA
ZONE4TLX            1426
ZONE4TLY            142A
ZONEHEIGHT          1446
ZONEMSG             144A
ZONEWIDTH           1442
ZPRESSED            1DA2
_00000000           1CA8
_00000001           1CB6
_00000002           1CC4
_00000003           1D3E
_00000004           1D4A
_00000005           1D56
_00000006           1D62
_00000007           2006
_00000008           2018
_00000009           202A
_0000000A           203C
