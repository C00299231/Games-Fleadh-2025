00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/02/2025 08:37:01

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Game Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 05/02/2025
00000000                             5  * Description: Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =0000005E                 22  TC_REDRAW   EQU         94          ; Redraw Screen
00001000  =00000009                 23  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            24  
00001000                            25  *-----------------------------------------------------------
00001000                            26  * Section       : Charater Setup
00001000                            27  * Description   : Size of Player and Enemy and properties
00001000                            28  * of these characters e.g Starting Positions and Sizes
00001000                            29  *-----------------------------------------------------------
00001000  =0000000C                 30  PLYR_W_INIT EQU         12          ; Players initial Width
00001000  =0000000C                 31  PLYR_H_INIT EQU         12          ; Players initial Height
00001000                            32  
00001000  =00000000                 33  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFED                 34  PLYR_JUMP_V EQU         -19          ; Player Jump Velocity
00001000  =00000001                 35  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            36  
00001000  =00000001                 37  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 38  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            39  
00001000  =00000000                 40  GAMEOVER_INDEX   EQU             00          ; Player Run Sound Index  
00001000  =00000001                 41  JMP_INDEX   EQU             01          ; Player Jump Sound Index  
00001000  =00000002                 42  HITHURT_INDEX  EQU          02          ; Player Opps Sound Index
00001000  =00000003                 43  POWERUP_INDEX  EQU          03          ; Player Opps Sound Index
00001000  =00000004                 44  LEVELCHANGE_INDEX  EQU      04          ; Player Opps Sound Index
00001000                            45  
00001000  =0000000C                 46  ENMY_W_INIT EQU         12          ; Enemy initial Width
00001000  =0000000C                 47  ENMY_H_INIT EQU         12          ; Enemy initial Height
00001000                            48  
00001000  =00000014                 49  FLY_ENMY_W_INIT  EQU         20          ; Enemy initial Width
00001000  =0000000C                 50  FLY_ENMY_H_INIT  EQU         12          ; Enemy initial Height
00001000                            51  
00001000  =0000000C                 52  HEALTH_PACK_W    EQU         12          ; Enemy initial Width
00001000  =0000000C                 53  HEALTH_PACK_H    EQU         12          ; Enemy initial Height
00001000                            54  
00001000                            55  *-----------------------------------------------------------
00001000                            56  * Section       : Graphic Colors
00001000                            57  * Description   : Screen Pixel Color
00001000                            58  *-----------------------------------------------------------
00001000  =00FFFFFF                 59  WHITE           EQU     $00FFFFFF
00001000  =00000000                 60  BLACK           EQU     $00000000
00001000  =000000FF                 61  RED             EQU     $000000FF
00001000  =00FF0000                 62  BLUE            EQU     $00FF0000
00001000  =00566D19                 63  GREEN           EQU     $00566D19
00001000  =0044FF44                 64  LIFEGREEN       EQU     $0044FF44
00001000  =0019506D                 65  BROWN           EQU     $0019506D         ; Brown   
00001000  =00FFE2B0                 66  SKY             EQU     $00FFE2B0         ; Sky Blue
00001000                            67  
00001000                            68  *-----------------------------------------------------------
00001000                            69  * Section       : Keyboard Keys
00001000                            70  * Description   : Spacebar and Escape or two functioning keys
00001000                            71  * Spacebar to JUMP and Escape to Exit Game
00001000                            72  *-----------------------------------------------------------
00001000  =00000020                 73  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 74  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000  =00000052                 75  R           EQU         $52         ; R ASCII Keycode
00001000                            76  *-----------------------------------------------------------
00001000                            77  * Subroutine    : Initialise
00001000                            78  * Description   : Initialise game data into memory such as 
00001000                            79  * sounds and screen size
00001000                            80  *-----------------------------------------------------------
00001000                            81  INITIALISE:
00001000                            82      ; Initialise Sounds
00001000  6100 0680                 83      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001004  6100 065E                 84      BSR     GAMEOVER_LOAD                ; Load Run Sound into Memory
00001008  6100 0696                 85      BSR     HITHURT_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C  6100 06B0                 86      BSR     POWERUP_LOAD               ; Load Opps (Collision) Sound into Memory
00001010  6100 06CA                 87      BSR     LVLCHANGE_LOAD               ; Load Opps (Collision) Sound into Memory
00001014                            88  
00001014                            89      ; Screen Size
00001014  103C 0021                 90      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001018  7200                      91      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
0000101A  4E4F                      92      TRAP    #15                     ; interpret D0 and D1 for screen size
0000101C  33C1 00001D66             93      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001022  4841                      94      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001024  33C1 00001D64             95      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
0000102A                            96  
0000102A                            97      ; Place the Player at the center of the screen
0000102A  B381                      98      EOR.L    D1,D1                      ; Clear contents of D1 (XOR is faster)
0000102C  3239 00001D64             99      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001032  82FC 0002                100      DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001036  23C1 00001D6C            101      MOVE.L  D1,         PLAYER_X    ; Players X Position
0000103C                           102  
0000103C  B381                     103      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000103E  3239 00001D66            104      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001044  82FC 0002                105      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001048  23C1 00001D70            106      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
0000104E                           107  
0000104E                           108      ; Set the player starting width and height
0000104E  13FC 000C 00001DAE       109      MOVE.B  #12,        PLAYER_WIDTH ; Players Width
00001056  13FC 000C 00001DAF       110      MOVE.B  #12,        PLAYER_HEIGHT ; Players Width
0000105E                           111  
0000105E  B381                     112      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001060  3239 00001D66            113      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001066  82FC 0002                114      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000106A  23C1 00001D70            115      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001070                           116  
00001070                           117      ; Initialise Player Score
00001070  B381                     118      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001072  7200                     119      MOVE.L  #00,        D1          ; Init Score
00001074  23C1 00001D74            120      MOVE.L  D1,         PLAYER_SCORE
0000107A                           121  
0000107A                           122      ; Initialise Player Velocity
0000107A  B381                     123      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000107C  123C 0000                124      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001080  23C1 00001D78            125      MOVE.L  D1,         PLYR_VELOCITY
00001086                           126  
00001086                           127      ; Initialise Player Gravity
00001086  B381                     128      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001088  7201                     129      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
0000108A  23C1 00001D7C            130      MOVE.L  D1,         PLYR_GRAVITY
00001090                           131  
00001090                           132      ; Initialize Player on Ground
00001090  23FC 00000001 00001D80   133      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
0000109A                           134  
0000109A                           135      ; Initial Position for Enemy
0000109A  B381                     136      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
0000109C  3239 00001D64            137      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010A2  23C1 00001D84            138      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000010A8                           139  
000010A8  B381                     140      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000010AA  3239 00001D66            141      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010B0  82FC 0002                142      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010B4  23C1 00001D88            143      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
000010BA                           144  
000010BA                           145      ; Initialise the starting enemy width and height
000010BA  33FC 000C 00001DB0       146      MOVE.W  #12,        ENEMY_WIDTH ; Enemy Width
000010C2  33FC 000C 00001DB2       147      MOVE.W  #12,        ENEMY_HEIGHT ; Enemy Height
000010CA                           148  
000010CA                           149      ; Initial Position for Flying Enemy
000010CA  B381                     150      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000010CC  3239 00001D64            151      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010D2  23C1 00001D94            152      MOVE.L  D1,         FLYINGENEMY_X     ; Enemy X Position
000010D8                           153  
000010D8  B381                     154      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
000010DA  3239 00001D66            155      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010E0  82FC 0002                156      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010E4  0441 003C                157      SUB.W   #60,        D1
000010E8  23C1 00001D98            158      MOVE.L  D1,         FLYINGENEMY_Y     ; Enemy Y Position
000010EE                           159      
000010EE                           160      ; Initial Flying enemy width and height
000010EE  33FC 0014 00001DB4       161      MOVE.W  #20,        FLYENEMY_WIDTH ; Enemy Width
000010F6  33FC 000C 00001DB6       162      MOVE.W  #12,        FLYENEMY_HEIGHT ; Enemy Height
000010FE                           163      ; Initial Position for Health pack
000010FE  B381                     164      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001100  3239 00001D64            165      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001106  0481 FFFFFFFF            166      SUB.L   #-1,        D1
0000110C  23C1 00001D8C            167      MOVE.L  D1,         HEALTH_X     ; Enemy X Position
00001112                           168  
00001112  B381                     169      EOR.L     D1,D1                      ; Clear contents of D1 (XOR is faster)
00001114  3239 00001D66            170      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000111A  82FC 0002                171      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000111E  23C1 00001D90            172      MOVE.L  D1,         HEALTH_Y     ; Enemy Y Position
00001124                           173  
00001124                           174  
00001124  45F9 00001D54            175      LEA    LEVELS,      A2
0000112A  13FC 0005 00001DA8       176      MOVE.B  #05,        LIVES
00001132  13FC 0002 00001DA9       177      MOVE.B  #02,        POINTS
0000113A  13FC 0000 00001D4D       178      MOVE.B  #00,        DRAW_HEALTHPACKS
00001142  13FC 0000 00001D4E       179      MOVE.B  #00,        SPAWN_HEALTHPACKS
0000114A  33FC 0140 00001DFA       180      MOVE.W  #320,       Z
00001152  33FC 0004 00001DFC       181      MOVE.W  #4,         SCALER   
0000115A  33FC FFB0 00001DFE       182      MOVE.W  #-80,       WIDTH     
00001162                           183  
00001162  4281                     184      CLR.L   D1
00001164                           185      ; load tree 
00001164  7032                     186      MOVE.L  #50,D0
00001166  4E4F                     187      TRAP    #15
00001168  43F9 00001E00            188      LEA     title,A1
0000116E  7033                     189      MOVE.L  #51,D0
00001170  4E4F                     190      TRAP    #15
00001172                           191      
00001172  43F9 00001E14            192      LEA     SPRITE_DATA,A1
00001178  243C 000007B6            193      MOVE.L  #1974,D2
0000117E  7035                     194      MOVE.L  #53,D0
00001180  4E4F                     195      TRAP #15
00001182                           196  
00001182                           197  
00001182                           198      ; Enable the screen back buffer(see easy 68k help)
00001182  103C 005C                199      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001186  123C 0011                200      MOVE.B  #17,        D1          ; Combine Tasks
0000118A  4E4F                     201      TRAP    #15                     ; Trap (Perform action)
0000118C                           202  
0000118C                           203      ; Clear the screen (see easy 68k help)
0000118C  103C 000B                204      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001190  323C FF00                205      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001194  4E4F                     206      TRAP    #15                     ; Trap (Perform action)
00001196                           207  
00001196                           208  
00001196                           209  *-----------------------------------------------------------
00001196                           210  * Subroutine    : Game
00001196                           211  * Description   : Game including main GameLoop. GameLoop is like
00001196                           212  * a while loop in that it runs forever until interupted
00001196                           213  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001196                           214  *-----------------------------------------------------------
00001196                           215  GAME:
00001196                           216     
00001196                           217  STARTSCREEN:
00001196                           218          
00001196  243C 01090000            219       MOVE.L     #$01090000,D2
0000119C  223C 00FFFFFF            220       MOVE.L     #$00FFFFFF,D1
000011A2  103C 0015                221       MOVE.B     #21,D0
000011A6  4E4F                     222       TRAP       #15
000011A8                           223       
000011A8  103C 000B                224       MOVE.B     #TC_CURSR_P,D0
000011AC                           225      
000011AC  43F9 00001D39            226       LEA        TITLEMSG,A1
000011B2  103C 000D                227       MOVE.B     #13,D0
000011B6  4E4F                     228       TRAP       #15
000011B8                           229       
000011B8  43F9 00001D28            230       LEA        PRESSSTART,A1
000011BE  103C 000D                231       MOVE.B     #13,D0
000011C2  4E4F                     232       TRAP       #15
000011C4                           233       
000011C4  103C 005E                234       MOVE.B     #94,D0
000011C8  4E4F                     235       TRAP       #15
000011CA                           236       
000011CA  103C 0004                237       MOVE.B     #04,D0
000011CE  4E4F                     238       TRAP       #15
000011D0                           239      
000011D0                           240  GAMELOOP:
000011D0                           241      ; Main Gameloop
000011D0                           242    ;  MOVE.L      #1,timer
000011D0                           243  ;DELAY:     
000011D0                           244   ;   SUBI.L      #1,timer            ; decrement timer by 1 to simulate a delay
000011D0                           245    ;  TST.L       timer            ; compare 0 to the value of timer
000011D0                           246     ; BNE         DELAY               ; branch back to DELAY if the previous compare was not equal
000011D0                           247  
000011D0  6100 0014                248      BSR     INPUT                   ; Check Keyboard Input
000011D4  6100 0072                249      BSR     UPDATE                  ; Update positions and points
000011D8  6100 0410                250      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000011DC  6100 0824                251      BSR     CHECK_COLLISIONS        ; Check for Collisions
000011E0  6100 01A6                252      BSR     DRAW                    ; Draw the Scene
000011E4                           253                  ; Loop back to GameLoop
000011E4  60EA                     254      BRA     GAMELOOP    
000011E6                           255      
000011E6                           256  *-----------------------------------------------------------
000011E6                           257  * Subroutine    : Input
000011E6                           258  * Description   : Process Keyboard Input
000011E6                           259  *-----------------------------------------------------------
000011E6                           260  INPUT:
000011E6                           261      ; Process Input
000011E6  4281                     262      CLR.L   D1                      ; Clear Data Register
000011E8  4282                     263      CLR.L   D2
000011EA  103C 0013                264      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000011EE  4E4F                     265      TRAP    #15                     ; Trap (Perform action)
000011F0  1401                     266      MOVE.B  D1,         D2          ; Move last key D1 to D2
000011F2  B43C 0000                267      CMP.B   #00,        D2          ; Key is pressed
000011F6  6700 000E                268      BEQ     PROCESS_INPUT           ; Process Key
000011FA  4E4F                     269      TRAP    #15                     ; Trap for Last Key
000011FC                           270      ; Check if key still pressed
000011FC  B23C 00FF                271      CMP.B   #$FF,       D1          ; Is it still pressed
00001200  6700 0004                272      BEQ     PROCESS_INPUT           ; Process Last Key
00001204  4E75                     273      RTS                             ; Return to subroutine
00001206                           274  
00001206                           275  *-----------------------------------------------------------
00001206                           276  * Subroutine    : Process Input
00001206                           277  * Description   : Branch based on keys pressed
00001206                           278  *-----------------------------------------------------------
00001206                           279  PROCESS_INPUT:
00001206  23C2 00001D68            280      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
0000120C  0CB9 0000001B 00001D68   281      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
00001216  6700 0A7A                282      BEQ     EXIT                    ; Exit if Escape
0000121A  0CB9 00000020 00001D68   283      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
00001224  6700 0418                284      BEQ     JUMP                    ; Jump
00001228  4A39 00001DA8            285      TST.B   LIVES
0000122E  6700 0008                286      BEQ     PROCESS_RESTART
00001232  6000 042E                287      BRA     IDLE                    ; Or Idle
00001236  4E75                     288      RTS                             ; Return to subroutine
00001238                           289  
00001238                           290  PROCESS_RESTART:
00001238  0CB9 00000052 00001D68   291      CMP.L   #R,  CURRENT_KEY ; Is Current Key R
00001242  6700 FDBC                292      BEQ     INITIALISE
00001246  4E75                     293      RTS                             ; Return to subroutine
00001248                           294  *-----------------------------------------------------------
00001248                           295  * Subroutine    : Update
00001248                           296  * Description   : Main update loop update Player and Enemies
00001248                           297  *-----------------------------------------------------------
00001248                           298  UPDATE:
00001248                           299      ; Update the Players Positon based on Velocity and Gravity
00001248  4281                     300      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000124A  2239 00001D78            301      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
00001250  2439 00001D7C            302      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00001256  D282                     303      ADD.L   D2,         D1          ; Add Gravity to Velocity
00001258  23C1 00001D78            304      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
0000125E  D2B9 00001D70            305      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001264  23C1 00001D70            306      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
0000126A                           307  
0000126A                           308      ; Move the Enemy
0000126A  4281                     309      CLR.L   D1                      ; Clear the contents of D0
0000126C  2239 00001D84            310      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
00001272  B2BC 00000000            311      CMP.L   #00,        D1
00001278  6F00 00D4                312      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
0000127C  6100 0058                313      BSR     MOVE_ENEMY              ; Move the Enemy
00001280                           314  
00001280                           315      ; Move flying enemy
00001280  4281                     316      CLR.L   D1                      ; Clear the contents of D0
00001282  2239 00001D94            317      MOVE.L  FLYINGENEMY_X,    D1          ; Move the Enemy X Position to D0
00001288  B2BC 00000000            318      CMP.L   #00,        D1
0000128E  6F00 00CE                319      BLE     RESET_FLYENEMY_POSITION    ; Reset Enemy if off Screen
00001292                           320  
00001292  0CB9 00000000 00001D8C   321      CMP.L   #00,        HEALTH_X
0000129C  6F00 00D0                322      BLE     RESET_HEALTH_POSITION
000012A0  6100 002C                323      BSR     MOVE_HEALTHPACK
000012A4                           324  
000012A4  B381                     325      EOR.L   D1,D1
000012A6  3239 00001DFE            326      MOVE.W  WIDTH,D1
000012AC  B279 00001DFA            327      CMP.W   Z,D1
000012B2  6C00 0008                328      BGE     RESET_TREE
000012B6  6100 000E                329      BSR     MOVE_TREE
000012BA  4E75                     330      RTS                             ; Return to subroutine  
000012BC                           331  
000012BC                           332      
000012BC                           333  
000012BC                           334  RESET_TREE:
000012BC  33FC 0280 00001DFA       335      MOVE.W  #640,Z
000012C4  4E75                     336      RTS
000012C6                           337  
000012C6                           338  MOVE_TREE:
000012C6  5379 00001DFA            339      SUB.W  #01,Z
000012CC  4E75                     340      RTS
000012CE                           341  
000012CE                           342  MOVE_HEALTHPACK:
000012CE  55B9 00001D8C            343      SUB.L   #02,        HEALTH_X
000012D4  4E75                     344      RTS
000012D6                           345  
000012D6                           346  *-----------------------------------------------------------
000012D6                           347  * Subroutine    : Move Enemy
000012D6                           348  * Description   : Move Enemy Right to Left
000012D6                           349  *-----------------------------------------------------------
000012D6                           350  MOVE_ENEMY:
000012D6  45F9 00001D54            351      LEA     LEVELS,      A2
000012DC  2A39 00001D74            352      MOVE.L  PLAYER_SCORE,   D5
000012E2  2C1A                     353      MOVE.L  (A2)+,       D6
000012E4  BA86                     354      CMP.L   D6,   D5
000012E6  6E00 004C                355      BGT     MOVE_ENEMY_L4
000012EA  2C1A                     356      MOVE.L  (A2)+,       D6
000012EC  BA86                     357      CMP.L   D6,   D5
000012EE  6E00 002E                358      BGT     MOVE_ENEMY_L3
000012F2  2C1A                     359      MOVE.L  (A2)+,       D6
000012F4  BA86                     360      CMP.L   D6,   D5
000012F6  6E00 0010                361      BGT     MOVE_ENEMY_L2
000012FA  57B9 00001D94            362      SUB.L   #03,        FLYINGENEMY_X
00001300  55B9 00001D84            363      SUB.L   #02,        ENEMY_X     ; Move enemy by X Value
00001306  4E75                     364      RTS
00001308                           365  
00001308                           366  MOVE_ENEMY_L2:
00001308  57B9 00001D94            367      SUB.L   #03,        FLYINGENEMY_X
0000130E  59B9 00001D84            368      SUB.L   #04,        ENEMY_X     ; Move enemy by X Value
00001314  13FC 0003 00001DA9       369      MOVE.B  #03,        POINTS
0000131C  4E75                     370      RTS
0000131E                           371  
0000131E                           372  MOVE_ENEMY_L3:
0000131E  5FB9 00001D94            373      SUB.L   #07,        FLYINGENEMY_X
00001324  5BB9 00001D84            374      SUB.L   #05,        ENEMY_X     ; Move enemy by X Value
0000132A  13FC 0005 00001DA9       375      MOVE.B  #05,        POINTS
00001332  4E75                     376      RTS
00001334                           377  
00001334                           378  MOVE_ENEMY_L4:
00001334  04B9 0000000A 00001D94   379      SUB.L   #10,        FLYINGENEMY_X
0000133E  51B9 00001D84            380      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
00001344  13FC 000A 00001DA9       381      MOVE.B  #10,        POINTS
0000134C  4E75                     382      RTS
0000134E                           383  *-----------------------------------------------------------
0000134E                           384  * Subroutine    : Reset Enemy
0000134E                           385  * Description   : Reset Enemy if to passes 0 to Right of Screen
0000134E                           386  *-----------------------------------------------------------
0000134E                           387  RESET_ENEMY_POSITION:
0000134E  4281                     388      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001350  3239 00001D64            389      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001356  23C1 00001D84            390      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000135C  4E75                     391      RTS
0000135E                           392  
0000135E                           393  RESET_FLYENEMY_POSITION:
0000135E  4281                     394      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001360  3239 00001D64            395      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001366  23C1 00001D94            396      MOVE.L  D1,         FLYINGENEMY_X     ; FLY Enemy X Position
0000136C  4E75                     397      RTS
0000136E                           398      
0000136E                           399  RESET_HEALTH_POSITION:
0000136E  13FC 0001 00001D4D       400      MOVE.B  #01,        DRAW_HEALTHPACKS
00001376  4281                     401      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001378  3239 00001D64            402      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000137E  23C1 00001D8C            403      MOVE.L  D1,         HEALTH_X     ; healthpack X Position
00001384  4E75                     404      RTS
00001386                           405  
00001386                           406  CONTINUE:
00001386  4E75                     407      RTS
00001388                           408  *-----------------------------------------------------------
00001388                           409  * Subroutine    : Draw
00001388                           410  * Description   : Draw Screen
00001388                           411  *-----------------------------------------------------------
00001388                           412  DRAW: 
00001388                           413      ; Enable back buffer
00001388  103C 005E                414      MOVE.B  #TC_REDRAW,        D0
0000138C  4E4F                     415      TRAP    #15
0000138E                           416  
0000138E                           417      ; Clear the screen
0000138E  103C 000B                418      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001392  323C FF00                419      MOVE.W  #$FF00,     D1          ; Clear contents
00001396  4E4F                     420      TRAP    #15                     ; Trap (Perform action)
00001398                           421  
00001398  6100 001C                422      BSR     DRAW_BACKGROUND         
0000139C  6100 00C4                423      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000013A0  6100 0358                424      BSR     DRAW_PLAYER             ; Draw Player
000013A4  6100 0390                425      BSR     DRAW_ENEMY              ; Draw Enemy
000013A8  6100 03D0                426      BSR     DRAW_FLYENEMY
000013AC  6100 0410                427      BSR     DRAW_HEALTHPACK
000013B0  6100 048E                428      BSR     DRAW_FLOOR              ; Draw Floor
000013B4  4E75                     429      RTS                             ; Return to subroutine
000013B6                           430  
000013B6                           431  
000013B6                           432  DRAW_BACKGROUND:
000013B6  4281                     433      CLR.L       D1
000013B8  223C 00FFE2B0            434      MOVE.L      #SKY,D1
000013BE  103C 0051                435      MOVE.B      #81,D0
000013C2  4E4F                     436      TRAP        #15
000013C4                           437  
000013C4  7200                     438      MOVE.L      #00, D1
000013C6  7400                     439      MOVE.L      #00, D2
000013C8  103C 0059                440      MOVE.B      #89, D0
000013CC  4E4F                     441      TRAP        #15
000013CE                           442      
000013CE                           443      ; Tree
000013CE  49F9 00001E14            444      LEA SPRITE_DATA, A4   ; Load address of sprite data
000013D4                           445      
000013D4  4BF9 00001DF6            446      LEA     X,A5
000013DA  4DF9 00001DF8            447      LEA     Y,A6
000013E0  3AB9 00001DFA            448      MOVE.W  Z, (A5)
000013E6  3CBC 00F0                449      MOVE.W  #240,(A6)
000013EA                           450      
000013EA                           451     * MOVE.L  #50,D0
000013EA                           452     * TRAP    #15
000013EA                           453      
000013EA  D9FC 00000033            454      ADDA.L      #$33,A4
000013F0                           455  
000013F0                           456  DRAW_SPRITE:
000013F0  3A3C 0000                457      MOVE.W #0, D5         ; Row counter
000013F4                           458      
000013F4                           459  ROW_LOOP:
000013F4  3E3C 0000                460      MOVE.W #0, D7         ; Column counter
000013F8                           461  
000013F8                           462  COL_LOOP:
000013F8                           463  
000013F8  BD86                     464      EOR.L       d6,d6               * clear the longword
000013FA  1C1C                     465      MOVE.b  (a4)+,d6            * get the blue byte
000013FC  4846                     466      SWAP        d6              * move it to the high word
000013FE  1C1C                     467      MOVE.b  (a4)+,d6            * get the green byte
00001400  E15E                     468      ROL.w       #8,d6               * move it to the high byte
00001402  1C1C                     469      MOVE.b  (a4)+,d6            * get the red byte
00001404                           470  
00001404                           471      
00001404  BCBC 00000000            472      CMP.L #0, D6           ; Test bit in the byte
0000140A  6700 0026                473      BEQ SKIP_PIXEL        ; If 0, skip drawing pixel
0000140E                           474  
0000140E  2206                     475      MOVE.L  D6, D1
00001410  7050                     476      MOVE.L  #80,D0
00001412  4E4F                     477      TRAP #15
00001414                           478      
00001414  7051                     479      MOVE.L  #81,D0
00001416  4E4F                     480      TRAP #15
00001418                           481  
00001418  4281                     482      CLR.L   D1
0000141A  3215                     483      MOVE.W (A5), D1         ; X position
0000141C  3416                     484      MOVE.W (A6), D2         ; Y position
0000141E  3615                     485      MOVE.W (A5), D3         ; X position
00001420  D679 00001DFC            486      ADD.W  SCALER ,D3
00001426  3816                     487      MOVE.W (A6), D4         ; Y position
00001428  9879 00001DFC            488      SUB.W  SCALER ,D4
0000142E                           489      
0000142E  7057                     490      MOVE.L  #87,D0
00001430  4E4F                     491      TRAP #15              ; Plot pixel using TRAP #15
00001432                           492  
00001432                           493  SKIP_PIXEL:
00001432  3439 00001DFC            494      MOVE.W SCALER,D2
00001438  D555                     495      ADD.W D2, (A5)         ; Move to the next pixel column
0000143A  5247                     496      ADDQ.W #1, D7
0000143C  5845                     497      ADDQ.W #4, D5
0000143E  BE7C 0010                498      CMP.W #ROWC, D7
00001442  6DB4                     499      BLT COL_LOOP          ; Continue to draw row
00001444                           500  
00001444  3602                     501      MOVE.W  D2,D3
00001446  C6FC 0010                502      MULU.W  #ROWC,D3
0000144A  33C3 00001DFE            503      MOVE.W  D3,WIDTH
00001450  4479 00001DFE            504      NEG.W   WIDTH
00001456                           505      
00001456  9755                     506      SUB.W D3, (A5)         ; Reset X position for the next row
00001458  9556                     507      SUB.W D2, (A6)         ; Move down to the next row
0000145A                           508    
0000145A  BA7C 0960                509      CMP.W #2400, D5
0000145E  6D94                     510      BLT ROW_LOOP          ; Continue to the next row
00001460                           511  
00001460                           512  END_LOOP:
00001460                           513         
00001460                           514  
00001460  4E75                     515      RTS
00001462                           516  *-----------------------------------------------------------
00001462                           517  * Subroutine    : Draw Player Data
00001462                           518  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
00001462                           519  *-----------------------------------------------------------
00001462                           520  DRAW_PLYR_DATA:
00001462  B381                     521      EOR.L   D1,D1                      ; Clear contents of D1 (XOR is faster)
00001464  B582                     522      EOR.L    D2,D2
00001466                           523  
00001466                           524  
00001466  7200                     525      MOVE.L  #BLACK,     D1
00001468  103C 0015                526      MOVE.B  #21,        D0          ; Set Text Color
0000146C  4E4F                     527      TRAP    #15                     ; Trap (Perform action)
0000146E                           528  
0000146E  223C 00FFE2B0            529      MOVE.L  #SKY,       D1          ; Set Text Color
00001474  7051                     530      MOVE.L  #81,        D0          ; Set Text Color
00001476  4E4F                     531      TRAP    #15                     ; Trap (Perform action)
00001478                           532  
00001478                           533      ; Player Score Message
00001478  103C 000B                534      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000147C  323C 0201                535      MOVE.W  #$0201,     D1          ; Col 02, Row 01
00001480  4E4F                     536      TRAP    #15                     ; Trap (Perform action)
00001482  43F9 00001CAC            537      LEA     SCORE_MSG,  A1          ; Score Message
00001488  303C 000D                538      MOVE    #13,        D0          ; No Line feed
0000148C  4E4F                     539      TRAP    #15                     ; Trap (Perform action)
0000148E                           540  
0000148E                           541      ; Player Score Value
0000148E  103C 000B                542      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001492  323C 0901                543      MOVE.W  #$0901,     D1          ; Col 09, Row 01
00001496  4E4F                     544      TRAP    #15                     ; Trap (Perform action)
00001498  103C 0003                545      MOVE.B  #03,        D0          ; Display number at D1.L
0000149C  2239 00001D74            546      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000014A2  4E4F                     547      TRAP    #15                     ; Trap (Perform action)
000014A4                           548      
000014A4                           549      ; Player X Message
000014A4  103C 000B                550      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014A8  323C 0202                551      MOVE.W  #$0202,     D1          ; Col 02, Row 02
000014AC  4E4F                     552      TRAP    #15                     ; Trap (Perform action)
000014AE  43F9 00001CE6            553      LEA     X_MSG,      A1          ; X Message
000014B4  303C 000D                554      MOVE    #13,        D0          ; No Line feed
000014B8  4E4F                     555      TRAP    #15                     ; Trap (Perform action)
000014BA                           556      
000014BA                           557      ; Player X
000014BA  103C 000B                558      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
000014BE  323C 0502                559      MOVE.W  #$0502,     D1          ; Col 05, Row 02
000014C2  4E4F                     560      TRAP    #15                     ; Trap (Perform action)
000014C4  103C 0003                561      MOVE.B  #03,        D0          ; Display number at D1.L
000014C8  2239 00001D8C            562      MOVE.L  HEALTH_X,   D1          ; Move X to D1.L
000014CE  4E4F                     563      TRAP    #15                     ; Trap (Perform action)
000014D0                           564      
000014D0                           565      ; Player Y Message
000014D0  103C 000B                566      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014D4  323C 1002                567      MOVE.W  #$1002,     D1          ; Col 10, Row 02
000014D8  4E4F                     568      TRAP    #15                     ; Trap (Perform action)
000014DA  43F9 00001CE9            569      LEA     Y_MSG,      A1          ; Y Message
000014E0  303C 000D                570      MOVE    #13,        D0          ; No Line feed
000014E4  4E4F                     571      TRAP    #15                     ; Trap (Perform action)
000014E6                           572      
000014E6                           573      ; Player Y
000014E6  103C 000B                574      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014EA  323C 1202                575      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000014EE  4E4F                     576      TRAP    #15                     ; Trap (Perform action)
000014F0  103C 0003                577      MOVE.B  #03,        D0          ; Display number at D1.L
000014F4  2239 00001D98            578      MOVE.L  FLYINGENEMY_Y,   D1          ; Move X to D1.L
000014FA  4E4F                     579      TRAP    #15                     ; Trap (Perform action) 
000014FC                           580  
000014FC                           581      ; Player Velocity Message
000014FC  103C 000B                582      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001500  323C 0203                583      MOVE.W  #$0203,     D1          ; Col 02, Row 03
00001504  4E4F                     584      TRAP    #15                     ; Trap (Perform action)
00001506  43F9 00001CEC            585      LEA     V_MSG,      A1          ; Velocity Message
0000150C  303C 000D                586      MOVE    #13,        D0          ; No Line feed
00001510  4E4F                     587      TRAP    #15                     ; Trap (Perform action)
00001512                           588      
00001512                           589      ; Player Velocity
00001512  103C 000B                590      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001516  323C 0503                591      MOVE.W  #$0503,     D1          ; Col 05, Row 03
0000151A  4E4F                     592      TRAP    #15                     ; Trap (Perform action)
0000151C  103C 0003                593      MOVE.B  #03,        D0          ; Display number at D1.L
00001520  2239 00001D78            594      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
00001526  4E4F                     595      TRAP    #15                     ; Trap (Perform action)
00001528                           596      
00001528                           597      ; Player Gravity Message
00001528  103C 000B                598      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000152C  323C 1003                599      MOVE.W  #$1003,     D1          ; Col 10, Row 03
00001530  4E4F                     600      TRAP    #15                     ; Trap (Perform action)
00001532  43F9 00001CEF            601      LEA     VARMSG,      A1          ; G Message
00001538  303C 000D                602      MOVE    #13,        D0          ; No Line feed
0000153C  4E4F                     603      TRAP    #15                     ; Trap (Perform action)
0000153E                           604      
0000153E                           605      ; Player Gravity
0000153E  103C 000B                606      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001542  323C 1903                607      MOVE.W  #$1903,     D1          ; Col 12, Row 03
00001546  4E4F                     608      TRAP    #15                     ; Trap (Perform action)
00001548  103C 0003                609      MOVE.B  #03,        D0          ; Display number at D1.L
0000154C  4281                     610      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000154E  1239 00001D4D            611      MOVE.B  DRAW_HEALTHPACKS,D1         ; Move Gravity to D1.L
00001554  4E4F                     612      TRAP    #15                     ; Trap (Perform action)
00001556                           613  
00001556                           614      ; Player On Ground Message
00001556  103C 000B                615      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000155A  323C 0204                616      MOVE.W  #$0204,     D1          ; Col 10, Row 03
0000155E  4E4F                     617      TRAP    #15                     ; Trap (Perform action)
00001560  43F9 00001CF4            618      LEA     GND_MSG,    A1          ; On Ground Message
00001566  303C 000D                619      MOVE    #13,        D0          ; No Line feed
0000156A  4E4F                     620      TRAP    #15                     ; Trap (Perform action)
0000156C                           621      
0000156C  6100 0464                622      BSR     RANDOM_NUMBER
00001570  23C1 00001DA4            623      MOVE.L  D1,         RANDOM      ; Move Random Number to Memory
00001576                           624      ; Player On Ground
00001576  103C 000B                625      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000157A  323C 0604                626      MOVE.W  #$0604,     D1          ; Col 06, Row 04
0000157E  4E4F                     627      TRAP    #15                     ; Trap (Perform action)
00001580  103C 0003                628      MOVE.B  #03,        D0          ; Display number at D1.L
00001584  4281                     629      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001586  1239 00001D4E            630      MOVE.B  SPAWN_HEALTHPACKS,     D1          ; Move Play on Ground ? to D1.L
0000158C  4E4F                     631      TRAP    #15                     ; Trap (Perform action)
0000158E                           632  
0000158E                           633      ; Show Keys Pressed
0000158E  103C 000B                634      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001592  323C 2001                635      MOVE.W  #$2001,     D1          ; Col 20, Row 1
00001596  4E4F                     636      TRAP    #15                     ; Trap (Perform action)
00001598  43F9 00001CB5            637      LEA     KEYCODE_MSG, A1         ; Keycode
0000159E  303C 000D                638      MOVE    #13,        D0          ; No Line feed
000015A2  4E4F                     639      TRAP    #15                     ; Trap (Perform action)
000015A4                           640  
000015A4                           641      ; Show KeyCode
000015A4  103C 000B                642      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000015A8  323C 3001                643      MOVE.W  #$3001,     D1          ; Col 30, Row 1
000015AC  4E4F                     644      TRAP    #15                     ; Trap (Perform action)    
000015AE  2239 00001D68            645      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
000015B4  103C 0003                646      MOVE.B  #03,        D0          ; Display the contents of D1
000015B8  4E4F                     647      TRAP    #15                     ; Trap (Perform action)
000015BA                           648  
000015BA                           649      ; Show Lives msg
000015BA  103C 000B                650      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000015BE  323C 0207                651      MOVE.W  #$0207,     D1          ; Col 02, Row 06
000015C2  4E4F                     652      TRAP    #15                     ; Trap (Perform action)
000015C4  43F9 00001D42            653      LEA     LIVES_MSG,   A1          ; Draw
000015CA  303C 000D                654      MOVE    #13,        D0          ; No Line feed
000015CE  4E4F                     655      TRAP    #15                     ; Trap (Perform action)  
000015D0                           656      
000015D0                           657      ; Show Lives msg
000015D0  103C 000B                658      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000015D4  323C 0A07                659      MOVE.W  #$0A07,     D1          ; Col 30, Row 1
000015D8  4E4F                     660      TRAP    #15                     ; Trap (Perform action)   
000015DA  4241                     661      CLR     D1
000015DC  1239 00001DA8            662      MOVE.B  LIVES,      D1          ; Move Key Pressed to D1
000015E2  103C 0003                663      MOVE.B  #03,        D0          ; Display the contents of D1
000015E6  4E4F                     664      TRAP    #15                     ; Trap (Perform action)
000015E8                           665  
000015E8  4E75                     666      RTS
000015EA                           667  *-----------------------------------------------------------
000015EA                           668  * Subroutine    : Player is on Ground
000015EA                           669  * Description   : Check if the Player is on or off Ground
000015EA                           670  *-----------------------------------------------------------
000015EA                           671  IS_PLAYER_ON_GND:
000015EA                           672      ; Check if Player is on Ground
000015EA  4281                     673      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000015EC  4282                     674      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
000015EE  3239 00001D66            675      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1  
000015F4  82FC 0002                676      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000015F8  2439 00001D70            677      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
000015FE  B441                     678      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001600  6C00 0008                679      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001604  6D00 002C                680      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00001608  4E75                     681      RTS                             ; Return to subroutine
0000160A                           682  
0000160A                           683  
0000160A                           684  *-----------------------------------------------------------
0000160A                           685  * Subroutine    : On Ground
0000160A                           686  * Description   : Set the Player On Ground
0000160A                           687  *-----------------------------------------------------------
0000160A                           688  SET_ON_GROUND:
0000160A  4281                     689      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000160C  3239 00001D66            690      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001612  82FC 0002                691      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001616  23C1 00001D70            692      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
0000161C  4281                     693      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000161E  7200                     694      MOVE.L  #00,        D1          ; Player Velocity
00001620  23C1 00001D78            695      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
00001626  23FC 00000001 00001D80   696      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001630  4E75                     697      RTS
00001632                           698  
00001632                           699  *-----------------------------------------------------------
00001632                           700  * Subroutine    : Off Ground
00001632                           701  * Description   : Set the Player Off Ground
00001632                           702  *-----------------------------------------------------------
00001632                           703  SET_OFF_GROUND:
00001632  23FC 00000000 00001D80   704      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
0000163C  4E75                     705      RTS                             ; Return to subroutine
0000163E                           706  *-----------------------------------------------------------
0000163E                           707  * Subroutine    : Jump
0000163E                           708  * Description   : Perform a Jump
0000163E                           709  *-----------------------------------------------------------
0000163E                           710  JUMP:
0000163E  0CB9 00000001 00001D80   711      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
00001648  6700 0006                712      BEQ     PERFORM_JUMP            ; Do Jump
0000164C  6000 0012                713      BRA     JUMP_DONE               ;
00001650                           714  PERFORM_JUMP:
00001650  6100 0042                715      BSR     PLAY_JUMP               ; Play jump sound
00001654  23FC FFFFFFED 00001D78   716      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
0000165E  4E75                     717      RTS                             ; Return to subroutine
00001660                           718  JUMP_DONE:
00001660  4E75                     719      RTS                             ; Return to subroutine
00001662                           720  
00001662                           721  *-----------------------------------------------------------
00001662                           722  * Subroutine    : Idle
00001662                           723  * Description   : Perform a Idle
00001662                           724  *----------------------------------------------------------- 
00001662                           725  IDLE:
00001662  4E75                     726      RTS                             ; Return to subroutine
00001664                           727  
00001664                           728  *-----------------------------------------------------------
00001664                           729  * Subroutines   : Sound Load and Play
00001664                           730  * Description   : Initialise game sounds into memory 
00001664                           731  * Current Sounds are RUN, JUMP and Opps for Collision
00001664                           732  *-----------------------------------------------------------
00001664                           733  GAMEOVER_LOAD:
00001664  43F9 00001DC1            734      LEA     GAMEOVER_WAV,    A1          ; Load Wav File into A1
0000166A  323C 0000                735      MOVE    #GAMEOVER_INDEX, D1          ; Assign it INDEX
0000166E  303C 004A                736      MOVE    #74,        D0          ; Load into memory
00001672  4E4F                     737      TRAP    #15                     ; Trap (Perform action)
00001674  4E75                     738      RTS                             ; Return to subroutine
00001676                           739  
00001676                           740  PLAY_GAMEOVER:
00001676  323C 0000                741      MOVE    #GAMEOVER_INDEX, D1          ; Load Sound INDEX
0000167A  303C 004B                742      MOVE    #75,        D0          ; Play Sound
0000167E  4E4F                     743      TRAP    #15                     ; Trap (Perform action)
00001680  4E75                     744      RTS                             ; Return to subroutine
00001682                           745  
00001682                           746  JUMP_LOAD:
00001682  43F9 00001DB8            747      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
00001688  323C 0001                748      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
0000168C  303C 004A                749      MOVE    #74,        D0          ; Load into memory
00001690  4E4F                     750      TRAP    #15                     ; Trap (Perform action)
00001692  4E75                     751      RTS                             ; Return to subroutine
00001694                           752  
00001694                           753  PLAY_JUMP:
00001694  323C 0001                754      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
00001698  303C 004B                755      MOVE    #75,        D0          ; Play Sound
0000169C  4E4F                     756      TRAP    #15                     ; Trap (Perform action)
0000169E  4E75                     757      RTS                             ; Return to subroutine
000016A0                           758  
000016A0                           759  HITHURT_LOAD:
000016A0  43F9 00001DCE            760      LEA     HITHURT_WAV,   A1          ; Load Wav File into A1
000016A6  323C 0002                761      MOVE    #HITHURT_INDEX,D1          ; Assign it INDEX
000016AA  303C 004A                762      MOVE    #74,        D0          ; Load into memory
000016AE  4E4F                     763      TRAP    #15                     ; Trap (Perform action)
000016B0  4E75                     764      RTS                             ; Return to subroutine
000016B2                           765  
000016B2                           766  PLAY_HITHURT:
000016B2  323C 0002                767      MOVE    #HITHURT_INDEX,D1          ; Load Sound INDEX
000016B6  303C 004B                768      MOVE    #75,        D0          ; Play Sound
000016BA  4E4F                     769      TRAP    #15                     ; Trap (Perform action)
000016BC  4E75                     770      RTS                             ; Return to subroutine
000016BE                           771  
000016BE                           772  POWERUP_LOAD:
000016BE  43F9 00001DDA            773      LEA     POWERUP_WAV,   A1          ; Load Wav File into A1
000016C4  323C 0003                774      MOVE    #POWERUP_INDEX,D1          ; Assign it INDEX
000016C8  303C 004A                775      MOVE    #74,        D0          ; Load into memory
000016CC  4E4F                     776      TRAP    #15                     ; Trap (Perform action)
000016CE  4E75                     777      RTS                             ; Return to subroutine
000016D0                           778  
000016D0                           779  PLAY_POWERUP:
000016D0  323C 0003                780      MOVE    #POWERUP_INDEX,D1          ; Load Sound INDEX
000016D4  303C 004B                781      MOVE    #75,        D0          ; Play Sound
000016D8  4E4F                     782      TRAP    #15                     ; Trap (Perform action)
000016DA  4E75                     783      RTS                             ; Return to subroutine
000016DC                           784  
000016DC                           785  LVLCHANGE_LOAD:
000016DC  43F9 00001DE6            786      LEA     LEVELCHANGE_WAV,   A1          ; Load Wav File into A1
000016E2  323C 0004                787      MOVE    #LEVELCHANGE_INDEX,D1          ; Assign it INDEX
000016E6  303C 004A                788      MOVE    #74,        D0          ; Load into memory
000016EA  4E4F                     789      TRAP    #15                     ; Trap (Perform action)
000016EC  4E75                     790      RTS                             ; Return to subroutine
000016EE                           791  
000016EE                           792  PLAY_LVLCHANGE:
000016EE  323C 0004                793      MOVE    #LEVELCHANGE_INDEX,D1          ; Load Sound INDEX
000016F2  303C 004B                794      MOVE    #75,        D0          ; Play Sound
000016F6  4E4F                     795      TRAP    #15                     ; Trap (Perform action)
000016F8  4E75                     796      RTS                             ; Return to subroutine
000016FA                           797  
000016FA                           798  *-----------------------------------------------------------
000016FA                           799  * Subroutine    : Draw Player
000016FA                           800  * Description   : Draw Player Square
000016FA                           801  *-----------------------------------------------------------
000016FA                           802  DRAW_PLAYER:
000016FA                           803      ; Set Pixel Colors
000016FA  7200                     804      MOVE.L  #BLACK,     D1          ; Set Background color
000016FC  103C 0050                805      MOVE.B  #80,        D0          ; Task for Background Color
00001700  4E4F                     806      TRAP    #15                     ; Trap (Perform action)
00001702                           807      ; Reset Pixel Colors
00001702  7200                     808      MOVE.L  #BLACK,     D1          ; Set Background color
00001704  103C 0051                809      MOVE.B  #81,        D0          ; Task for Background Color
00001708  4E4F                     810      TRAP    #15                     ; Trap (Perform action)
0000170A                           811  
0000170A                           812      ; Set X, Y, Width and Height
0000170A  2239 00001D6C            813      MOVE.L  PLAYER_X,   D1          ; X
00001710  2439 00001D70            814      MOVE.L  PLAYER_Y,   D2
00001716                           815      
00001716  2639 00001D6C            816      MOVE.L  PLAYER_X,   D3
0000171C  D639 00001DAE            817      ADD.B   PLAYER_WIDTH,   D3      ; Width
00001722  2839 00001D70            818      MOVE.L  PLAYER_Y,   D4 
00001728  9839 00001DAF            819      SUB.B   PLAYER_HEIGHT,   D4      ; Height          ; Y
0000172E                           820      
0000172E                           821      
0000172E                           822      ; Draw Player
0000172E  103C 0057                823      MOVE.B  #87,        D0          ; Draw Player
00001732  4E4F                     824      TRAP    #15                     ; Trap (Perform action)
00001734  4E75                     825      RTS                             ; Return to subroutine
00001736                           826  
00001736                           827  *-----------------------------------------------------------
00001736                           828  * Subroutine    : Draw Enemy
00001736                           829  * Description   : Draw Enemy Square
00001736                           830  *-----------------------------------------------------------
00001736                           831  DRAW_ENEMY:
00001736                           832      ; Set Pixel Colors
00001736  2239 00001D9C            833      MOVE.L  ENEMYCOLOR,       D1          ; Set Background color
0000173C  103C 0050                834      MOVE.B  #80,        D0          ; Task for Background Color
00001740  4E4F                     835      TRAP    #15                     ; Trap (Perform action)
00001742                           836  
00001742                           837      ; Reset Pixel Colors
00001742  2239 00001D9C            838      MOVE.L  ENEMYCOLOR,     D1          ; Set Background color
00001748  103C 0051                839      MOVE.B  #81,        D0          ; Task for Background Color
0000174C  4E4F                     840      TRAP    #15                     ; Trap (Perform action)
0000174E                           841  
0000174E                           842      ; Set X, Y, Width and Height
0000174E  2239 00001D84            843      MOVE.L  ENEMY_X,    D1          ; X
00001754  2439 00001D88            844      MOVE.L  ENEMY_Y,    D2          ; Y
0000175A  2639 00001D84            845      MOVE.L  ENEMY_X,    D3
00001760  D679 00001DB0            846      ADD.W   ENEMY_WIDTH,   D3      ; Width
00001766  2839 00001D88            847      MOVE.L  ENEMY_Y,    D4 
0000176C  9879 00001DB2            848      SUB.W   ENEMY_HEIGHT,   D4      ; Height
00001772                           849      
00001772                           850      ; Draw Enemy    
00001772  103C 0057                851      MOVE.B  #87,        D0          ; Draw Enemy
00001776  4E4F                     852      TRAP    #15                     ; Trap (Perform action)
00001778  4E75                     853      RTS                             ; Return to subroutine
0000177A                           854  
0000177A                           855  DRAW_FLYENEMY:
0000177A                           856      ; Set Pixel Colors
0000177A  2239 00001DA0            857      MOVE.L  FLYENEMYCOLOR,       D1          ; Set Background color
00001780  103C 0050                858      MOVE.B  #80,        D0          ; Task for Background Color
00001784  4E4F                     859      TRAP    #15                     ; Trap (Perform action)
00001786                           860  
00001786                           861      ; Reset Pixel Colors
00001786  2239 00001DA0            862      MOVE.L  FLYENEMYCOLOR,     D1          ; Set Background color
0000178C  103C 0051                863      MOVE.B  #81,        D0          ; Task for Background Color
00001790  4E4F                     864      TRAP    #15                     ; Trap (Perform action)
00001792                           865  
00001792                           866      ; Set X, Y, Width and Height
00001792  2239 00001D94            867      MOVE.L  FLYINGENEMY_X,    D1          ; X
00001798  2439 00001D98            868      MOVE.L  FLYINGENEMY_Y,    D2          ; Y
0000179E  2639 00001D94            869      MOVE.L  FLYINGENEMY_X,    D3
000017A4  D679 00001DB4            870      ADD.W   FLYENEMY_WIDTH,   D3      ; Width
000017AA  2839 00001D98            871      MOVE.L  FLYINGENEMY_Y,    D4 
000017B0  9879 00001DB6            872      SUB.W   FLYENEMY_HEIGHT,   D4      ; Height
000017B6                           873      
000017B6                           874      ; Draw Enemy    
000017B6  103C 0057                875      MOVE.B  #87,        D0          ; Draw Enemy
000017BA  4E4F                     876      TRAP    #15                     ; Trap (Perform action)
000017BC  4E75                     877      RTS  
000017BE                           878  
000017BE                           879  DRAW_HEALTHPACK:
000017BE                           880  
000017BE  0C39 0000 00001D4E       881      CMP.B   #00,     SPAWN_HEALTHPACKS
000017C6  6700 006C                882      BEQ     DRAW_HEALTHPACK_DONE
000017CA  0C39 0000 00001D4D       883      CMP.B   #00,     DRAW_HEALTHPACKS
000017D2  6700 0060                884      BEQ     DRAW_HEALTHPACK_DONE
000017D6                           885      
000017D6                           886      ;BSR     RANDOM_NUMBER
000017D6                           887      ;CMP.L   #$80,  D1
000017D6                           888      ;BGT     DRAW_HEALTHPACK_DONE
000017D6                           889  
000017D6  13FC 0001 00001D4D       890      MOVE.B  #01,        DRAW_HEALTHPACKS
000017DE  3239 00001D66            891      MOVE.W  SCREEN_H,     D1
000017E4  82FC 0002                892      DIVU.W    #02,        D1
000017E8  C2BC 0000FFFF            893      AND.L   #$0000FFFF,   D1
000017EE  23C1 00001D90            894      MOVE.L  D1,         HEALTH_Y
000017F4                           895      ; Set Pixel Colors
000017F4  7200                     896      MOVE.L  #BLACK,       D1          ; Set Background color
000017F6  103C 0050                897      MOVE.B  #80,        D0          ; Task for Background Color
000017FA  4E4F                     898      TRAP    #15                     ; Trap (Perform action)
000017FC                           899  
000017FC                           900      ; Reset Pixel Colors
000017FC  223C 0044FF44            901      MOVE.L  #LIFEGREEN,     D1          ; Set Background color
00001802  103C 0051                902      MOVE.B  #81,        D0          ; Task for Background Color
00001806  4E4F                     903      TRAP    #15                     ; Trap (Perform action)
00001808                           904  
00001808                           905      ; Set X, Y, Width and Height
00001808  2239 00001D8C            906      MOVE.L  HEALTH_X,    D1          ; X
0000180E  2439 00001D90            907      MOVE.L  HEALTH_Y,    D2          ; Y
00001814  2639 00001D8C            908      MOVE.L  HEALTH_X,    D3
0000181A  0683 0000000C            909      ADD.L   #HEALTH_PACK_W,   D3      ; Width
00001820  2839 00001D90            910      MOVE.L  HEALTH_Y,    D4 
00001826  0484 0000000C            911      SUB.L   #HEALTH_PACK_H,   D4      ; Height
0000182C                           912      
0000182C                           913      ; Draw Enemy    
0000182C  103C 0057                914      MOVE.B  #87,        D0          ; Draw Enemy
00001830  4E4F                     915      TRAP    #15                     ; Trap (Perform action)
00001832  4E75                     916      RTS                             ; Return to subroutine
00001834                           917  
00001834                           918  DRAW_HEALTHPACK_DONE:
00001834  23FC FFFFFFFF 00001D90   919      MOVE.L  #-1, HEALTH_Y
0000183E  4E75                     920      RTS
00001840                           921  
00001840                           922  DRAW_FLOOR:
00001840                           923      ; Set Pixel Colors
00001840  223C 00566D19            924      MOVE.L  #GREEN,     D1          ; Set Background color
00001846  103C 0050                925      MOVE.B  #80,        D0          ; Task for Background Color
0000184A  4E4F                     926      TRAP    #15                     ; Trap (Perform action)
0000184C                           927  
0000184C  223C 00566D19            928      MOVE.L  #GREEN,     D1
00001852  103C 0051                929      MOVE.B  #81,        D0
00001856  4E4F                     930      TRAP    #15
00001858                           931  
00001858                           932      
00001858                           933      ; Set X, Y, X2, and Y2
00001858  7200                     934      MOVE.L  #0,   D1          ; X
0000185A  243C 000000F0            935      MOVE.L  #240,   D2          ; Y
00001860  263C 00000280            936      MOVE.L  #640,   D3           
00001866  283C 000001E0            937      MOVE.L  #480,   D4 
0000186C                           938      
0000186C                           939      ; Draw grass
0000186C  103C 0057                940      MOVE.B  #87,        D0          ; Draw Line
00001870  4E4F                     941      TRAP    #15                     ; Trap (Perform action)
00001872                           942  
00001872                           943      ; Set Pixel Colors
00001872  223C 0019506D            944      MOVE.L  #BROWN,     D1          ; Set Background color
00001878  103C 0050                945      MOVE.B  #80,        D0          ; Task for Background Color
0000187C  4E4F                     946      TRAP    #15                     ; Trap (Perform action)
0000187E                           947  
0000187E  223C 0019506D            948      MOVE.L  #BROWN,     D1
00001884  103C 0051                949      MOVE.B  #81,        D0
00001888  4E4F                     950      TRAP    #15
0000188A                           951  
0000188A                           952  * -----------------------------------------------------------
0000188A                           953  * Find level and draw dirt
0000188A                           954  * -----------------------------------------------------------
0000188A  45F9 00001D54            955      LEA     LEVELS,      A2
00001890  2A39 00001D74            956      MOVE.L  PLAYER_SCORE,   D5
00001896  BA9A                     957      CMP.L   (A2)+,       D5
00001898  6E00 0018                958      BGT     DRAW_FLOOR_L5
0000189C  BA9A                     959      CMP.L   (A2)+,       D5
0000189E  6E00 004E                960      BGT     DRAW_FLOOR_L4
000018A2  BA9A                     961      CMP.L   (A2)+,       D5
000018A4  6E00 0084                962      BGT     DRAW_FLOOR_L3
000018A8  BA9A                     963      CMP.L   (A2)+,       D5
000018AA  6E00 00BA                964      BGT     DRAW_FLOOR_L2
000018AE  6000 00F2                965      BRA     DRAW_FLOOR_L1
000018B2                           966  
000018B2                           967  DRAW_FLOOR_L5:
000018B2  33FC 000C 00001DFC       968      MOVE.W  #12,SCALER
000018BA  243C 000001E0            969      MOVE.L  #480,   D2          ; Y
000018C0  23FC 00000087 00001D98   970      MOVE.L  #135, FLYINGENEMY_Y
000018CA  33FC 0028 00001DB6       971      MOVE.W  #40, FLYENEMY_HEIGHT
000018D2  33FC 0041 00001DB4       972      MOVE.W  #65, FLYENEMY_WIDTH
000018DA  33FC 0028 00001DB2       973      MOVE.W  #40, ENEMY_HEIGHT
000018E2  33FC 0028 00001DB0       974      MOVE.W  #40, ENEMY_WIDTH
000018EA  6000 00C0                975      BRA     DRAWDIRT
000018EE                           976      
000018EE                           977  DRAW_FLOOR_L4:
000018EE  33FC 000A 00001DFC       978      MOVE.W  #10,SCALER
000018F6  243C 000001E0            979      MOVE.L  #480,   D2          ; Y
000018FC  23FC 0000008C 00001D98   980      MOVE.L  #140, FLYINGENEMY_Y
00001906  33FC 002D 00001DB6       981      MOVE.W  #45, FLYENEMY_HEIGHT
0000190E  33FC 0037 00001DB4       982      MOVE.W  #55, FLYENEMY_WIDTH
00001916  33FC 001E 00001DB2       983      MOVE.W  #30, ENEMY_HEIGHT
0000191E  33FC 001E 00001DB0       984      MOVE.W  #30, ENEMY_WIDTH
00001926  6000 0084                985      BRA     DRAWDIRT
0000192A                           986  DRAW_FLOOR_L3:
0000192A  33FC 0008 00001DFC       987      MOVE.W  #8,SCALER
00001932  243C 000001AE            988      MOVE.L  #430,   D2          ; Y
00001938  23FC 000000A0 00001D98   989      MOVE.L  #160, FLYINGENEMY_Y
00001942  33FC 0019 00001DB6       990      MOVE.W  #25, FLYENEMY_HEIGHT
0000194A  33FC 0023 00001DB4       991      MOVE.W  #35, FLYENEMY_WIDTH
00001952  33FC 0019 00001DB2       992      MOVE.W  #25, ENEMY_HEIGHT
0000195A  33FC 0019 00001DB0       993      MOVE.W  #25, ENEMY_WIDTH
00001962  6000 0048                994      BRA     DRAWDIRT
00001966                           995  DRAW_FLOOR_L2:
00001966  33FC 0006 00001DFC       996      MOVE.W  #6,SCALER
0000196E  243C 0000014A            997      MOVE.L  #330,   D2          ; Y
00001974  23FC 000000AA 00001D98   998      MOVE.L  #170, FLYINGENEMY_Y
0000197E  33FC 000F 00001DB6       999      MOVE.W  #15, FLYENEMY_HEIGHT
00001986  33FC 0019 00001DB4      1000      MOVE.W  #25, FLYENEMY_WIDTH
0000198E  33FC 000F 00001DB2      1001      MOVE.W  #15, ENEMY_HEIGHT
00001996  33FC 000F 00001DB0      1002      MOVE.W  #15, ENEMY_WIDTH
0000199E                          1003  
0000199E  6000 000C               1004      BRA     DRAWDIRT
000019A2                          1005  DRAW_FLOOR_L1:
000019A2  243C 00000115           1006      MOVE.L  #277,   D2          ; Y
000019A8  6000 0002               1007      BRA     DRAWDIRT
000019AC                          1008  DRAWDIRT:
000019AC                          1009      ; Set X, Y, X2, and Y2
000019AC  7200                    1010      MOVE.L  #0,   D1          ; X
000019AE  263C 00000280           1011      MOVE.L  #640,   D3           
000019B4  283C 000001E0           1012      MOVE.L  #480,   D4 
000019BA                          1013      
000019BA                          1014      ; Draw Dirt
000019BA  103C 0057               1015      MOVE.B  #87,        D0          ; Draw Line
000019BE  4E4F                    1016      TRAP    #15                     ; Trap (Perform action)
000019C0                          1017  
000019C0                          1018  
000019C0                          1019      ; Reset Pixel Colors
000019C0  7200                    1020      MOVE.L  #$00000000,     D1          ; Set Background color
000019C2  103C 0050               1021      MOVE.B  #80,        D0          ; Task for Background Color
000019C6  4E4F                    1022      TRAP    #15                     ; Trap (Perform action)
000019C8                          1023  
000019C8                          1024      ; Reset Pixel Colors
000019C8  7200                    1025      MOVE.L  #$00000000,     D1          ; Set Background color
000019CA  103C 0051               1026      MOVE.B  #81,        D0          ; Task for Background Color
000019CE  4E4F                    1027      TRAP    #15                     ; Trap (Perform action)
000019D0                          1028  
000019D0  4E75                    1029      RTS                             ; Return to subroutine
000019D2                          1030  
000019D2                          1031  RANDOM_NUMBER:
000019D2  2039 00001DAA           1032      MOVE.L SEED, D0       ; Load the seed
000019D8  223C 0019660D           1033      MOVE.L #1664525, D1   ; Multiplier
000019DE  C0C1                    1034      MULU.W   D1, D0         ; Multiply (D0 = D0 * D1)
000019E0  0680 3C6EF35F           1035      ADD.L  #1013904223, D0 ; Add increment
000019E6  C0BC 7FFFFFFF           1036      AND.L  #$7FFFFFFF, D0 ; Ensure positive number
000019EC  23C0 00001DAA           1037      MOVE.L D0, SEED       ; Store new seed
000019F2                          1038  
000019F2                          1039      ; If you need a random number within a range (e.g., 0-99)
000019F2  80FC 0064               1040      DIVU.W   #100, D0       ; Divide by 100
000019F6  4840                    1041      SWAP   D0             ; Move remainder to lower word
000019F8  3200                    1042      MOVE.W D0, D1         ; D1 now holds the random number (0-99)
000019FA                          1043  
000019FA  C2BC 000000FF           1044      AND.L  #$000000FF, D1 ; Ensure only 8 bits are set
00001A00                          1045  
00001A00  4E75                    1046      RTS                   ; Return with D1 as the random number
00001A02                          1047  
00001A02                          1048  *-----------------------------------------------------------
00001A02                          1049  * Subroutine    : Collision Check
00001A02                          1050  * Description   : Axis-Aligned Bounding Box Collision Detection
00001A02                          1051  * Algorithm checks for overlap on the 4 sides of the Player and 
00001A02                          1052  * Enemy rectangles
00001A02                          1053  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001A02                          1054  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001A02                          1055  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001A02                          1056  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001A02                          1057  *-----------------------------------------------------------
00001A02                          1058  CHECK_COLLISIONS:
00001A02  4281                    1059      CLR.L   D1                      ; Clear D1
00001A04  4282                    1060      CLR.L   D2                      ; Clear D2
00001A06                          1061  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
00001A06  2239 00001D6C           1062      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001A0C  D239 00001DAE           1063      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00001A12  2439 00001D84           1064      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001A18  B481                    1065      CMP.L   D1,         D2          ; Do the Overlap ?
00001A1A  6F00 0006               1066      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001A1E  6000 004C               1067      BRA     CHECK_FLYENEMY_COLLISIONS
00001A22                          1068  
00001A22                          1069  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001A22  2239 00001D6C           1070      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001A28  2439 00001D84           1071      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001A2E  D479 00001DB0           1072      ADD.W   ENEMY_WIDTH,D2          ; Set Enemy width X + Width
00001A34  B481                    1073      CMP.L   D1,         D2          ; Do they OverLap ?
00001A36  6C00 0006               1074      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00001A3A  6000 0030               1075      BRA     CHECK_FLYENEMY_COLLISIONS  
00001A3E                          1076  
00001A3E                          1077  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00001A3E  2239 00001D70           1078      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001A44  2439 00001D88           1079      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00001A4A  D478 000C               1080      ADD.W   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001A4E  B481                    1081      CMP.L   D1,         D2          ; Do they Overlap ?
00001A50  6F00 0006               1082      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00001A54  6000 0016               1083      BRA     CHECK_FLYENEMY_COLLISIONS
00001A58                          1084  
00001A58                          1085  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001A58  D238 000C               1086      ADD.B   PLYR_H_INIT,D1          ; Add Player Height to D1
00001A5C  2439 00001D88           1087      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00001A62  B481                    1088      CMP.L   D1,         D2          ; Do they OverLap ?
00001A64  6C00 0104               1089      BGE     COLLISION               ; Collision !
00001A68  6000 0002               1090      BRA     CHECK_FLYENEMY_COLLISIONS
00001A6C                          1091  
00001A6C                          1092  *--------------------Checking for flying enemy collision---------------------
00001A6C                          1093  CHECK_FLYENEMY_COLLISIONS:
00001A6C  4281                    1094      CLR.L   D1                      ; Clear D1
00001A6E  4282                    1095      CLR.L   D2                      ; Clear D2
00001A70                          1096  PLX_LTE_TO_FLYENEMY_X_PLUS_W:
00001A70  2239 00001D6C           1097      MOVE.L  PLAYER_X,   D1
00001A76  D239 00001DAE           1098      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00001A7C  2439 00001D94           1099      MOVE.L  FLYINGENEMY_X,    D2                    ; Move Enemy X to D2
00001A82  B481                    1100      CMP.L   D1,         D2                          ; Do the Overlap ?
00001A84  6F00 0006               1101      BLE     PLX_PLUS_W_LTE_TO_FLYENEMY_X      ; Less than or Equal ?
00001A88  6000 0050               1102      BRA     CHECK_HEALTH_COLLISIONS    ; If not no collision
00001A8C                          1103  
00001A8C                          1104  PLX_PLUS_W_LTE_TO_FLYENEMY_X:           ; Check player is not  
00001A8C  2239 00001D6C           1105      MOVE.L  PLAYER_X,   D1
00001A92  2439 00001D94           1106      MOVE.L  FLYINGENEMY_X,    D2            ; Move Enemy X to D2
00001A98  D479 00001DB4           1107      ADD.W   FLYENEMY_WIDTH,  D2                    ; Set Enemy width X + Width
00001A9E  B481                    1108      CMP.L   D1,         D2                  ; Do they OverLap ?
00001AA0  6C00 0006               1109      BGE     PLY_LTE_TO_FLYENEMY_Y_PLUS_H  ; Less than or Equal
00001AA4  6000 0034               1110      BRA     CHECK_HEALTH_COLLISIONS            ; If not no collision   
00001AA8                          1111  
00001AA8                          1112  PLY_LTE_TO_FLYENEMY_Y_PLUS_H:     
00001AA8  2239 00001D70           1113      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001AAE  2439 00001D98           1114      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Y to D2
00001AB4  D479 00001DB6           1115      ADD.W   FLYENEMY_HEIGHT,D2          ; Set Enemy Height to D2
00001ABA  B481                    1116      CMP.L   D1,         D2          ; Do they Overlap ?
00001ABC  6C00 0006               1117      BGE     PLY_PLUS_H_LTE_TO_FLYENEMY_Y  ; Less than or Equal
00001AC0  6000 0018               1118      BRA     CHECK_HEALTH_COLLISIONS    ; If not no collision 
00001AC4                          1119  
00001AC4                          1120  PLY_PLUS_H_LTE_TO_FLYENEMY_Y:     ; Less than or Equal ?
00001AC4  D239 00001DAF           1121      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00001ACA  2439 00001D98           1122      MOVE.L  FLYINGENEMY_Y,    D2          ; Move Enemy Height to D2  
00001AD0  B481                    1123      CMP.L   D1,         D2          ; Do they OverLap ?
00001AD2  6F00 0096               1124      BLE     COLLISION               ; Collision !
00001AD6  6000 0002               1125      BRA     CHECK_HEALTH_COLLISIONS    ; If not no collision
00001ADA                          1126  
00001ADA                          1127  *--------------------Checking for Health collision---------------------
00001ADA                          1128  CHECK_HEALTH_COLLISIONS:
00001ADA  4281                    1129      CLR.L   D1                      ; Clear D1
00001ADC  4282                    1130      CLR.L   D2                      ; Clear D2
00001ADE                          1131  PLX_LTE_TO_HEALTH_X_PLUS_W:
00001ADE  2239 00001D6C           1132      MOVE.L  PLAYER_X,   D1
00001AE4  D239 00001DAE           1133      ADD.B   PLAYER_WIDTH,D1          ; Move Player Width to D1
00001AEA  2439 00001D8C           1134      MOVE.L  HEALTH_X,    D2                    ; Move Enemy X to D2
00001AF0  B481                    1135      CMP.L   D1,         D2                          ; Do the Overlap ?
00001AF2  6F00 0006               1136      BLE     PLX_PLUS_W_LTE_TO_HEALTH_X      ; Less than or Equal ?
00001AF6  6000 0050               1137      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001AFA                          1138  
00001AFA                          1139  PLX_PLUS_W_LTE_TO_HEALTH_X:           ; Check player is not  
00001AFA  2239 00001D6C           1140      MOVE.L  PLAYER_X,   D1
00001B00  2439 00001D8C           1141      MOVE.L  HEALTH_X,    D2            ; Move Enemy X to D2
00001B06  0682 0000000C           1142      ADD.L   #HEALTH_PACK_W,  D2                    ; Set Enemy width X + Width
00001B0C  B481                    1143      CMP.L   D1,         D2                  ; Do they OverLap ?
00001B0E  6C00 0006               1144      BGE     PLY_LTE_TO_HEALTH_Y_PLUS_H  ; Less than or Equal
00001B12  6000 0034               1145      BRA     COLLISION_CHECK_DONE            ; If not no collision   
00001B16                          1146  
00001B16                          1147  PLY_LTE_TO_HEALTH_Y_PLUS_H:     
00001B16  2239 00001D70           1148      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001B1C  2439 00001D90           1149      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Y to D2
00001B22  0682 0000000C           1150      ADD.L   #HEALTH_PACK_H,D2          ; Set Enemy Height to D2
00001B28  B481                    1151      CMP.L   D1,         D2          ; Do they Overlap ?
00001B2A  6C00 0006               1152      BGE     PLY_PLUS_H_LTE_TO_HEALTH_Y  ; Less than or Equal
00001B2E  6000 0018               1153      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001B32                          1154  
00001B32                          1155  PLY_PLUS_H_LTE_TO_HEALTH_Y:     ; Less than or Equal ?
00001B32  D239 00001DAF           1156      ADD.B   PLAYER_HEIGHT,D1          ; Add Player Height to D1
00001B38  2439 00001D90           1157      MOVE.L  HEALTH_Y,    D2          ; Move Enemy Height to D2  
00001B3E  B481                    1158      CMP.L   D1,         D2          ; Do they OverLap ?
00001B40  6F00 006E               1159      BLE     HEALTH_COLLISION               ; Collision !
00001B44  6000 0002               1160      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001B48                          1161  
00001B48                          1162  *------------------    
00001B48                          1163  COLLISION_CHECK_DONE:               ; No Collision Update points
00001B48  4239 00001D4B           1164      CLR.B   IN_ENEMY
00001B4E  4239 00001D4C           1165      CLR.B   IN_HPACK
00001B54  4281                    1166      CLR.L   D1
00001B56  1239 00001DA9           1167      MOVE.B  POINTS,    D1          ; Move points upgrade to D1
00001B5C  D2B9 00001D74           1168      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001B62  23C1 00001D74           1169      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001B68  4E75                    1170      RTS                             ; Return to subroutine
00001B6A                          1171  
00001B6A                          1172  
00001B6A                          1173  COLLISION:
00001B6A  0C39 0001 00001D4B      1174      CMP.B     #$01, IN_ENEMY
00001B72  6700 007A               1175      BEQ     STILL_COLLIDED
00001B76  0C39 0001 00001D4D      1176      CMP.B   #01, DRAW_HEALTHPACKS
00001B7E  6600 F7EE               1177      BNE     RESET_HEALTH_POSITION
00001B82  13FC 0001 00001D4D      1178      MOVE.B  #01, DRAW_HEALTHPACKS 
00001B8A  13FC 0001 00001D4E      1179      MOVE.B  #01, SPAWN_HEALTHPACKS 
00001B92  5339 00001DA8           1180      SUB.B   #1, LIVES
00001B98  13FC 0001 00001D4B      1181      MOVE.B  #$01, IN_ENEMY
00001BA0  4A39 00001DA8           1182      TST.B   LIVES
00001BA6  6700 0048               1183      BEQ     GAME_OVER
00001BAA  6100 FB06               1184      BSR     PLAY_HITHURT               ; Play Opps Wav
00001BAE  4E75                    1185      RTS                             ; Return to subroutine
00001BB0                          1186  
00001BB0                          1187  HEALTH_COLLISION:
00001BB0  0C39 0001 00001D4C      1188      CMP.B     #$01, IN_HPACK
00001BB8  6700 0034               1189      BEQ     STILL_COLLIDED
00001BBC  13FC 0000 00001D4D      1190      MOVE.B  #00, DRAW_HEALTHPACKS
00001BC4  6100 FB0A               1191      BSR     PLAY_POWERUP               ; Play Opps Wav
00001BC8  5239 00001DA8           1192      ADD.B   #1, LIVES
00001BCE  0C39 0005 00001DA8      1193      CMP.B   #05, LIVES
00001BD6  6C00 000C               1194      BGE     STOP_HPACK_SPAWN
00001BDA  13FC 0001 00001D4C      1195      MOVE.B  #$01, IN_HPACK
00001BE2  4E75                    1196      RTS
00001BE4                          1197  
00001BE4                          1198  STOP_HPACK_SPAWN:
00001BE4  13FC 0000 00001D4E      1199      MOVE.B  #00, SPAWN_HEALTHPACKS
00001BEC  4E75                    1200      RTS
00001BEE                          1201  
00001BEE                          1202  STILL_COLLIDED:
00001BEE  4E75                    1203      RTS
00001BF0                          1204  *-----------------------------------------------------------
00001BF0                          1205  * Subroutine    : EXIT
00001BF0                          1206  * Description   : Exit message and End Game
00001BF0                          1207  *-----------------------------------------------------------
00001BF0                          1208  
00001BF0                          1209  GAME_OVER:
00001BF0  6100 F796               1210      BSR     DRAW                    ; Redraw the Scene
00001BF4  103C 005E               1211      MOVE.B  #TC_REDRAW,        D0
00001BF8  4E4F                    1212      TRAP    #15
00001BFA  6100 FA7A               1213      BSR     PLAY_GAMEOVER
00001BFE  4281                    1214      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001C00                          1215  
00001C00  223C 00FFFFFF           1216      MOVE.L  #WHITE,     D1
00001C06  103C 0015               1217      MOVE.B  #21,        D0          ; Set Text Color
00001C0A  243C 01130005           1218      MOVE.L  #$01130005, D2
00001C10  4E4F                    1219      TRAP    #15                     ; Trap (Perform action)
00001C12                          1220  
00001C12  103C 000B               1221      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001C16  323C FF00               1222      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001C1A  4E4F                    1223      TRAP    #15                     ; Trap (Perform action)
00001C1C                          1224  
00001C1C  103C 000B               1225      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001C20  323C 1005               1226      MOVE.W  #$1005,     D1          ; Col 10, Row 03
00001C24  4E4F                    1227      TRAP    #15                     ; Trap (Perform action)
00001C26  43F9 00001D07           1228      LEA     GAMEOVER_MSG,A1        ; Game Over Message
00001C2C  303C 000D               1229      MOVE    #13,        D0          ; No Line feed
00001C30  4E4F                    1230      TRAP    #15                     ; Trap (Perform action)
00001C32                          1231  
00001C32                          1232      ; Player Score Message
00001C32  103C 000B               1233      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001C36  323C 0F06               1234      MOVE.W  #$0F06,     D1          ; Col 02, Row 01
00001C3A  4E4F                    1235      TRAP    #15                     ; Trap (Perform action)
00001C3C  43F9 00001CAC           1236      LEA     SCORE_MSG,  A1          ; Score Message
00001C42  303C 000D               1237      MOVE    #13,        D0          ; No Line feed
00001C46  4E4F                    1238      TRAP    #15                     ; Trap (Perform action)
00001C48                          1239  
00001C48                          1240      ; Player Score Value
00001C48  103C 000B               1241      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001C4C  323C 1706               1242      MOVE.W  #$1706,     D1          ; Col 09, Row 01
00001C50  4E4F                    1243      TRAP    #15                     ; Trap (Perform action)
00001C52  103C 0003               1244      MOVE.B  #03,        D0          ; Display number at D1.L
00001C56  2239 00001D74           1245      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00001C5C  4E4F                    1246      TRAP    #15                     ; Trap (Perform action)
00001C5E                          1247      
00001C5E                          1248  
00001C5E  223C 00FFFFFF           1249      MOVE.L  #WHITE,     D1
00001C64  103C 0015               1250      MOVE.B  #21,        D0          ; Set Text Color
00001C68  243C 03140000           1251      MOVE.L  #$03140000, D2
00001C6E  4E4F                    1252      TRAP    #15                     ; Trap (Perform action)
00001C70                          1253  
00001C70                          1254  
00001C70                          1255      ; Restart
00001C70  103C 000B               1256      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001C74  323C 0B08               1257      MOVE.W  #$0B08,     D1          ; Col 09, Row 01
00001C78  4E4F                    1258      TRAP    #15                     ; Trap (Perform action)
00001C7A  43F9 00001D12           1259      LEA     RESTART_MSG,  A1          ; Score Message
00001C80  303C 000D               1260      MOVE    #13,        D0          ; No Line feed
00001C84  4E4F                    1261      TRAP    #15                     ; Trap (Perform action)
00001C86                          1262  
00001C86                          1263      
00001C86  103C 005E               1264      MOVE.B  #TC_REDRAW,        D0
00001C8A  4E4F                    1265      TRAP    #15
00001C8C                          1266  
00001C8C                          1267  INPUTLOOP:
00001C8C  6100 F558               1268      BSR     INPUT
00001C90  60FA                    1269      BRA     INPUTLOOP
00001C92                          1270  
00001C92                          1271  EXIT:
00001C92                          1272      
00001C92  103C 000B               1273      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001C96  323C FF00               1274      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001C9A  4E4F                    1275      TRAP    #15                     ; Trap (Perform action)
00001C9C                          1276  
00001C9C  103C 005E               1277      MOVE.B  #TC_REDRAW,        D0
00001CA0  4E4F                    1278      TRAP    #15
00001CA2                          1279  
00001CA2  103C 0009               1280      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001CA6  4E4F                    1281      TRAP    #15                     ; Trap (Perform action)
00001CA8  FFFF FFFF               1282      SIMHALT
00001CAC                          1283  
00001CAC                          1284  *-----------------------------------------------------------
00001CAC                          1285  * Section       : Messages
00001CAC                          1286  * Description   : Messages to Print on Console, names should be
00001CAC                          1287  * self documenting
00001CAC                          1288  *-----------------------------------------------------------
00001CAC= 53 63 6F 72 65 20 ...   1289  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001CB5= 4B 65 79 43 6F 64 ...   1290  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
00001CC0= 4A 75 6D 70 2E 2E ...   1291  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00001CC9                          1292  
00001CC9= 49 64 6C 65 2E 2E ...   1293  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00001CD2= 55 70 64 61 74 65 ...   1294  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
00001CDD= 44 72 61 77 2E 2E ...   1295  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00001CE6                          1296  
00001CE6= 58 3A 00                1297  X_MSG           DC.B    'X:', 0             ; X Position Message
00001CE9= 59 3A 00                1298  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00001CEC= 56 3A 00                1299  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
00001CEF= 44 52 41 57 00          1300  VARMSG           DC.B    'DRAW', 0             ; Gravity Position Message
00001CF4= 53 50 41 57 4E 3A 00    1301  GND_MSG         DC.B    'SPAWN:', 0           ; On Ground Position Message
00001CFB                          1302  
00001CFB= 45 78 69 74 69 6E ...   1303  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001D07= 47 61 6D 65 20 4F ...   1304  GAMEOVER_MSG    DC.B    'Game Over!', 0      ; Game Over Message
00001D12= 50 72 65 73 73 20 ...   1305  RESTART_MSG    DC.B    'Press R to play again', 0      ; Game Over Message
00001D28                          1306  
00001D28= 45 6E 74 65 72 20 ...   1307  PRESSSTART      DC.B    'Enter 1 to start',0
00001D39= 4D 69 6E 69 20 4D ...   1308  TITLEMSG        DC.B    'Mini Man',0
00001D42= 4C 69 76 65 73 20 ...   1309  LIVES_MSG       DC.B    'Lives : ',0        ; lives message
00001D4B                          1310  
00001D4B= 00                      1311  IN_ENEMY        DC.B      00                  ; marker for if the player is in the enemy
00001D4C= 00                      1312  IN_HPACK        DC.B      00                  ; marker for if the player is in the health pack
00001D4D= 00                      1313  DRAW_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are showing
00001D4E= 00                      1314  SPAWN_HEALTHPACKS   DC.B  $00                  ; marker for if the healthpacks are spawning
00001D4F                          1315  
00001D50= 07D0                    1316  LEVEL_02        DC.W    2000
00001D52= 2710                    1317  LEVEL_03        DC.W    10000
00001D54                          1318  
00001D54= 00002710 00001D4C ...   1319  LEVELS:         DC.L    10000,7500,5000,1000
00001D64                          1320  
00001D64                          1321  *-----------------------------------------------------------
00001D64                          1322  * Section       : Screen Size
00001D64                          1323  * Description   : Screen Width and Height
00001D64                          1324  *-----------------------------------------------------------
00001D64                          1325  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001D66                          1326  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001D68                          1327  
00001D68                          1328  *-----------------------------------------------------------
00001D68                          1329  * Section       : Keyboard Input
00001D68                          1330  * Description   : Used for storing Keypresses
00001D68                          1331  *-----------------------------------------------------------
00001D68                          1332  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001D6C                          1333  
00001D6C                          1334  *-----------------------------------------------------------
00001D6C                          1335  * Section       : Character Positions
00001D6C                          1336  * Description   : Player and Enemy Position Memory Locations
00001D6C                          1337  *-----------------------------------------------------------
00001D6C                          1338  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001D70                          1339  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001D74                          1340  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001D78                          1341  
00001D78                          1342  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001D7C                          1343  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001D80                          1344  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001D84                          1345  
00001D84                          1346  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00001D88                          1347  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001D8C                          1348  
00001D8C                          1349  HEALTH_X         DS.L    01  ; Reserve Space for Health+ X Position
00001D90                          1350  HEALTH_Y         DS.L    01  ; Reserve Space for Health Y Position
00001D94                          1351  
00001D94                          1352  FLYINGENEMY_X         DS.L    01  ; Reserve Space for Flying Enemy X Position
00001D98                          1353  FLYINGENEMY_Y         DS.L    01  ; Reserve Space for Flying Enemy Y Position
00001D9C                          1354  
00001D9C= 000000FF                1355  ENEMYCOLOR        DC.L        $000000FF
00001DA0= 00FF0000                1356  FLYENEMYCOLOR     DC.L        $00FF0000
00001DA4                          1357  
00001DA4                          1358  RANDOM            DS.L        01  ; Reserve Space for Random Number
00001DA8= 02                      1359  LIVES             DC.B        02  ; reserves space for player lives
00001DA9                          1360   
00001DA9= 02                      1361  POINTS            DC.B        02          ; Points added
00001DAA                          1362  
00001DAA= 00003039                1363  SEED    DC.L   12345      ; Initial seed value   
00001DAE                          1364  
00001DAE                          1365  * Widths and heights of player, enemy and healthpack
00001DAE                          1366  *-----------------------------------------------------------
00001DAE= 0C                      1367  PLAYER_WIDTH      DC.B        12          ; Player Width
00001DAF= 0C                      1368  PLAYER_HEIGHT     DC.B        12          ; Player Height
00001DB0                          1369  
00001DB0= 000C                    1370  ENEMY_WIDTH       DC.W        12          ; Enemy Width
00001DB2= 000C                    1371  ENEMY_HEIGHT      DC.W        12          ; Enemy Height
00001DB4                          1372  
00001DB4= 0014                    1373  FLYENEMY_WIDTH    DC.W        20 
00001DB6= 000C                    1374  FLYENEMY_HEIGHT   DC.W        12 
00001DB8                          1375  
00001DB8                          1376          
00001DB8                          1377  *-----------------------------------------------------------
00001DB8                          1378  * Section       : Sounds
00001DB8                          1379  * Description   : Sound files, which are then loaded and given
00001DB8                          1380  * an address in memory, they take a longtime to process and play
00001DB8                          1381  * so keep the files small. Used https://voicemaker.in/ to 
00001DB8                          1382  * generate and Audacity to convert MP3 to WAV
00001DB8                          1383  *-----------------------------------------------------------
00001DB8= 6A 75 6D 70 2E 77 ...   1384  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00001DC1= 67 61 6D 65 4F 76 ...   1385  GAMEOVER_WAV         DC.B    'gameOver.wav',0         ; Run Sound
00001DCE= 68 69 74 48 75 72 ...   1386  HITHURT_WAV        DC.B    'hitHurt.wav',0        ; Collision Opps
00001DDA= 70 6F 77 65 72 55 ...   1387  POWERUP_WAV        DC.B    'powerUP.wav',0        ; Collision Opps
00001DE6= 6C 65 76 65 6C 43 ...   1388  LEVELCHANGE_WAV        DC.B    'levelChange.wav',0        ; Collision Opps
00001DF6                          1389  
00001DF6                          1390  *---*
00001DF6= 00C8                    1391  X   DC.W    200
00001DF8= 0190                    1392  Y   DC.W    400
00001DFA= 00C8                    1393  Z   DC.W    200
00001DFC= 0004                    1394  SCALER DC.W  4
00001DFE  =00000010               1395  ROWC    EQU    16
00001DFE= FFB0                    1396  WIDTH   DC.W    $FFB0
00001E00                          1397  
00001E00                          1398  title
00001E00= 74 72 65 65 32 2E ...   1399      dc.b    'tree2.bmp',0
00001E0A                          1400  list
00001E0A= 2A 2E 62 6D 70 00       1401      dc.b    '*.bmp',0               * file type list
00001E10                          1402      ds.w    0                   * ensure even
00001E10                          1403  
00001E10                          1404  
00001E10= 00000000                1405  timer           DC.L    0
00001E14                          1406  SPRITE_DATA:
00001E14                          1407      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BLACK               0
BLUE                FF0000
BROWN               19506D
CHECK_COLLISIONS    1A02
CHECK_FLYENEMY_COLLISIONS  1A6C
CHECK_HEALTH_COLLISIONS  1ADA
COLLISION           1B6A
COLLISION_CHECK_DONE  1B48
COL_LOOP            13F8
CONTINUE            1386
CURRENT_KEY         1D68
DRAW                1388
DRAWDIRT            19AC
DRAW_BACKGROUND     13B6
DRAW_ENEMY          1736
DRAW_FLOOR          1840
DRAW_FLOOR_L1       19A2
DRAW_FLOOR_L2       1966
DRAW_FLOOR_L3       192A
DRAW_FLOOR_L4       18EE
DRAW_FLOOR_L5       18B2
DRAW_FLYENEMY       177A
DRAW_HEALTHPACK     17BE
DRAW_HEALTHPACKS    1D4D
DRAW_HEALTHPACK_DONE  1834
DRAW_MSG            1CDD
DRAW_PLAYER         16FA
DRAW_PLYR_DATA      1462
DRAW_SPRITE         13F0
END_LOOP            1460
ENEMYCOLOR          1D9C
ENEMY_HEIGHT        1DB2
ENEMY_WIDTH         1DB0
ENEMY_X             1D84
ENEMY_Y             1D88
ENMY_H_INIT         C
ENMY_W_INIT         C
ESCAPE              1B
EXIT                1C92
EXIT_MSG            1CFB
FLYENEMYCOLOR       1DA0
FLYENEMY_HEIGHT     1DB6
FLYENEMY_WIDTH      1DB4
FLYINGENEMY_X       1D94
FLYINGENEMY_Y       1D98
FLY_ENMY_H_INIT     C
FLY_ENMY_W_INIT     14
GAME                1196
GAMELOOP            11D0
GAMEOVER_INDEX      0
GAMEOVER_LOAD       1664
GAMEOVER_MSG        1D07
GAMEOVER_WAV        1DC1
GAME_OVER           1BF0
GND_FALSE           0
GND_MSG             1CF4
GND_TRUE            1
GREEN               566D19
HEALTH_COLLISION    1BB0
HEALTH_PACK_H       C
HEALTH_PACK_W       C
HEALTH_X            1D8C
HEALTH_Y            1D90
HITHURT_INDEX       2
HITHURT_LOAD        16A0
HITHURT_WAV         1DCE
IDLE                1662
IDLE_MSG            1CC9
INITIALISE          1000
INPUT               11E6
INPUTLOOP           1C8C
IN_ENEMY            1D4B
IN_HPACK            1D4C
IS_PLAYER_ON_GND    15EA
JMP_INDEX           1
JUMP                163E
JUMP_DONE           1660
JUMP_LOAD           1682
JUMP_MSG            1CC0
JUMP_WAV            1DB8
KEYCODE_MSG         1CB5
LEVELCHANGE_INDEX   4
LEVELCHANGE_WAV     1DE6
LEVELS              1D54
LEVEL_02            1D50
LEVEL_03            1D52
LIFEGREEN           44FF44
LIST                1E0A
LIVES               1DA8
LIVES_MSG           1D42
LVLCHANGE_LOAD      16DC
MOVE_ENEMY          12D6
MOVE_ENEMY_L2       1308
MOVE_ENEMY_L3       131E
MOVE_ENEMY_L4       1334
MOVE_HEALTHPACK     12CE
MOVE_TREE           12C6
PERFORM_JUMP        1650
PLAYER_HEIGHT       1DAF
PLAYER_SCORE        1D74
PLAYER_WIDTH        1DAE
PLAYER_X            1D6C
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  1A06
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1A22
PLAYER_Y            1D70
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  1A3E
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  1A58
PLAY_GAMEOVER       1676
PLAY_HITHURT        16B2
PLAY_JUMP           1694
PLAY_LVLCHANGE      16EE
PLAY_POWERUP        16D0
PLX_LTE_TO_FLYENEMY_X_PLUS_W  1A70
PLX_LTE_TO_HEALTH_X_PLUS_W  1ADE
PLX_PLUS_W_LTE_TO_FLYENEMY_X  1A8C
PLX_PLUS_W_LTE_TO_HEALTH_X  1AFA
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1D7C
PLYR_H_INIT         C
PLYR_JUMP_V         FFFFFFED
PLYR_ON_GND         1D80
PLYR_VELOCITY       1D78
PLYR_W_INIT         C
PLY_LTE_TO_FLYENEMY_Y_PLUS_H  1AA8
PLY_LTE_TO_HEALTH_Y_PLUS_H  1B16
PLY_PLUS_H_LTE_TO_FLYENEMY_Y  1AC4
PLY_PLUS_H_LTE_TO_HEALTH_Y  1B32
POINTS              1DA9
POWERUP_INDEX       3
POWERUP_LOAD        16BE
POWERUP_WAV         1DDA
PRESSSTART          1D28
PROCESS_INPUT       1206
PROCESS_RESTART     1238
R                   52
RANDOM              1DA4
RANDOM_NUMBER       19D2
RED                 FF
RESET_ENEMY_POSITION  134E
RESET_FLYENEMY_POSITION  135E
RESET_HEALTH_POSITION  136E
RESET_TREE          12BC
RESTART_MSG         1D12
ROWC                10
ROW_LOOP            13F4
SCALER              1DFC
SCORE_MSG           1CAC
SCREEN_H            1D66
SCREEN_W            1D64
SEED                1DAA
SET_OFF_GROUND      1632
SET_ON_GROUND       160A
SKIP_PIXEL          1432
SKY                 FFE2B0
SPACEBAR            20
SPAWN_HEALTHPACKS   1D4E
SPRITE_DATA         1E14
START               1000
STARTSCREEN         1196
STILL_COLLIDED      1BEE
STOP_HPACK_SPAWN    1BE4
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_REDRAW           5E
TC_SCREEN           21
TC_S_SIZE           0
TIMER               1E10
TITLE               1E00
TITLEMSG            1D39
UPDATE              1248
UPDATE_MSG          1CD2
VARMSG              1CEF
V_MSG               1CEC
WHITE               FFFFFF
WIDTH               1DFE
X                   1DF6
X_MSG               1CE6
Y                   1DF8
Y_MSG               1CE9
Z                   1DFA
